(1 (zzz-to-char . [(20160122 2040) ((emacs (24 4)) (avy (0 3 0)) (cl-lib (0 5)) ) "Fancy version of `zaptochar' command * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/zzz-to-char") (:keywords  " convenience"))])(zygospore . [(20140703 1652)  nil  "reversible Cx 1 (eteotherwindows)" single ((url: ."https://github.com/LouisKottmann/zygospore.el") (:keywords ""))])(ztree . [(20160128 742) ((cl-lib (0)) ) "Text mode directory tree * lexicalbinding: t *" tar ((url: ."https://github.com/fourier/ztree") (:keywords  " files tools"))])(zotelo . [(20160119 1245) ((cl-lib (0 5)) ) "Filename:" single ((url: ."https://github.com/vspinu/zotelo") (:keywords  " zotero" " emacs" " reftex" " bibtex" " MozRepl" " bibliography manager"))])(zossima . [(20121219 528) ((inf-ruby (2 2 3)) ) "Ruby from Emacs" tar ((url: ."https://github.com/technomancy/zossima") (:keywords  " ruby convenience"))])(zop-to-char . [(20160212 1708) ((cl-lib (0 5)) ) "A replacement of zaptochar. * lexicalbinding: t *" single ((url: ."https://github.com/thierryvolpiatto/zop-to-char") (:keywords ""))])(zoom-window . [(20160510 1220)  nil  "Zoom window like tmux" single ((url: ."https://github.com/syohex/emacs-zoom-window") (:keywords ""))])(zonokai-theme . [(20160322 1025)  nil  "(provide ')" tar ((url: ."https://github.com/ZehCnaS34/zonokai-emacs") (:keywords ""))])(zone-sl . [(20160201 2012) ((emacs (24 3)) ) "Filename:" single ((url: ."https://github.com/kawabata/zone-sl") (:keywords  " games"))])(zone-select . [(20160118 2219) ((dash (2 8)) (emacs (24 3)) ) "Filename:" single ((url: ."https://github.com/kawabata/zone-select") (:keywords  " games"))])(zone-rainbow . [(20160120 2134) ((emacs (24 3)) ) "Filename:" single ((url: ."https://github.com/kawabata/zone-rainbow") (:keywords  " games"))])(zone-nyan . [(20160310 1752) ((esxml (0 3 1)) ) "Zone out with nyan cat" single ((url: ."https://github.com/wasamasa/zone-nyan") (:keywords  " zone"))])(zombie-trellys-mode . [(20150305 148) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5)) ) "A minor mode for interaction with Zombie Tlys  * lexicalbinding: t *" single ((url: ."https://github.com/david-christiansen/zombie-trellys-mode") (:keywords  " languages"))])(zombie . [(20141223 16)  nil  "major mode for editing ZOMBIE programs" single ((url: ."https://github.com/zk-phi/zombie") (:keywords ""))])(znc . [(20140723 1618) ((erc (5 3)) (cl-lib (0 2)) ) "ZNC + ERC" single ((url: ."https://github.com/sshirokov/ZNC.el") (:keywords ""))])(zlc . [(20151011 957)  nil  "Provides zsh like completion system to Emacs" single ((url: ."https://github.com/mooz/emacs-zlc") (:keywords  " matching" " convenience"))])(zerodark-theme . [(20160518 2127)  nil  "A dark, medium contrast theme for Emacs" single ((url: ."https://github.com/NicolasPetton/zerodark-theme") (:keywords  " themes"))])(zencoding-mode . [(20140213 1622)  nil  "Unfold CSSectorlike expressions to markup" single ((url: ."https://github.com/rooney/zencoding") (:keywords  " convenience"))])(zenburn-theme . [(20160501 2249)  nil  "A low contrast color theme for Emacs." single ((url: ."https://github.com/bbatsov/zenburn-emacs") (:keywords ""))])(zen-and-art-theme . [(20120622 2237)  nil  "zen and art color theme for GNU Emacs 24" single ((url: ."https://github.com/developernotes/zen-and-art-theme") (:keywords ""))])(zeal-at-point . [(20151231 1648)  nil  "Search the word at point with Zeal" single ((url: ."https://github.com/jinzhu/zeal-at-point") (:keywords ""))])(z3-mode . [(20151121 655) ((emacs (24)) (flycheck (0 23)) ) "A z3/SMTLIBv2 interactive deopment environment *lexicalbinding: t*" single ((url: ."https://github.com/zv/z3-mode") (:keywords  " z3 yices mathsat smt beaver"))])(youdao-dictionary . [(20150914 1444) ((chinese-word-at-point (0 2)) (emacs (24)) (names (0 5)) (popup (0 5 0)) ) "Youdao Dictionary interface for Emacs" single ((url: ."https://github.com/xuchunyang/youdao-dictionary.el") (:keywords  " convenience" " Chinese" " dictionary"))])(yoshi-theme . [(20160305 718)  nil  "Theme named after my cat" single ((url: ."https://github.com/ryuslash/yoshi-theme") (:keywords  " faces"))])(yesql-ghosts . [(20150221 537) ((dash (2 10 0)) (cider (0 8 0)) (s (1 9 0)) ) "Display ghostly yesql defqueries inline" single ((url: ."https://github.com/magnars/yesql-ghosts") (:keywords ""))])(ycmd . [(20160507 1551) ((dash (2 12 0)) (request-deferred (0 2 0)) (s (1 10 0)) (emacs (24 3)) (popup (0 5 0)) (request (0 2 0)) (deferred (0 3 2)) (cl-lib (0 5)) (let-alist (1 0 4)) ) "emacs bindings to the  completion server * lexicalbinding: t *" tar ((url: ."https://github.com/abingham/emacs-ycmd") (:keywords ""))])(ycm . [(20150823 236)  nil  "Emacs client for the YouCompleteMe autocompletion server." single ((url: ."https://github.com/neuromage/ycm.el") (:keywords  " c" " abbrev"))])(yaxception . [(20150105 2340)  nil  "Provide framework about exception like Java for Elisp" single ((url: ."https://github.com/aki2o/yaxception") (:keywords  " exception error signal"))])(yatemplate . [(20151125 1633) ((yasnippet (0 8 1)) ) "Copyright (C) 2015  Wand Hoffmann <themineo+@gmail.com>" tar ((url: ."https://github.com/mineo/yatemplate") (:keywords  " files" " convenience"))])(yasnippet . [(20160514 1918) ((cl-lib (0 5)) ) "Yet another snippet extension for Emacs." tar ((url: ."https://github.com/capitaomorte/yasnippet") (:keywords  " convenience" " emulation"))])(yascroll . [(20150315 2117) ((cl-lib (0 3)) ) "Yet Another Scroll Bar Mode" single ((url: ."https://github.com/m2ym/yascroll-el") (:keywords  " convenience"))])(yari . [(20151128 1539)  nil  "Yet Another RI interface for Emacs" single ((url: ."https://github.com/hron/yari.el") (:keywords  " tools"))])(yard-mode . [(20160311 52)  nil  "Minor mode for Ruby YARD comments" single ((url: ."https://github.com/pd/yard-mode.el") (:keywords ""))])(yankpad . [(20160517 2227)  nil  "Paste snippets from an orgmode file" single ((url: ."https://github.com/Kungsgeten/yankpad") (:keywords  " abbrev convenience"))])(yandex-weather . [(20160312 437)  nil  "Fetch Yandex Weather forecasts." tar ((url: ."https://github.com/abstractionlayer/yandex-weather.el") (:keywords ""))])(yaml-tomato . [(20151124 511) ((s (1 9)) ) "copy or show the yaml path currently under cursor." single ((url: ."https://github.com/RadekMolenda/yaml-tomato") (:keywords  " Yaml"))])(yaml-mode . [(20160426 1638) ((emacs (24 1)) ) "Major mode for editing YAML files" single ((url: ."https://github.com/yoshiki/yaml-mode") (:keywords  " data yaml"))])(yalinum . [(20130217 1843)  nil  "yet another display line numbers." single ((url: ."https://github.com/tm8st/emacs-yalinum") (:keywords  " convenience" " tools"))])(yahoo-weather . [(20160426 2029) ((emacs (24)) ) "Displays weather information in modeline  * lexicalbinding: t *" single ((url: ."https://github.com/lujun9972/yahoo-weather-mode") (:keywords  " weather" " mode-line"))])(yagist . [(20160418 1308) ((cl-lib (0 3)) ) "Yet Another Emacs integration for gist.github.com" single ((url: ."https://github.com/mhayashi1120/yagist.el") (:keywords  " tools"))])(yafolding . [(20141203 1256)  nil  "Yet another folding extension for Emacs" single ((url: ."https://github.com/zenozeng/yafolding.el") (:keywords ""))])(yabin . [(20140206 1151)  nil  "Yet Another Bignum package (A thin wrapper of calc)." single ((url: ."https://github.com/d5884/yabin") (:keywords  " data"))])(xtest . [(20141215 117) ((cl-lib (0 5)) ) "Simple Testing with Emacs & ERT" single ((url: ."https://github.com/promethial/xtest") (:keywords  " testing" " ERT"))])(xterm-title . [(20091204 223)  nil  "Update xterm titles" single ((url: ."https://github.com/emacsmirror/xterm-title") (:keywords ""))])(xterm-keybinder . [(20151211 1501) ((emacs (24 3)) (cl-lib (0 5)) (let-alist (1 0 1)) ) "Let you extra keybinds in xterm/urxvt * lexicalbinding: t *" tar ((url: ."https://github.com/yuutayamada/xterm-keybinder-el") (:keywords  " Convenient"))])(xterm-frobs . [(20091212 755)  nil  "manipulate xterm when running emacs in tty mode" single ((url: ."https://github.com/emacsmirror/xterm-frobs") (:keywords ""))])(xterm-color . [(20160402 1125)  nil  "ANSI & XTERM 256 color support" single ((url: ."https://github.com/atomontage/xterm-color") (:keywords ""))])(xresources-theme . [(20160331 2202)  nil  "Use your .Xresources as your emacs theme" single ((url: ."https://github.com/CQQL/xresources-theme") (:keywords  " xresources" " theme"))])(xref-js2 . [(20160421 1733) ((emacs (25)) (js2-mode (20150909)) ) "Jump to references/definitions using ag & js2mode's AST * lexicalbinding: t *" single ((url: ."https://github.com/NicolasPetton/xref-js2") (:keywords  " javascript" " convenience" " tools"))])(xquery-tool . [(20160204 153)  nil  "A simple interface to saxonb's xquery." single ((url: ."https://github.com/paddymcall/xquery-tool.el") (:keywords  " xml" " xquery" " emacs"))])(xquery-mode . [(20140122 143)  nil  "A simple mode for editing xquery programs" tar ((url: ."https://github.com/mblakele/xquery-mode") (:keywords ""))])(xo . [(20160403 1446)  nil  "XO linter integration with compilation mode" single ((url: ."https://github.com/j-em/xo-emacs") (:keywords  " processes"))])(xmlunicode . [(20160320 12)  nil  "Unicode support for XML * coding: utf8 *" tar ((url: ."https://github.com/ndw/xmlunicode") (:keywords  " utf-8 unicode xml characters"))])(xmlgen . [(20130219 1819)  nil  "A DSL for generating XML." single ((url: ."https://github.com/philjackson/xmlgen") (:keywords ""))])(xml-rpc . [(20160501 558)  nil  "Anisp implementation of clientside XMLRPC" tar ((url: ."https://github.com/hexmode/xml-rpc-el") (:keywords  " xml rpc network"))])(xml-quotes . [(20151231 649)  nil  "read quotations from an XML document" tar ((url: ."https://github.com/ndw/xml-quotes") (:keywords  " xml quotations"))])(xml+ . [(20160211 1142) ((dash (2 12 0)) (emacs (24 4)) ) "+  Utilities for  and html trees" tar ((url: ."https://github.com/bddean/xml-plus") (:keywords  " xml" " html"))])(xkcd . [(20160419 1930) ((json (1 3)) ) "View  from Emacs" single ((url: ."https://github.com/vibhavp/emacs-xkcd") (:keywords  " xkcd webcomic"))])(xcscope . [(20160514 306)  nil  "cscope interface for (X)Emacs" single ((url: ."https://github.com/dkogan/xcscope.el") (:keywords  " languages c"))])(xbm-life . [(20160103 1817)  nil  "A XBM version of Conway's Game of Life" single ((url: ."https://github.com/wasamasa/xbm-life") (:keywords  " games"))])(xahk-mode . [(20150505 711)  nil  "Major mode for editing AutoHotkey scripts." single ((url: ."https://github.com/xahlee/xahk-mode.el") (:keywords  " languages"))])(xah-replace-pairs . [(20150522 1836)  nil  "Multipair find/replace in strings and region." single ((url: ."https://github.com/xahlee/xah-replace-pairs") (:keywords  " lisp" " tools" " find replace"))])(xah-math-input . [(20160128 608)  nil  "a minor mode for inputting math and Unicode symbols." single ((url: ."https://github.com/xahlee/xah-math-input") (:keywords  " abbrev" " convenience" " unicode" " math" " LaTex"))])(xah-lookup . [(20150603 246)  nil  "look up word on internet" single ((url: ."https://github.com/xahlee/lookup-word-on-internet") (:keywords  " help" " docs" " convenience"))])(xah-get-thing . [(20150713 530)  nil  "get thing or ection at point." single ((url: ."https://github.com/xahlee/xah-get-thing-or-selection") (:keywords  " extensions" " lisp" " tools"))])(xah-fly-keys . [(20160511 341)  nil  "A efficient modal keybinding set minor mode based on ergonomics." single ((url: ."https://github.com/xahlee/xah-fly-keys") (:keywords  " convenience" " emulations" " vim" " ergoemacs"))])(xah-find . [(20160211 1102)  nil  "find replace in pure emacs lisp. Purpose similar to unix grep/sed." single ((url: ."https://github.com/xahlee/xah-find") (:keywords  " convenience" " extensions" " files" " tools" " unix"))])(xah-elisp-mode . [(20160409 1827)  nil  "Major mode for editing emacs lisp." single ((url: ."https://github.com/xahlee/xah-elisp-mode") (:keywords  " lisp" " languages"))])(x86-lookup . [(20160517 556) ((emacs (24 3)) (cl-lib (0 3)) ) "jump to x86 instruction documentation * lexicalbinding: t *" single ((url: ."https://github.com/skeeto/x86-lookup") (:keywords ""))])(x-dict . [(20091204 223)  nil  "emacs interface for several online dictionaries" single ((url: ."https://github.com/emacsmirror/x-dict") (:keywords ""))])(wwtime . [(20151123 10)  nil  "Insert a time of day with appropriate worldwide localization" single ((url: ."https://github.com/ndw/wwtime") (:keywords  " time"))])(wttrin . [(20160426 142) ((emacs (24 4)) (xterm-color (1 0)) ) "Emacs frontend for weather web service wttr.in" single ((url: ."https://github.com/bcbcarl/emacs-wttrin") (:keywords  " comm" " weather" " wttrin"))])(wsd-mode . [(20160511 1351)  nil  "Emacs majormode for www.websequencediagrams.com" tar ((url: ."https://github.com/josteink/wsd-mode") (:keywords ""))])(ws-butler . [(20150126 2359)  nil  "Unobtrusiy remove trailing whitespace." single ((url: ."https://github.com/lewang/ws-butler") (:keywords ""))])(writeroom-mode . [(20160414 333) ((emacs (24 1)) (visual-fill-column (1 4)) ) "Minor mode for distractionfree writing  * lexicalbinding: t *" single ((url: ."https://github.com/joostkremers/writeroom-mode") (:keywords  " text"))])(writegood-mode . [(20150326 215)  nil  "Polish up poor writing on the fly" single ((url: ."https://github.com/bnbeckwith/writegood-mode") (:keywords  " writing weasel-words grammar"))])(wrap-region . [(20151023 1617) ((dash (1 0 3)) ) "Wrap text with punctation or tag" single ((url: ."https://github.com/rejeep/wrap-region.el") (:keywords  " speed" " convenience"))])(world-time-mode . [(20140627 1607)  nil  "show whole days of worldtime diffs" single ((url: ."https://github.com/nicferrier/emacs-world-time-mode") (:keywords  " tools" " calendar"))])(workgroups . [(20110727 41)  nil  "for windows (for Emacs)" single ((url: ."https://github.com/tlh/workgroups.el") (:keywords  " session management window-configuration persistence"))])(worf . [(20160422 2216) ((ace-link (0 1 0)) (swiper (0 7 0)) (hydra (0 13 0)) ) "A warrior does not press so many keys! (in orgmode)" tar ((url: ."https://github.com/abo-abo/worf") (:keywords  " lisp"))])(wordsmith-mode . [(20151117 1836)  nil  "Copyright (C) 2014 istib <http://github.com/istib//>" single ((url: ."https://github.com/istib/wordsmith-mode") (:keywords ""))])(wolfram-mode . [(20140118 2357) ((emacs (24 3)) ) "Filename:" single ((url: ."https://github.com/kawabata/wolfram-mode") (:keywords  " languages" " processes" " tools"))])(wn-mode . [(20151110 1352) ((emacs (24)) ) "URL: https://github.com/luismbo/" single ((url: ."https://github.com/luismbo/wn-mode") (:keywords  " buffers windows switching-windows"))])(with-namespace . [(20140823 109) ((dash (1 1 0)) (loop (1 1)) ) "interoperableisp namespaces" tar ((url: ."https://github.com/Wilfred/with-namespace.el") (:keywords  " namespaces"))])(with-editor . [(20160408 1701) ((dash (2 12 1)) (emacs (24 4)) (async (1 5)) ) "Use the Emacsclient as $EDITOR * lexicalbinding: t *" single ((url: ."https://github.com/magit/with-editor") (:keywords  " tools"))])(wispjs-mode . [(20140104 632) ((clojure-mode (0)) ) "Major mode for Wisp code." single ((url: ."https://github.com/krisajenkins/wispjs-mode") (:keywords ""))])(winpoint . [(20131118 249)  nil  "Remember buffer positions perwindow, not per buffer" single ((url: ."https://github.com/jorgenschaefer/winpoint") (:keywords  " convenience"))])(windsize . [(20151121 2140)  nil  "Simple, intuitive window resizing" single ((url: ."https://github.com/grammati/windsize") (:keywords  " window" " resizing" " convenience"))])(window-purpose . [(20160310 2028) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1)) ) "Purposebased window management for Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/bmag/emacs-purpose") (:keywords  " frames"))])(window-numbering . [(20150301 447)  nil  "Numbered window shortcuts" single ((url: ."https://github.com/nschum/window-numbering.el") (:keywords  " faces" " matching"))])(window-layout . [(20150717 1307)  nil  "window layout manager" single ((url: ."https://github.com/kiwanami/emacs-window-layout") (:keywords  " window" " layout"))])(window-jump . [(20150214 436)  nil  "Move left/right/up/down through your windows." single ((url: ."https://github.com/chumpage/chumpy-windows") (:keywords  " frames convenience"))])(window-end-visible . [(20140805 322)  nil  "Find the last visible point in a window" single ((url: ."https://github.com/rolandwalker/window-end-visible") (:keywords  " extensions"))])(win-switch . [(20150209 1111)  nil  "fast, dynamic bindings for windowswitching/resizing" tar ((url: ."https://github.com/genovese/win-switch") (:keywords  " window" " switch" " key bindings" " ergonomic" " efficient"))])(wilt . [(20151105 2118) ((dash (2 12 0)) (s (1 10 0)) (emacs (24 3)) ) "An extensions for calculating WILT in a buffer." tar ((url: ."https://github.com/sixty-north/emacs-wilt") (:keywords ""))])(wiki-summary . [(20150409 2353) ((emacs (24)) ) "View Wikipedia summaries in Emacs easily." single ((url: ."https://github.com/jozefg/wiki-summary.el") (:keywords  " wikipedia" " utility"))])(wiki-nav . [(20150223 2154) ((nav-flash (1 0 0)) (button-lock (1 0 2)) ) "Simple file navigation using [[WikiStrings]]" single ((url: ."https://github.com/rolandwalker/button-lock") (:keywords  " mouse" " button" " hypermedia" " navigation"))])(widget-mvc . [(20151215 844)  nil  "MVC framework for the emacs widgets" single ((url: ."https://github.com/kiwanami/emacs-widget-mvc") (:keywords  " lisp" " widget"))])(wide-column . [(20120814 1612)  nil  "Calls functions dependant on column position." single ((url: ."https://github.com/phillord/wide-column") (:keywords  " minor mode" " cursor colour" " column width"))])(whole-line-or-region . [(20110901 1630)  nil  "operate on current line if region undefined" single ((url: ."https://github.com/purcell/whole-line-or-region") (:keywords  "        kill yank cut copy paste whole lines"))])(whitespace-cleanup-mode . [(20150603 1947)  nil  "Inligently call whitespacecleanup on save" single ((url: ."https://github.com/purcell/whitespace-cleanup-mode") (:keywords  " convenience"))])(white-sand-theme . [(20151118 48) ((emacs (24)) ) "Emacs theme with a light background." single ((url: ."https://github.com/mswift42/white-sand-theme") (:keywords ""))])(whitaker . [(20150814 1922)  nil  "Comint interface for Whitaker's Words" single ((url: ."https://github.com/Fuco1/whitaker") (:keywords  " processes"))])(which-key . [(20160517 925) ((emacs (24 3)) ) "Display available keybindings in popup  * lexicalbinding: t *" tar ((url: ."https://github.com/justbur/emacs-which-key") (:keywords ""))])(what-the-commit . [(20150902 313)  nil  "Random commit message generator" single ((url: ."https://github.com/danielbarbarito/what-the-commit.el") (:keywords  " git" " commit" " message"))])(wgrep-pt . [(20141017 1831) ((wgrep (2 1 5)) ) "Writable pt buffer and apply the changes to files" single ((url: ."https://github.com/mhayashi1120/Emacs-wgrep") (:keywords  " grep edit extensions"))])(wgrep-helm . [(20141017 1831) ((wgrep (2 1 1)) ) "Writable mgrepmode buffer and apply the changes to files" single ((url: ."https://github.com/mhayashi1120/Emacs-wgrep") (:keywords  " grep edit extensions"))])(wgrep-ag . [(20141017 1831) ((wgrep (2 1 5)) ) "Writable ag buffer and apply the changes to files" single ((url: ."https://github.com/mhayashi1120/Emacs-wgrep") (:keywords  " grep edit extensions"))])(wgrep-ack . [(20141017 1831) ((wgrep (2 1 1)) ) "Writable ackandahalf buffer and apply the changes to files" single ((url: ."https://github.com/mhayashi1120/Emacs-wgrep") (:keywords  " grep edit extensions"))])(wgrep . [(20141017 1831)  nil  "Writable grep buffer and apply the changes to files" single ((url: ."https://github.com/mhayashi1120/Emacs-wgrep") (:keywords  " grep edit extensions"))])(weibo . [(20150308 642) ((cl-lib (0 5)) ) "Weibo client for Emacs" tar ((url: ."https://github.com/austin-----/weibo.emacs") (:keywords  " weibo"))])(weechat-alert . [(20160416 2048) ((alert (1 2)) (weechat (0 3 1)) (cl-lib (0 5)) ) "Weechat notifier using alerts  * lexicalbinding: t *" single ((url: ."https://github.com/Kungi/weechat-alert") (:keywords  " irc chat network weechat"))])(weechat . [(20160301 448)  nil  "Chat via WeeChat's ay protocol in Emacs  * lexicalbinding: t *" tar ((url: ."https://github.com/the-kenny/weechat.el") (:keywords  " irc chat network weechat"))])(wedge-ws . [(20140715 549)  nil  "Wedge whitespace between columns in text" single ((url: ."https://github.com/aes/wedge-ws") (:keywords  " formatting indentation"))])(websocket . [(20160511 1101)  nil  "Emacs WebSocket client and server" tar ((url: ."https://github.com/ahyatt/emacs-websocket") (:keywords  " Communication" " Websocket" " Server"))])(web-server . [(20140906 806) ((emacs (24 3)) ) "Emacs Web Server" tar ((url: ."https://github.com/eschulte/emacs-web-server") (:keywords  " http" " server" " network"))])(web-mode . [(20160506 10)  nil  "major mode for editing web templates" single ((url: ."https://github.com/fxbois/web-mode") (:keywords  " languages"))])(web-completion-data . [(20160318 1648)  nil  "Shared completion data for achtml and companyweb" tar ((url: ."https://github.com/osv/web-completion-data") (:keywords  " html" " auto-complete" " company"))])(web-beautify . [(20160411 115)  nil  "Copyright (C) 20132016 Yasuyuki Oka and  contributors" single ((url: ."https://github.com/yasuyk/web-beautify") (:keywords ""))])(web . [(20150101 401)  nil  "useful HTTP client * lexicalbinding: t *" single ((url: ."https://github.com/nicferrier/emacs-web") (:keywords  " lisp" " http" " hypermedia"))])(weather-metno . [(20150901 907)  nil  "Weather data from met.no in Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/ruediger/weather-metno-el") (:keywords  " comm"))])(wcheck-mode . [(20160209 336)  nil  "General interface for text checkers" tar ((url: ."https://github.com/tlikonen/wcheck-mode") (:keywords  " text spell check languages ispell"))])(wc-mode . [(20131122 26)  nil  "Running word count with goals (minor mode)" single ((url: ."https://github.com/bnbeckwith/wc-mode") (:keywords ""))])(wc-goal-mode . [(20140829 2159)  nil  "Running word count with goals (minor mode)" single ((url: ."https://github.com/bnbeckwith/wc-goal-mode") (:keywords ""))])(wavefront-obj-mode . [(20150502 217)  nil  "Major mode for Wavefront obj files" single ((url: ."https://github.com/abend/wavefront-obj-mode") (:keywords ""))])(watch-buffer . [(20120830 1656)  nil  "run a sl command when saving a buffer" single ((url: ."https://github.com/mjsteger/watch-buffer") (:keywords  " automation" " convenience"))])(warm-night-theme . [(20151119 56) ((emacs (24)) ) "Emacs 24 theme with a dark background." single ((url: ."https://github.com/mswift42/warm-night-theme") (:keywords ""))])(wandbox . [(20160419 214) ((s (1 10 0)) (emacs (24)) (request (0 2 0)) ) "Wandbox API Library for Emacs" tar ((url: ."https://github.com/kosh04/emacs-wandbox") (:keywords  " c" " programming" " tools"))])(wand . [(20141105 847) ((dash (2 5 0)) ) "Magic  for Emacs  ecting and executing" tar ((url: ."https://github.com/cmpitg/wand") (:keywords  " extensions" " tools"))])(wakatime-mode . [(20160417 1609)  nil  "Automatic time tracking extension for WakaTime" tar ((url: ."https://github.com/wakatime/wakatime-mode") (:keywords  " calendar" " comm"))])(waher-theme . [(20141115 2030) ((emacs (24 1)) ) "Url: https://github.com/jasonm23/emacs" single ((url: ."https://github.com/emacsfodder/emacs-waher-theme") (:keywords ""))])(wacspace . [(20150716 2325) ((dash (1 2 0)) (emacs (24)) ) "The WACky WorkSPACE manager for emACS * lexicalbinding: t *" tar ((url: ."https://github.com/shosti/wacspace.el") (:keywords  " workspace"))])(w3m . [(20130228 336)  nil  "an Emacs interface to  * coding: iso20227bit *" tar ((url: ."https://github.com/emacsorphanage/w3m") (:keywords  " w3m" " WWW" " hypermedia"))])(vue-mode . [(20160412 1154) ((mmm-mode (0 5 4)) ) "Major mode for vue component based on webmode and mmmmode  * lexicalbinding: t *" single ((url: ."https://github.com/CodeFalling/vue-mode") (:keywords  " languages"))])(volume . [(20150719 409)  nil  "tweak your sound card  from Emacs" single ((url: ."https://github.com/dbrock/volume-el") (:keywords ""))])(volatile-highlights . [(20160221 1812)  nil  "Minor mode for visual feedback on some operations." single ((url: ."https://github.com/k-talo/volatile-highlights.el") (:keywords  " emulations convenience wp"))])(voca-builder . [(20150718 1712) ((popup (0 5 2)) ) "*   ps you build up your vocabulary" single ((url: ."https://github.com/yitang/voca-builder") (:keywords  " English vocabulary "))])(vlf . [(20150101 2318)  nil  "View Large Files  * lexicalbinding: t *" tar ((url: ."https://github.com/m00natic/vlfi") (:keywords  " large files" " utilities"))])(vkill . [(20091204 222)  nil  "view and kill Unix processes from within Emacs" single ((url: ."https://github.com/emacsmirror/vkill") (:keywords ""))])(visual-regexp-steroids . [(20160517 338) ((visual-regexp (1 0)) ) "Extends visualregexp to support other regexp engines" tar ((url: ."https://github.com/benma/visual-regexp-steroids.el") (:keywords  " external" " foreign" " regexp" " replace" " python" " visual" " feedback"))])(visual-regexp . [(20160517 358) ((cl-lib (0 2)) ) "A regexp/replace command for Emacs with interactive visual feedback" single ((url: ."https://github.com/benma/visual-regexp.el") (:keywords  " regexp" " replace" " visual" " feedback"))])(visual-fill-column . [(20160411 2020) ((emacs (24 3)) ) "fillcolumn for visuallinemode  * lexicalbinding: t *" single ((url: ."https://github.com/joostkremers/visual-fill-column") (:keywords ""))])(visual-ascii-mode . [(20150129 1846)  nil  "Visualize ascii code (small integer) on buffer." single ((url: ."https://github.com/Dewdrops/visual-ascii-mode") (:keywords  " presentation"))])(virtualenvwrapper . [(20160310 2252) ((dash (1 5 0)) (s (1 6 1)) ) "Copyright (C) 2013  2015 James J Porter and [contributors](https://github.com/porterjamesj//graphs/contributors)" single ((url: ."https://github.com/porterjamesj/virtualenvwrapper.el") (:keywords  " python" " virtualenv" " virtualenvwrapper"))])(virtualenv . [(20140221 701)  nil  "Virtualenv for Python" single ((url: ."https://github.com/aculich/virtualenv.el") (:keywords  " python virtualenv"))])(vimrc-mode . [(20150608 13)  nil  "Major mode for vimrc files" single ((url: ."https://github.com/mcandre/vimrc-mode") (:keywords  " languages" " vim"))])(vimish-fold . [(20160514 1955) ((f (0 18 0)) (emacs (24 4)) (cl-lib (0 5)) ) "Fold text like in Vim * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/vimish-fold") (:keywords  " convenience"))])(vim-region . [(20140330 24) ((expand-region (20140127)) ) "ect region as vim" single ((url: ."https://github.com/ongaeshi/emacs-vim-region") (:keywords ""))])(vim-empty-lines-mode . [(20160220 349) ((emacs (23)) ) "Vimlike empty line indicator at end of files." single ((url: ."https://github.com/jmickelin/vim-empty-lines-mode") (:keywords  " emulations"))])(viewer . [(20141022 236)  nil  "$Id: ,v 1.13 2013/03/14 23:37:05 rubikitch Exp $" single ((url: ."https://github.com/rubikitch/viewer") (:keywords  " view" " extensions"))])(vi-tilde-fringe . [(20141230 1055) ((emacs (24)) ) "Displays tildes in the fringe on empty lines a la Vi." single ((url: ."https://github.com/syl20bnr/vi-tilde-fringe") (:keywords  " emulation"))])(vhdl-tools . [(20160502 111) ((ggtags (0 8 11)) (outshine (2 0)) (emacs (24 3)) (helm (1 9 2)) (projectile (0 13 0)) ) "Utilities for navigating vhdl sources. * lexicalbinding: t *" single ((url: ."https://github.com/csantosb/vhdl-tools") (:keywords  " convenience"))])(vhdl-capf . [(20160222 134)  nil  "Completion at point function (capf) for vhdlmode." single ((url: ."https://github.com/sh-ow/vhdl-capf") (:keywords  " convenience" " usability" " vhdl" " completion"))])(vertigo . [(20160430 1205) ((dash (2 11 0)) ) "Jump across lines using the home row." single ((url: ."https://github.com/noctuid/vertigo.el") (:keywords  " vim" " vertigo"))])(vertica . [(20131217 2311) ((sql (3 0)) ) "Vertica SQL mode extension" single ((url: ."https://github.com/r0man/vertica-el") (:keywords  " sql vertica"))])(verify-url . [(20160426 2028) ((cl-lib (0 5)) ) "find out invalid urls in the buffer or region" single ((url: ."https://github.com/lujun9972/verify-url") (:keywords  " convenience" " usability" " url"))])(vector-utils . [(20140805 322)  nil  "Vectormanipulation utility functions" single ((url: ."https://github.com/rolandwalker/vector-utils") (:keywords  " extensions"))])(vdirel . [(20160127 2045) ((emacs (24 4)) (seq (1 11)) (helm (1 7 0)) (org-vcard (0 1 0)) ) "Manipulate vdir (i.e., vCard) repositories" tar ((url: ."https://github.com/DamienCassou/vdirel") (:keywords  " vdirsyncer vdir vCard carddav contact addressbook helm"))])(vcomp . [(20140907 608)  nil  "compare version strings" single ((url: ."https://github.com/tarsius/vcomp") (:keywords  " versions"))])(vcl-mode . [(20151214 323)  nil  "Syntax highlighting for Varnish Command Language" single ((url: ."https://github.com/ssm/vcl-mode") (:keywords ""))])(vc-osc . [(20131220 1914)  nil  "nonresident support for osc versioncontrol" single ((url: ."https://github.com/aspiers/vc-osc") (:keywords ""))])(vc-darcs . [(20151226 436)  nil  "a VC backend for darcs    * lexicalbinding: t *" single ((url: ."https://github.com/velkyel/vc-darcs") (:keywords  " vc"))])(vc-check-status . [(20160108 1816)  nil  "Warn you when quitting emacs and leaving repo dirty." tar ((url: ."https://github.com/thisirs/vc-check-status") (:keywords  " vc" " convenience"))])(vc-auto-commit . [(20160108 1815)  nil  "Autocommitting feature for your repository" tar ((url: ."https://github.com/thisirs/vc-auto-commit") (:keywords  " vc" " convenience"))])(vbasense . [(20140222 753) ((log4e (0 2 0)) (auto-complete (1 4 0)) (yaxception (0 1)) ) "provide a environment like Visual Basic Editor." tar ((url: ."https://github.com/aki2o/emacs-vbasense") (:keywords  " vba" " completion"))])(vala-snippets . [(20150429 1152) ((yasnippet (0 8 0)) ) "Yasnippets for Vala" single ((url: ."https://github.com/gopar/vala-snippets") (:keywords ""))])(vala-mode . [(20150325 625)  nil  "Vala mode derived mode" single ((url: ."https://github.com/emacsorphanage/vala-mode") (:keywords  "   vala languages oop"))])(vagrant-tramp . [(20160428 732) ((dash (2 12 0)) ) "Vagrant method for TRAMP" tar ((url: ."https://github.com/dougm/vagrant-tramp") (:keywords  " vagrant"))])(vagrant . [(20160505 1630)  nil  "Manage a  box from emacs" single ((url: ."https://github.com/ottbot/vagrant.el") (:keywords  " vagrant chef"))])(uzumaki . [(20150120 906) ((cl-lib (0 5)) ) "A simple buffer cycler" single ((url: ."https://github.com/geyslan/uzumaki") (:keywords  " buffer" " convenience"))])(uuidgen . [(20140919 701)  nil  "Provides various UUID generating functions" single ((url: ."https://github.com/kanru/uuidgen-el") (:keywords  " extensions" " lisp" " tools"))])(uuid . [(20120910 1651)  nil  "UUID's for EmacsLisp" single ((url: ."https://github.com/nicferrier/emacs-uuid") (:keywords  " lisp"))])(use-package-chords . [(20160408 7) ((bind-key (1 0)) (use-package (2 0)) (bind-chord (0 1)) ) "keychord keyword for usepackage" single ((url: ."https://github.com/waymondo/use-package-chords") (:keywords  " convenience" " tools" " extensions"))])(use-package . [(20160404 229) ((bind-key (1 0)) (diminish (0 44)) ) "A  declaration for simplifying your .emacs" single ((url: ."https://github.com/jwiegley/use-package") (:keywords  " dotemacs startup speed config package"))])(urlenc . [(20140116 2256)  nil  "URL encoding/decoding utility for Emacs." single ((url: ."https://github.com/buzztaiki/urlenc-el") (:keywords  " url"))])(url-shortener . [(20160405 1059)  nil  "shorten long url and expand tinyurl" single ((url: ."https://github.com/yuyang0/url-shortener") (:keywords ""))])(unkillable-scratch . [(20160505 1003)  nil  "Disallow buffers from being killed by regexp  default is *scratch* buffer" single ((url: ."https://github.com/EricCrosson/unkillable-scratch") (:keywords  " scratch"))])(unison-mode . [(20160513 2301)  nil  "Syntax highlighting for unison file synchronization program" single ((url: ."https://github.com/impaktor/unison-mode") (:keywords  " symchronization" " unison"))])(unipoint . [(20140114 624)  nil  "a simple way to insert unicode characters by TeX name" single ((url: ."https://github.com/apg/unipoint") (:keywords ""))])(unify-opening . [(20151117 848) ((emacs (24 4)) ) "Make everything use the same mechanism to open files" tar ((url: ."https://github.com/DamienCassou/unify-opening") (:keywords  " dired org mu4e open runner extension file"))])(unidecode . [(20140318 1218) ((cl-lib (0 4)) ) "Convert Unicode text into safe ASCII strings" tar ((url: ."https://github.com/sindikat/unidecode") (:keywords ""))])(unicode-whitespace . [(20140805 322) ((pcache (0 2 3)) (list-utils (0 4 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) ) "teach whitespacemode about fancy characters" single ((url: ."https://github.com/rolandwalker/unicode-whitespace") (:keywords  " faces" " wp" " interface"))])(unicode-troll-stopper . [(20151215 1348)  nil  "Minor mode for Highlighting Unicode homoglyphs * coding: utf8 *" single ((url: ."https://github.com/camsaul/emacs-unicode-troll-stopper") (:keywords  " unicode"))])(unicode-progress-reporter . [(20140805 322) ((pcache (0 2 3)) (list-utils (0 4 2)) (emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) ) "Progressreporter with fancy characters" single ((url: ."https://github.com/rolandwalker/unicode-progress-reporter") (:keywords  " interface"))])(unicode-fonts . [(20150827 632) ((pcache (0 3 1)) (list-utils (0 4 2)) (ucs-utils (0 8 2)) (persistent-soft (0 8 10)) (font-utils (0 7 8)) ) "Configure Unicode fonts" single ((url: ."https://github.com/rolandwalker/unicode-fonts") (:keywords  " i18n" " faces" " frames" " wp" " interface"))])(unicode-enbox . [(20140805 322) ((pcache (0 2 3)) (list-utils (0 4 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (string-utils (0 3 2)) ) "Surround a string with boxdrawing characters" single ((url: ."https://github.com/rolandwalker/unicode-enbox") (:keywords  " extensions" " interface"))])(unicode-emoticons . [(20150207 1441)  nil  "Shortcuts for common unicode emoticons" single ((url: ."https://github.com/hagleitn/unicode-emoticons") (:keywords  " games" " entertainment" " comms"))])(unfill . [(20150204 2217)  nil  "The inverse of fillparagraph and fillregion" tar ((url: ."https://github.com/purcell/unfill") (:keywords  " utilities"))])(undohist . [(20150315 2042) ((cl-lib (1 0)) ) "Persistent undo history for GNU Emacs" single ((url: ."https://github.com/m2ym/undohist-el") (:keywords  " convenience"))])(underwater-theme . [(20151123 2343)  nil  "A gentle, deep blue color theme" single ((url: ."https://github.com/jmdeldin/underwater-theme.el") (:keywords  " faces"))])(undercover . [(20160405 1448) ((dash (2 0 0)) (shut-up (0 3 2)) (emacs (24)) ) "Test coverage library for Emacs * lexicalbinding: t *" single ((url: ."https://github.com/sviridov/undercover.el") (:keywords  " lisp" " tests" " coverage" " tools"))])(uncrustify-mode . [(20140912 1700)  nil  "Minor mode to automatically uncrustify." single ((url: ."https://github.com/koko1000ban/emacs-uncrustify-mode") (:keywords  " uncrustify"))])(ukrainian-holidays . [(20130720 2149)  nil  "Ukrainian holidays for Emacs calendar." single ((url: ."https://github.com/abo-abo/ukrainian-holidays") (:keywords ""))])(ujelly-theme . [(20160519 139)  nil  "Uly theme for GNU Emacs 24 (deftheme)" single ((url: ."https://github.com/marktran/color-theme-ujelly") (:keywords ""))])(uimage . [(20160426 2026)  nil  "An iimage like mode with the ability to display url images" single ((url: ."https://github.com/lujun9972/uimage") (:keywords  " lisp" " url" " image"))])(ucs-utils . [(20150826 2214) ((pcache (0 2 3)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) ) "Utilities for Unicode characters" tar ((url: ."https://github.com/rolandwalker/ucs-utils") (:keywords  " i18n" " extensions"))])(ubuntu-theme . [(20150805 2306)  nil  "A theme inspired by the default terminal colors in Ubuntu" single ((url: ."https://github.com/rocher/ubuntu-theme") (:keywords ""))])(typo . [(20160121 1930)  nil  "Minor mode for graphic editing" single ((url: ."https://github.com/jorgenschaefer/typoel") (:keywords  " convenience" " wp"))])(typit . [(20160511 58) ((f (0 18)) (emacs (24 4)) (mmt (0 1 1)) ) "Typing game similar to tests on 10 fast fingers * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/typit") (:keywords  " games"))])(typing-game . [(20160426 2020)  nil  "a simple typing game" single ((url: ."https://github.com/lujun9972/el-typing-game") (:keywords  " lisp" " game"))])(typescript-mode . [(20160126 2008)  nil  "Major mode for editing typescript" single ((url: ."https://github.com/ananthakumaran/typescript.el") (:keywords  " typescript languages"))])(typed-clojure-mode . [(20151004 222) ((clojure-mode (2 1 1)) ) "Typed Clojure minor mode for Emacs" tar ((url: ."https://github.com/typedclojure/typed-clojure-mode") (:keywords ""))])(twittering-mode . [(20160314 36)  nil  "Major mode for Twitter" tar ((url: ."https://github.com/hayamiz/twittering-mode") (:keywords  " twitter web"))])(twilight-theme . [(20120412 2103)  nil  "Twilight theme for GNU Emacs 24 (deftheme)" single ((url: ."https://github.com/developernotes/twilight-theme") (:keywords ""))])(twilight-bright-theme . [(20151121 1804)  nil  "A Emacs 24 faces port of the TextMate theme" single ((url: ."https://github.com/jimeh/twilight-bright-theme.el") (:keywords  " themes"))])(twilight-anti-bright-theme . [(20140810 2047)  nil  "A soothing Emacs 24 lightondark theme" single ((url: ."https://github.com/jimeh/twilight-anti-bright-theme") (:keywords  " themes"))])(twig-mode . [(20130221 256)  nil  "A major mode for twig" single ((url: ."https://github.com/moljac024/twig-mode") (:keywords ""))])(turnip . [(20150309 1429) ((dash (2 6 0)) (s (1 9 0)) ) "Interacting with tmux from Emacs" single ((url: ."https://github.com/kljohann/turnip.el") (:keywords  " terminals" " tools"))])(turkish . [(20160324 1823)  nil  "Convert to Turkish characters onthefly" single ((url: ."https://github.com/emres/turkish-mode") (:keywords  " turkish" " languages" " automatic" " conversion"))])(tup-mode . [(20150421 1027)  nil  "Major mode for editing files for Tup" single ((url: ."https://github.com/ejmr/tup-mode") (:keywords ""))])(tumblesocks . [(20140303 639)  nil  "An Emacs tumblr client." tar ((url: ."https://github.com/gcr/tumblesocks") (:keywords ""))])(tumble . [(20160112 1529) ((http-post-simple (0)) (cl-lib (0 5)) ) "an Tumblr mode for Emacs" single ((url: ."https://github.com/febuiles/tumble") (:keywords  " tumblr"))])(tuareg . [(20160409 231) ((caml (3 12 0 1)) ) "OCaml mode for Emacs.  * coding: utf8 *" tar ((url: ."https://github.com/ocaml/tuareg") (:keywords  " ocaml languages"))])(ttrss . [(20130411 1946) ((emacs (23 1)) ) "Tiny Tiny RSSisp bindings" single ((url: ."https://github.com/pedros/ttrss.el") (:keywords  " news" " local"))])(tt-mode . [(20130804 1910)  nil  "Emacs major mode for editing Template Toolkit files." single ((url: ."https://github.com/davorg/tt-mode") (:keywords ""))])(tss . [(20150913 2208) ((log4e (0 2 0)) (auto-complete (1 4 0)) (yaxception (0 1)) (json-mode (1 1 0)) ) "provide a interface for autocomplete/flymake on typescriptmode." tar ((url: ."https://github.com/aki2o/emacs-tss") (:keywords  " typescript" " completion"))])(try . [(20160226 2333) ((emacs (24)) ) "Try out Emacs packages. * lexicalbinding: t *" single ((url: ."https://github.com/larstvei/Try") (:keywords  " packages"))])(truthy . [(20140805 322) ((list-utils (0 4 2)) ) "Test the content of a value" single ((url: ."https://github.com/rolandwalker/truthy") (:keywords  " extensions"))])(trident-mode . [(20130727 307) ((skewer-mode (1 5 0)) (dash (1 0 3)) (slime (20130526)) (emacs (24)) ) "Live Parenscript interaction * lexicalbinding: t *" single ((url: ."https://github.com/johnmastro/trident-mode.el") (:keywords  " languages" " lisp" " processes" " tools"))])(travis . [(20150825 1938) ((dash (2 9 0)) (s (1 9 0)) (pkg-info (0 5 0)) (request (0 1 0)) ) "Emacs client for Travis" tar ((url: ."https://github.com/nlamirault/emacs-travis") (:keywords  " travis"))])(transpose-mark . [(20150405 1516)  nil  "Transpose data using the Emacs mark" single ((url: ."https://github.com/kwrooijen/transpose-mark") (:keywords  " transpose" " convenience"))])(transmission . [(20160517 2215) ((emacs (24 4)) (let-alist (1 0 3)) ) "Interface to a Transmission session * lexicalbinding: t *" single ((url: ."https://github.com/holomorph/transmission") (:keywords  " comm" " tools"))])(tramp-term . [(20141105 545)  nil  "Automatic setup of directory tracking in ssh sessions." single ((url: ."https://github.com/randymorris/tramp-term.el") (:keywords  " tramp" " ssh"))])(tramp-hdfs . [(20160227 2318)  nil  "Tramp extension to access hadoop/hdfs file system in Emacs" tar ((url: ."https://github.com/raghavgautam/tramp-hdfs") (:keywords  " tramp" " emacs" " hdfs" " hadoop" " webhdfs" " rest"))])(tracwiki-mode . [(20150120 21) ((xml-rpc (1 6 8)) ) "Emacs Major mode for working with Trac" single ((url: ."https://github.com/merickson/tracwiki-mode") (:keywords  " Trac" " wiki" " tickets"))])(tracking . [(20160517 1950)  nil  "Buffer modification" tar ((url: ."https://github.com/jorgenschaefer/circe") (:keywords ""))])(traad . [(20160104 1553) ((python-environment (0 0 2)) (request-deferred (0 2 0)) (popup (0 5 0)) (request (0 2 0)) (deferred (0 3 2)) ) "emacs interface to the  refactoring server." single ((url: ."https://github.com/abingham/emacs-traad") (:keywords ""))])(tox . [(20141005 504)  nil  "Launch current python test with" single ((url: ."https://github.com/chmouel/tox.el") (:keywords  " convenience" " tox" " python" " tests"))])(tornado-template-mode . [(20141128 1808)  nil  "A major mode for editing tornado templates" single ((url: ."https://github.com/paradoxxxzero/tornado-template-mode") (:keywords ""))])(tommyh-theme . [(20131005 730)  nil  "A bright, boldcolored theme for emacs" single ((url: ."https://github.com/wglass/tommyh-theme") (:keywords ""))])(toml-mode . [(20150818 1620)  nil  "Mojor mode for editing TOML files" single ((url: ."https://github.com/dryman/toml-mode.el") (:keywords  " data toml"))])(toml . [(20130903 2055)  nil  "TOML (Tom's Obvious, Minimal Language) parser" single ((url: ."https://github.com/gongo/emacs-toml") (:keywords  " toml parser"))])(tomatinho . [(20140121 740)  nil  "Tomatinho" tar ((url: ."https://github.com/konr/tomatinho") (:keywords  " time" " productivity" " pomodoro technique"))])(toggle-window . [(20141207 2348)  nil  "toggle current window size between half and full" single ((url: ."https://github.com/deadghost/toggle-window") (:keywords  " hide window"))])(toggle-test . [(20151121 251)  nil  "Toggle between source and test files in various programming languages" single ((url: ."https://github.com/rags/toggle-test") (:keywords  " tdd test toggle productivity"))])(toggle-quotes . [(20140710 1726)  nil  "Toggle between single and double quoted string" single ((url: ."https://github.com/toctan/toggle-quotes.el") (:keywords  " convenience" " quotes"))])(toggle . [(20160331 1600) ((cl-lib (0 5)) ) "quickly open corresponding file (eg test vs impl)." single ((url: ."https://github.com/zenspider/elisp") (:keywords  " files" " extensions" " convenience"))])(togetherly . [(20150820 1638) ((cl-lib (0 3)) ) "allow multiple clients to edit a single buffer online" single ((url: ."https://github.com/zk-phi/togetherly") (:keywords ""))])(todotxt-mode . [(20150424 2204)  nil  "Major mode for editing todo.txt files" single ((url: ."https://github.com/avillafiorita/todotxt-mode") (:keywords  " wp" " files"))])(todotxt . [(20150514 1029)  nil  "Filename:" single ((url: ."https://github.com/rpdillon/todotxt.el") (:keywords  " todo.txt" " todotxt" " todotxt.el"))])(toc-org . [(20160422 2105)  nil  "add table of contents to orgmode files (formerly, orgtoc)" single ((url: ."https://github.com/snosov1/toc-org") (:keywords  " org-mode org-toc toc-org org toc table of contents"))])(tmmofl . [(20121025 1901)  nil  "Calls functions dependant on font lock highlighting at point" single ((url: ."https://github.com/phillord/tmmofl") (:keywords  " minor mode" " font lock" " toggling."))])(tle . [(20160420 1722) ((dash (1 5 0)) ) "Tabulated List Extensions" single ((url: ."https://github.com/Silex/tabulated-list-extensions") (:keywords  " tabulated-list" " extension"))])(tldr . [(20160312 2208) ((emacs (24 3)) ) "client for Emacs                * lexicalbinding: t *" single ((url: ."https://github.com/kuanyui/tldr.el") (:keywords  " tools" " docs"))])(tj-mode . [(20160212 1750) ((tern (0 0 1)) (emacs (24)) (js2-mode (20150514)) ) "Highlight JavaScript with Tern * lexicalbinding: t *" single ((url: ."https://github.com/katspaugh/tj-mode") (:keywords  " languages" " javascript"))])(tinysegmenter . [(20141124 1813) ((cl-lib (0 5)) ) "Filename:" single ((url: ."https://github.com/myuhe/tinysegmenter.el") (:keywords  " convenience" " "))])(tiny . [(20151208 1805)  nil  "Quickly generate linear ranges in Emacs" tar ((url: ."https://github.com/abo-abo/tiny") (:keywords  " convenience"))])(tinkerer . [(20150220 1454) ((s (1 2 0)) ) "Elisp wrapper for Tinkerer Blogging Engine." single ((url: ."https://github.com/yyr/tinkerer.el") (:keywords  " Tinkerer" " blog" " wrapper"))])(timp . [(20160514 1943) ((emacs (24 4)) (fifo-class (1 0)) (signal (1 0)) (cl-lib (0 5)) ) "Multithreading library  * lexicalbinding: t *" tar ((url: ."https://github.com/mola-T/timp") (:keywords  " internal" " lisp" " processes" " tools"))])(timesheet . [(20151107 2204) ((s (1)) (auctex (11)) (org (7)) ) "Timesheet management addon for orgmode" tar ((url: ."https://github.com/tmarble/timesheet.el") (:keywords  " org timesheet"))])(timer-revert . [(20150123 432)  nil  "minor mode to revert buffer for a given time interval." tar ((url: ."https://github.com/yyr/timer-revert") (:keywords  " timer" " revert" " auto-revert."))])(time-ext . [(20100516 840)  nil  "more function for time/date" single ((url: ."https://github.com/rubikitch/time-ext") (:keywords  " lisp"))])(tide . [(20160511 1442) ((dash (2 10 0)) (emacs (24 1)) (typescript-mode (0 1)) (flycheck (27)) ) "Typescript Interactive Deopment Environment * lexicalbinding: t *" tar ((url: ."https://github.com/ananthakumaran/tide") (:keywords  " typescript"))])(thumb-through . [(20120119 1334)  nil  "Plain text reader of HTML documents" single ((url: ."https://github.com/apg/thumb-through") (:keywords  " html"))])(thread-dump . [(20130403 140)  nil  "Java thread dump viewer" tar ((url: ."https://github.com/nd/thread-dump.el") (:keywords ""))])(thingopt . [(20150315 2023)  nil  "Thing at Point optional utilities" single ((url: ."https://github.com/m2ym/thingopt-el") (:keywords  " convenience"))])(therapy . [(20151114 353) ((emacs (24)) ) "Hooks for managing multiple Python major versions" single ((url: ."https://github.com/abingham/therapy") (:keywords ""))])(theme-looper . [(20150724 204) ((cl-lib (0 5)) ) "Loop thru the available colorthemes" tar ((url: ."https://github.com/myTerminal/theme-looper") (:keywords  " convenience" " color-themes"))])(theme-changer . [(20130726 1019)  nil  "Sunrise/Sunset Theme Changer for Emacs" single ((url: ."https://github.com/hadronzoo/theme-changer") (:keywords  " color-theme" " deftheme" " solar" " sunrise" " sunset"))])(textmate-to-yas . [(20160410 108)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/textmate-to-yas.el") (:keywords  " Yasnippet Textmate"))])(textmate . [(20110817 546)  nil  "TextMate minor mode for Emacs" single ((url: ."https://github.com/defunkt/textmate.el") (:keywords  " textmate osx mac"))])(textile-mode . [(20151203 1653)  nil  "Textile markup editing major mode" single ((url: ."https://github.com/juba/textile-mode") (:keywords ""))])(test-simple . [(20160303 1636) ((cl-lib (0)) ) "Simple Unit Test Framework for Emacs Lisp * lexicalbinding: t *" single ((url: ."https://github.com/rocky/emacs-test-simple") (:keywords  " unit-test"))])(test-kitchen . [(20160517 448)  nil  "Run  inside of emacs" single ((url: ."https://github.com/jjasghar/test-kitchen-el") (:keywords  " chef ruby test-kitchen"))])(test-case-mode . [(20140924 48) ((fringe-helper (0 1 1)) ) "unit test frontend" tar ((url: ."https://github.com/ieure/test-case-mode") (:keywords  " tools"))])(terraform-mode . [(20160503 817) ((hcl-mode (0 2)) (cl-lib (0 5)) ) "Major mode for terraform configuration file" single ((url: ."https://github.com/syohex/emacs-terraform-mode") (:keywords ""))])(tern-django . [(20160308 1958) ((f (0 17 1)) (tern (0 0 1)) (emacs (24)) ) "Create tern projects for django applications." tar ((url: ."https://github.com/proofit404/tern-django") (:keywords ""))])(termbright-theme . [(20151031 1035) ((emacs (24 1)) ) "a more usable theme for whiteonblack terminals" single ((url: ."https://github.com/bmastenbrook/termbright-theme-el") (:keywords  " themes"))])(term-run . [(20151228 1705)  nil  "Run arbitrary command in terminal buffer" single ((url: ."https://github.com/10sr/term-run-el") (:keywords  " utility shell command term-mode"))])(term-cmd . [(20160507 12) ((f (0 0)) (dash (0 0)) (emacs (24 0)) ) "Send commands from programs running in term. * lexicalbinding: t *" tar ((url: ."https://github.com/CallumCameron/term-cmd") (:keywords  " processes"))])(term-alert . [(20160507 1459) ((f (0 0)) (emacs (24 0)) (alert (1 1)) (term-cmd (1 1)) ) "Notifications when commands complete in term. * lexicalbinding: t *" tar ((url: ."https://github.com/CallumCameron/term-alert") (:keywords  " notifications processes"))])(term+mux . [(20140211 1549) ((term+ (0 1)) (tab-group (0 1)) ) "term+mux  term+ terminal multiplexer and session management" single ((url: ."https://github.com/tarao/term-plus-mux-el") (:keywords  " terminal" " emulation"))])(term+key-intercept . [(20140211 1550) ((key-intercept (0 1)) (term+ (0 1)) ) "term+keyintercept  term+ intercept key mapping" single ((url: ."https://github.com/tarao/term-plus-ki-el") (:keywords  " terminal" " emulation"))])(term+ . [(20160404 1855)  nil  "+  mode enhancement" tar ((url: ."https://github.com/tarao/term-plus-el") (:keywords  " terminal" " emulation"))])(ten-hundred-mode . [(20160409 2051) ((cl-lib (0 5)) ) "use only the ten hundred most usual words" single ((url: ."https://github.com/aaron-em/ten-hundred-mode.el") (:keywords ""))])(telephone-line . [(20160303 715) ((emacs (24 4)) (cl-generic (0 2)) (seq (1 8)) (cl-lib (0 5)) ) "Rewrite of Powerline * lexicalbinding: t *" tar ((url: ."https://github.com/dbordak/telephone-line") (:keywords  " mode-line"))])(telepathy . [(20131209 2058)  nil  "Access epathy from Emacs" single ((url: ."https://github.com/NicolasPetton/telepathy.el") (:keywords  " telepathy tools"))])(tea-time . [(20120331 1620)  nil  "Simple timer package, useful to make perfect tea." single ((url: ."https://github.com/konzeptual/tea-time") (:keywords  " timer tea-time"))])(tdd-status-mode-line . [(20151224 1813)  nil  "TDD status on the modeline" single ((url: ."https://github.com/algernon/tdd-status-mode-line") (:keywords  " faces tdd"))])(tco . [(20150115 444) ((dash (1 2 0)) (emacs (24)) ) "tailcall optimisation for Emacs lisp * lexicalbinding: t *" single ((url: ."https://github.com/Wilfred/tco.el") (:keywords ""))])(tc . [(20150114 1126)  nil  "a Japanese input method with TCode on Emacs" tar ((url: ."https://github.com/kozo2/tc") (:keywords ""))])(tbx2org . [(20140224 2359) ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4)) ) "Tinderbox to orgmode conversion" single ((url: ."https://github.com/istib/tbx2org") (:keywords  " org-mode"))])(tawny-mode . [(20160519 524)  nil  " " single ((url: ."https://github.com/phillord/tawny-owl") (:keywords ""))])(tangotango-theme . [(20160212 1605)  nil  "Tango Palette color theme for Emacs 24." single ((url: ."https://github.com/juba/color-theme-tangotango") (:keywords  " tango palette color theme emacs"))])(tango-plus-theme . [(20140426 611)  nil  "A color theme based on the tango palette" single ((url: ."https://github.com/tmalsburg/tango-plus-theme") (:keywords ""))])(take-off . [(20140531 1717) ((web-server (0 1 0)) (emacs (24 3)) ) "Emacs remote web access" tar ((url: ."https://github.com/tburette/take-off") (:keywords ""))])(tagedit . [(20160516 2256) ((dash (1 0 3)) (s (1 3 1)) ) "Some pareditlike features for htmlmode" single ((url: ."https://github.com/magnars/tagedit") (:keywords  " convenience"))])(tabula-rasa . [(20141216 1347) ((emacs (24 4)) ) "Distraction free writing mode" single ((url: ."https://github.com/idomagal/Tabula-Rasa") (:keywords  " distraction free" " writing"))])(tablist . [(20160424 1735) ((emacs (24 3)) ) "Extended tabulatedlistmode * lexicalbinding: t *" tar ((url: ."https://github.com/politza/tablist") (:keywords  " extensions" " lisp"))])(tabbar-ruler . [(20160518 925) ((powerline (2 3)) (tabbar (2 0 1)) (cl-lib (0 5)) (mode-icons (0 4 0)) ) "Filename:" single ((url: ."https://github.com/mattfidler/tabbar-ruler.el") (:keywords  " Tabbar" " Ruler Mode" " Menu" " Tool Bar."))])(tabbar . [(20141109 1743)  nil  "Display a tab bar in the header line" tar ((url: ."https://github.com/dholm/tabbar") (:keywords  " convenience"))])(tab-jump-out . [(20151006 930) ((dash (2 10)) (emacs (24 4)) ) "Use tab to jump out of imiter pairs." single ((url: ."https://github.com/cheunghy/tab-jump-out") (:keywords  " tab" " editing"))])(tab-group . [(20140306 2250)  nil  "Grouped tabs and their tabbar" single ((url: ."https://github.com/tarao/tab-group-el") (:keywords  " convenience" " tabs"))])(ta . [(20150608 1456) ((emacs (24 3)) (cl-lib (0 5)) ) "A tool to deal with Chinese homophonic characters  * lexicalbinding: t *" single ((url: ."https://github.com/kuanyui/ta.el") (:keywords  " tools"))])(systemtap-mode . [(20151123 340)  nil  "A mode for SystemTap" single ((url: ."https://github.com/ruediger/systemtap-mode") (:keywords  "   tools languages"))])(systemd . [(20160514 2215) ((emacs (24 4)) ) "Major mode for editing  units * lexicalbinding: t *" single ((url: ."https://github.com/holomorph/systemd-mode") (:keywords  " tools" " unix"))])(system-specific-settings . [(20140818 2257)  nil  "Filename:" single ((url: ."https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords  " configuration"))])(syslog-mode . [(20140218 818) ((hide-lines (20130623)) ) "Filename:" single ((url: ."https://github.com/vapniks/syslog-mode") (:keywords  " unix"))])(syntactic-sugar . [(20140805 322)  nil  "Effectfree forms such as if/thense" single ((url: ."https://github.com/rolandwalker/syntactic-sugar") (:keywords  " extensions"))])(synosaurus . [(20151120 249)  nil  "An Emacs frontend for thesauri" tar ((url: ."https://github.com/hpdeifel/synosaurus") (:keywords  " wp"))])(synonymous . [(20150909 2334) ((emacs (24)) (request (0 2 0)) (cl-lib (0 5)) ) "A thesaurus at your fingertips * lexicalbinding: t *" single ((url: ."https://github.com/toroidal-code/synonymous.el") (:keywords  " Utility"))])(syndicate . [(20160511 858) ((evil (1 0)) ) "evil keybindings for orgmode" single ((url: ."https://github.com/KNX32542/syndicate") (:keywords  " evil org bindings"))])(sync-recentf . [(20160327 401)  nil  "Synchronize the recent files list between Emacs instances" single ((url: ."https://github.com/ffevotte/sync-recentf") (:keywords  " recentf"))])(symon-lingr . [(20150719 2142) ((symon (1 1 2)) (cl-lib (0 5)) ) "A notificationbased Lingr client powered by symon" single ((url: ."https://github.com/zk-phi/symon-lingr") (:keywords ""))])(symon . [(20160515 1004)  nil  "tiny graphical system monitor" single ((url: ."https://github.com/zk-phi/symon") (:keywords ""))])(sx . [(20160127 1050) ((json (1 3)) (emacs (24 1)) (markdown-mode (2 0)) (cl-lib (0 5)) (let-alist (1 0 3)) ) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes  * lexicalbinding: t *" tar ((url: ."https://github.com/vermiculus/sx.el") (:keywords  " help" " hypermedia" " tools"))])(sws-mode . [(20151025 53)  nil  "(S)ignificant (W)hite(S)pace mode" single ((url: ."https://github.com/brianc/jade-mode") (:keywords ""))])(swoop . [(20160121 115) ((emacs (24)) (ht (2 0)) (pcre2el (1 5)) (async (1 1)) ) "Peculiar buffer navigation for Emacs * coding: utf8 lexicalbinding: t *" tar ((url: ."https://github.com/ShingoFukuyama/emacs-swoop") (:keywords  " swoop inner buffer search navigation"))])(switch-window . [(20160229 1934) ((cl-lib (0 5)) ) "A *visual* way to choose a window to switch to" single ((url: ."https://github.com/dimitri/switch-window") (:keywords  " window navigation"))])(swiper-helm . [(20151116 1930) ((emacs (24 1)) (helm (1 5 3)) (swiper (0 1 0)) ) "m version of Swiper. * lexicalbinding: t *" single ((url: ."https://github.com/abo-abo/swiper-helm") (:keywords  " matching"))])(swiper . [(20160518 449) ((emacs (24 1)) (ivy (0 8 0)) ) "Isearch with an overview. Oh, man! * lexicalbinding: t *" single ((url: ."https://github.com/abo-abo/swiper") (:keywords  " matching"))])(swift-mode . [(20160124 1836) ((emacs (24 4)) ) "Majormode for Apple's Swift programming language. * lexicalbinding: t *" tar ((url: ."https://github.com/chrisbarrett/swift-mode") (:keywords  " languages swift"))])(sweetgreen . [(20151208 116) ((dash (2 12 1)) (request (0 2 0)) (helm (1 5 6)) (cl-lib (0 5)) ) "Order Salads from .com * lexicalbinding: t *" single ((url: ."https://github.com/CestDiego/sweetgreen.el") (:keywords  " salad" " food" " sweetgreen" " request"))])(swap-regions . [(20160420 2112) ((emacs (24 3)) ) "Swap two regions of text * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/swap-regions.el") (:keywords  " convenience"))])(swap-buffers . [(20150507 539)  nil  "The quickest way to swap buffers between windows. Based on switchwindow package." single ((url: ."https://github.com/ekazakov/swap-buffers") (:keywords  " window swap buffer exchange"))])(svg-mode-line-themes . [(20150426 406) ((xmlgen (0 4)) ) "SVGbased themes for modeline" tar ((url: ."https://github.com/sabof/svg-mode-line-themes") (:keywords ""))])(suscolors-theme . [(20160323 801)  nil  "Colorful theme, inspired by Gruvbox." single ((url: ."https://github.com/TheSuspiciousWombat/suscolors-emacs") (:keywords ""))])(supergenpass . [(20130329 1348)  nil  "SuperGenPass for Emacs" tar ((url: ."https://github.com/ober/sgpass") (:keywords  " SuperGenPass"))])(super-save . [(20160426 2229) ((emacs (24 4)) ) "Autosave buffers, based on your activity. * lexicalbinding: t *" single ((url: ."https://github.com/bbatsov/super-save") (:keywords  " convenience"))])(suomalainen-kalenteri . [(20151129 1904)  nil  "Finnish holidays for Emacs calendar." tar ((url: ."https://github.com/tlikonen/suomalainen-kalenteri") (:keywords  " calendar holidays Finnish"))])(sunshine . [(20160411 417) ((cl-lib (0 5)) ) "Provide weather and forecast information." single ((url: ."https://github.com/aaronbieber/sunshine.el") (:keywords  " tools" " weather"))])(sunny-day-theme . [(20140414 525)  nil  "Emacs24 theme with a light background." single ((url: ."https://github.com/mswift42/sunny-day-theme") (:keywords ""))])(sudo-ext . [(20110117 1510)  nil  "sudo support" single ((url: ."https://github.com/rubikitch/sudo-ext") (:keywords  " unix"))])(sudo-edit . [(20160304 1426)  nil  "Utilities for opening files with sudo" single ((url: ."https://github.com/nflath/sudo-edit") (:keywords ""))])(sudden-death . [(20140829 2038)  nil  "TotsuzennoShi" single ((url: ."https://github.com/yewton/sudden-death.el") (:keywords ""))])(subshell-proc . [(20130123 522)  nil  "URL: https://github.com/andrewmains12/" single ((url: ."https://github.com/andrewmains12/subshell-proc") (:keywords ""))])(sublimity . [(20151230 2327)  nil  "smoothscrolling, minimap and distractionfree mode" tar ((url: ."https://github.com/zk-phi/sublimity") (:keywords ""))])(sublime-themes . [(20160403 1902)  nil  " " single ((url: ."https://github.com/owainlewis/emacs-color-themes") (:keywords ""))])(subemacs . [(20160105 1959)  nil  "Evaluating expressions in a fresh Emacs subprocess  * mode: emacslisp lexicalbinding: t coding: utf8unix bytecompiledynamic: t *" tar ((url: ."https://github.com/kbauer/subemacs") (:keywords  " extensions" " lisp" " multiprocessing"))])(subatomic256-theme . [(20130621 1010)  nil  "Fork of subatomictheme for terminals." single ((url: ."https://github.com/d11wtq/subatomic256") (:keywords ""))])(subatomic-theme . [(20160126 2338)  nil  "Low contrast bluish color theme" single ((url: ."https://github.com/cryon/subatomic") (:keywords  " color-theme" " blue" " low contrast"))])(stylus-mode . [(20151025 53) ((sws-mode (0)) ) "Major mode for editing .jade files" single ((url: ."https://github.com/brianc/jade-mode") (:keywords ""))])(stripe-buffer . [(20141208 2308) ((cl-lib (1 0)) ) "Use a different background for even and odd lines" single ((url: ."https://github.com/sabof/stripe-buffer") (:keywords ""))])(string-utils . [(20140805 322) ((list-utils (0 4 2)) ) "Stringmanipulation utilities" single ((url: ."https://github.com/rolandwalker/string-utils") (:keywords  " extensions"))])(string-inflection . [(20150805 1756)  nil  "underscore > UPCASE > CaCase > lowerCaCase conversion of names" single ((url: ."https://github.com/akicho8/string-inflection") (:keywords  " elisp"))])(string-edit . [(20160411 1456) ((dash (1 2 0)) ) "Avoid escape nightmares by editing string in separate buffer" single ((url: ."https://github.com/magnars/string-edit.el") (:keywords ""))])(strie . [(20160212 622) ((cl-lib (0 5)) ) "A simple trie data structure implementation" single ((url: ."https://github.com/jcatw/strie.el") (:keywords ""))])(stock-ticker . [(20150207 1443) ((s (1 9 0)) (request (0 2 0)) ) "Show stock prices in mode line" single ((url: ."https://github.com/hagleitn/stock-ticker") (:keywords  " comms"))])(stickyfunc-enhance . [(20150430 214) ((emacs (24 3)) ) "Filename:" single ((url: ."https://github.com/tuhdo/semantic-stickyfunc-enhance") (:keywords  " c" " languages" " tools"))])(stem . [(20131102 1916)  nil  "Routines for ming" single ((url: ."https://github.com/yuutayamada/stem") (:keywords  " stemming"))])(steam . [(20160429 1744) ((cl-lib (0 5)) ) "Organize and launch Steam games" single ((url: ."https://github.com/Kungsgeten/steam.el") (:keywords  " games"))])(state . [(20160422 2050) ((emacs (24)) ) "Quick navigation between workspaces  * lexicalbinding: t *" tar ((url: ."https://github.com/thisirs/state") (:keywords  " convenience" " workspaces"))])(stash . [(20151117 2227)  nil  "lightweight persistent caching" tar ((url: ."https://github.com/vermiculus/stash.el") (:keywords  " extensions" " data" " internal" " lisp"))])(start-menu . [(20160426 2025) ((config-parser (0 1)) (cl-lib (0 5)) ) "for executing external program like in windows * lexicalbinding: t *" single ((url: ."https://github.com/lujun9972/el-start-menu") (:keywords  " convenience" " menu"))])(standoff-mode . [(20160428 58)  nil  "Create standoff markup, also called external markup" tar ((url: ."https://github.com/lueck/standoff-mode") (:keywords  " text" " annotations" " NER" " humanities"))])(stack-mode . [(20160112 1330)  nil  " " single ((url: ."https://github.com/commercialhaskell/stack-ide") (:keywords ""))])(ssh-tunnels . [(20141219 1918) ((emacs (24)) (cl-lib (0 5)) ) "Manage SSH tuns" single ((url: ."https://github.com/death/ssh-tunnels") (:keywords  " tools" " convenience"))])(ssh-config-mode . [(20160326 2052)  nil  "~harley/share/emacs/pkg/ssh/" single ((url: ."https://github.com/jhgorrell/ssh-config-mode-el") (:keywords  "  ssh" " config" " emacs"))])(ssh-agency . [(20160102 635) ((dash (2 10 0)) (emacs (24 4)) ) "use sshagent on win32 from Emacs * lexicalbinding: t *" single ((url: ."https://github.com/magit/ssh-agency") (:keywords ""))])(ssh . [(20120905 442)  nil  "Support for remote logins using ." single ((url: ."https://github.com/ieure/ssh-el") (:keywords  " unix" " comm"))])(srefactor . [(20160420 1533) ((emacs (24 4)) ) "Filename:" tar ((url: ."https://github.com/tuhdo/semantic-refactor") (:keywords  " c" " languages" " tools"))])(sqlup-mode . [(20151121 2230)  nil  "Upcase SQL words for you" single ((url: ."https://github.com/Trevoke/sqlup-mode.el") (:keywords  " sql" " tools"))])(sqlite . [(20150417 1315)  nil  "Filename:" single ((url: ."https://github.com/cnngimenez/sqlite.el") (:keywords ""))])(sql-mssql . [(20160512 1929) ((emacs (24 4)) ) "Connect Microsoft SQL Server with sql in Linux/Unix environment" single ((url: ."https://github.com/tumashu/sql-mssql") (:keywords ""))])(sql-indent . [(20150425 816)  nil  "indentation of SQL statements" single ((url: ."https://github.com/bsvingen/sql-indent") (:keywords  " languages"))])(sql-impala . [(20160507 518)  nil  "comint support for Cloudera Impala * lexicalbinding: t *" single ((url: ."https://github.com/jterk/sql-impala") (:keywords  " sql" " impala"))])(spu . [(20160515 1657) ((emacs (24 4)) (timp (1 2 0)) (signal (1 0)) ) "Silently upgrade package in the background   * lexicalbinding: t *" tar ((url: ."https://github.com/mola-T/SPU") (:keywords  " convenience" " package"))])(sprunge . [(20160301 1043) ((request (0 2 0)) (cl-lib (0 5)) ) "Upload pastes to .us" single ((url: ."https://github.com/tomjakubowski/sprunge.el") (:keywords  " tools"))])(sproto-mode . [(20151208 1203)  nil  "Major mode for editing sproto." single ((url: ."https://github.com/m2q1n9/sproto-mode") (:keywords  " sproto"))])(sprintly-mode . [(20121006 1334) ((furl (0 0 2)) ) "Major mode for dealing with sprint.ly" single ((url: ."https://github.com/sprintly/sprintly-mode") (:keywords ""))])(springboard . [(20160330 209) ((helm (1 6 9)) ) "Temporarily change defaultdirectory for one command" single ((url: ."https://github.com/jwiegley/springboard") (:keywords  " helm"))])(spray . [(20160305 620)  nil  "a speed reading mode" single ((url: ."https://github.com/ian-kelling/spray") (:keywords  " convenience"))])(spotlight . [(20150929 1555) ((emacs (24 1)) (counsel (0 6 0)) (swiper (0 6 0)) ) "search files with Mac OS X                      * lexicalbinding: t *" single ((url: ."https://github.com/benmaughan/spotlight.el") (:keywords  " search" " external"))])(spotify . [(20160503 2248) ((cl-lib (0 5)) ) "Control the  application from emacs" single ((url: ."https://github.com/remvee/spotify-el") (:keywords  " convenience"))])(splitter . [(20150214 436)  nil  "Manage window splits" single ((url: ."https://github.com/chumpage/chumpy-windows") (:keywords  " frames convenience"))])(splitjoin . [(20151031 2142) ((cl-lib (0 5)) ) "Transition between multiline and singleline code" single ((url: ."https://github.com/syohex/emacs-splitjoin") (:keywords ""))])(sphinx-frontend . [(20151122 1812)  nil  "Launch build process for rst documents via sphinx." single ((url: ."https://github.com/kostafey/sphinx-frontend") (:keywords  " compile" " sphinx" " reStructuredText"))])(sphinx-doc . [(20160116 1917) ((dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5)) ) "Sphinx friendly docstrings for Python functions" tar ((url: ."https://github.com/naiquevin/sphinx-doc.el") (:keywords  " Sphinx" " Python"))])(speed-type . [(20150121 1234) ((cl-lib (0 3)) ) "Practice touch and speed typing" tar ((url: ."https://github.com/hagleitn/speed-type") (:keywords  " games"))])(sparql-mode . [(20160316 2304) ((cl-lib (0 5)) (async (1 6)) ) "Edit and interactiy evaluate SPARQL queries." tar ((url: ."https://github.com/ljos/sparql-mode") (:keywords ""))])(sparkline . [(20150101 2119) ((cl-lib (0 3)) ) "Make  images from a list of numbers" tar ((url: ."https://github.com/woudshoo/sparkline") (:keywords  " extensions"))])(spark . [(20160503 1328) ((emacs (24 3)) ) "This software uses code ported from cl:" single ((url: ."https://github.com/alvinfrancis/spark") (:keywords  " lisp" " data"))])(spaces . [(20150214 436)  nil  "Create and switch between named window configurations." single ((url: ."https://github.com/chumpage/chumpy-windows") (:keywords  " frames convenience"))])(spaceline . [(20160511 430) ((dash (2 11 0)) (s (1 10 0)) (powerline (2 3)) (emacs (24 3)) (cl-lib (0 5)) ) "Moine configuration library for powerline" tar ((url: ."https://github.com/TheBB/spaceline") (:keywords  " mode-line powerline spacemacs"))])(spacegray-theme . [(20150720 331) ((emacs (24 1)) ) "A Hyperminimal UI Theme" single ((url: ."https://github.com/bruce/emacs-spacegray-theme") (:keywords  " themes"))])(sourcetalk . [(20140823 2239) ((request (0 2 0)) ) "SourceTalk (http://.net) plugin for Emacs" single ((url: ."https://github.com/malroc/sourcetalk_emacs") (:keywords  " sourcetalk code discussion"))])(sourcemap . [(20160512 1237) ((emacs (24)) (cl-lib (0 5)) ) "Sourcemap parser * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-sourcemap") (:keywords ""))])(sourcekit . [(20160511 1117) ((dash (2 12 1)) (dash-functional (1 2 0)) (emacs (24 3)) ) "Library to interact with tendaemon  * lexicalbinding: t *" single ((url: ."https://github.com/nathankot/company-sourcekit") (:keywords  " tools" " processes"))])(soundklaus . [(20160314 2031) ((dash (2 12 1)) (s (1 11 0)) (pkg-info (0 4)) (emacs (24)) (request (0 2 0)) (emms (4 0)) (cl-lib (0 5)) ) "Play music on SoundCloud with Emacs via EMMS * lexicalbinding: t *" tar ((url: ."https://github.com/r0man/soundklaus.el") (:keywords  " soundcloud" " music" " emms"))])(soundcloud . [(20150502 1126) ((request-deferred (20130526 1015)) (json (1 2)) (request (20140316 417)) (deferred (0 3 1)) (emms (20131016)) (string-utils (0 3 2)) ) "a SoundCloud client for Emacs" single ((url: ."https://github.com/thieman/soundcloud.el") (:keywords  " soundcloud music audio"))])(sound-wav . [(20151031 2235) ((deferred (0 3 1)) (cl-lib (0 5)) ) "Play wav file" single ((url: ."https://github.com/syohex/emacs-sound-wav") (:keywords ""))])(sotlisp . [(20160510 604) ((emacs (24 1)) ) "Write lisp at the speed of thought.  * lexicalbinding: t *" single ((url: ."https://github.com/Malabarba/speed-of-thought-lisp") (:keywords  " convenience" " lisp"))])(sotclojure . [(20160422 911) ((clojure-mode (4 0 0)) (cider (0 8)) (emacs (24 1)) (sotlisp (1 3)) ) "Write clojure at the speed of thought.  * lexicalbinding: t *" single ((url: ."https://github.com/Malabarba/speed-of-thought-clojure") (:keywords  " convenience" " clojure"))])(sos . [(20160223 2303) ((org (7)) ) "StackOverflow Search" single ((url: ."https://github.com/omouse/emacs-sos") (:keywords ""))])(soothe-theme . [(20150526 1313) ((emacs (24 1)) ) "Url: https://github.com/jasonm23/emacs" single ((url: ."https://github.com/jasonm23/emacs-soothe-theme") (:keywords ""))])(sonic-pi . [(20150919 1830) ((dash (2 2 0)) (emacs (24)) (osc (0 1)) (cl-lib (0 5)) ) "A Emacs client for SonicPi" tar ((url: ."https://github.com/repl-electric/sonic-pi.el") (:keywords  " SonicPi" " Ruby"))])(solidity-mode . [(20160505 1703)  nil  "Major mode for ethereum's solidity language" single ((url: ."https://github.com/ethereum/emacs-solidity") (:keywords  " languages"))])(solarized-theme . [(20160505 1633)  nil  "(provide ')" tar ((url: ."https://github.com/bbatsov/solarized-emacs") (:keywords ""))])(soft-stone-theme . [(20140614 1635) ((emacs (24)) ) "URL: http://github.com/mswift42/" single ((url: ."https://github.com/mswift42/soft-stone-theme") (:keywords ""))])(soft-morning-theme . [(20150919 441)  nil  "Emacs24 theme with a light background." single ((url: ."https://github.com/mswift42/soft-morning-theme") (:keywords ""))])(soft-charcoal-theme . [(20140421 43)  nil  "URL: http://github.com/mswift42/" single ((url: ."https://github.com/mswift42/soft-charcoal-theme") (:keywords ""))])(snippet . [(20130211 715)  nil  "Insert s of text into a buffer" single ((url: ."https://github.com/pkazmier/snippet.el") (:keywords ""))])(snapshot-timemachine . [(20160222 1732) ((emacs (24 4)) (cl-lib (0 5)) ) "Step through (Btrfs, ZFS, ...) snapshots of files" single ((url: ."https://github.com/mrBliss/snapshot-timemachine") (:keywords ""))])(snakemake-mode . [(20160518 944) ((magit-popup (2 4 0)) (emacs (24)) (cl-lib (0 5)) ) "Major mode for editing Snakemake files  * lexicalbinding: t *" tar ((url: ."https://github.com/kyleam/snakemake-mode") (:keywords  " tools"))])(smyx-theme . [(20141127 1628)  nil  "smyx Color Theme" single ((url: ."https://github.com/tacit7/smyx") (:keywords  " color theme smyx"))])(smtpmail-multi . [(20160219 749)  nil  "Filename:" single ((url: ."https://github.com/vapniks/smtpmail-multi") (:keywords  " comm"))])(smotitah . [(20150218 1830)  nil  "Modular configuration framework for Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/laynor/smotitah") (:keywords  " configuration"))])(smooth-scrolling . [(20160228 915)  nil  "Make emacs scroll smoothly" single ((url: ."https://github.com/aspiers/smooth-scrolling") (:keywords  " convenience"))])(smooth-scroll . [(20130322 1214)  nil  "Minor mode for smooth scrolling and inplace scrolling." single ((url: ."https://github.com/k-talo/smooth-scroll.el") (:keywords  " convenience emulations frames"))])(smex . [(20151213 609) ((emacs (24)) ) "Mx interface with Idostyle fuzzy matching. * lexicalbinding: t *" single ((url: ."https://github.com/nonsequitur/smex") (:keywords  " convenience" " usability"))])(smeargle . [(20151031 2239) ((emacs (24)) (cl-lib (0 5)) ) "Highlighting region by last updated time * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-smeargle") (:keywords ""))])(smblog . [(20160317 1930) ((emacs (24 3)) ) "samba log viewer" single ((url: ."https://github.com/aaptel/smblog-mode") (:keywords ""))])(smarty-mode . [(20100703 1958)  nil  "major mode for editing smarty templates" single ((url: ."https://github.com/emacsorphanage/smarty-mode") (:keywords  " smarty php languages templates"))])(smartwin . [(20160513 1556) ((emacs (24 4)) ) "A minor mode shows sl like buffers. * lexicalbinding:t *" single ((url: ."https://github.com/jerryxgh/smartwin") (:keywords  " convenience"))])(smartscan . [(20131230 2339)  nil  "Jumps between other symbols found at point" single ((url: ."https://github.com/mickeynp/smart-scan") (:keywords  " extensions"))])(smartrep . [(20150509 1030)  nil  "Filename:" single ((url: ."https://github.com/myuhe/smartrep.el") (:keywords  " convenience"))])(smartparens . [(20160514 442)  nil  "Automatic insertion, wrapping and pareditlike navigation with user defined pairs." tar ((url: ."https://github.com/Fuco1/smartparens") (:keywords  " abbrev convenience editing"))])(smart-window . [(20130215 347)  nil  "vimlike window controlling plugin" single ((url: ."https://github.com/dryman/smart-window.el") (:keywords  " window"))])(smart-tabs-mode . [(20140401 729)  nil  "Inligently indent with tabs, align with spaces!" single ((url: ."https://github.com/jcsalomon/smarttabs") (:keywords  " languages"))])(smart-tab . [(20150704 17)  nil  "Inligent tab completion and indentation." single ((url: ."https://github.com/genehack/smart-tab") (:keywords  " extensions"))])(smart-shift . [(20150203 1525)  nil  "Smart shift text left/right." single ((url: ."https://github.com/hbin/smart-shift") (:keywords  " convenience" " tools"))])(smart-region . [(20150903 2203) ((multiple-cursors (1 3 0)) (emacs (24 4)) (expand-region (0 10 0)) (cl-lib (0 5)) ) "Smartly ect region, rectangle, multi cursors" single ((url: ."https://github.com/uk-ar/smart-region") (:keywords  " marking region"))])(smart-newline . [(20131208 2112)  nil  "Provide smart newline for one keybind." single ((url: ."https://github.com/ainame/smart-newline.el") (:keywords ""))])(smart-mode-line . [(20160506 2247) ((emacs (24 3)) (rich-minority (0 1 1)) ) "A color coded smart modeline." tar ((url: ."https://github.com/Malabarba/smart-mode-line") (:keywords  " mode-line faces themes"))])(smart-mark . [(20150920 832)  nil  "Restore point after Cg when mark" single ((url: ."https://github.com/cheunghy/smart-mark") (:keywords  " mark" " restore"))])(smart-indent-rigidly . [(20141206 815)  nil  "Smart rigid indenting" single ((url: ."https://github.com/re5et/smart-indent-rigidly") (:keywords  " indenting coffee-mode haml-mode sass-mode"))])(smart-forward . [(20140430 1513) ((expand-region (0 8 0)) ) "Semantic navigation" single ((url: ."https://github.com/magnars/smart-forward.el") (:keywords  " navigation"))])(smart-cursor-color . [(20151218 1653)  nil  "Filename:" single ((url: ."https://github.com/7696122/smart-cursor-color") (:keywords  " cursor" " color" " face"))])(smart-comment . [(20160323 1542)  nil  "smarter commenting * lexicalbinding: t *" tar ((url: ."https://github.com/paldepind/smart-comment") (:keywords  " lisp"))])(sly-repl-ansi-color . [(20160214 1618) ((sly (0)) (cl-lib (0 5)) ) "Add ANSI colors support to the sly mrepl." single ((url: ."https://github.com/PuercoPop/sly-repl-ansi-color") (:keywords  " sly"))])(sly-quicklisp . [(20160314 2234)  nil  "A template SLY contrib  * lexicalbinding: t *" tar ((url: ."https://github.com/capitaomorte/sly-quicklisp") (:keywords  " languages" " lisp" " sly"))])(sly-named-readtables . [(20150818 2307)  nil  "Support named readtables in Common Lisp files  * lexicalbinding: t *" tar ((url: ."https://github.com/capitaomorte/sly-named-readtables") (:keywords  " languages" " lisp" " sly"))])(sly-macrostep . [(20160205 119)  nil  "fancy macroexpansion via macrostep" tar ((url: ."https://github.com/capitaomorte/sly-macrostep") (:keywords  " languages" " lisp" " sly"))])(sly-hello-world . [(20160119 2236)  nil  "A template SLY contrib  * lexicalbinding: t *" tar ((url: ."https://github.com/capitaomorte/sly-hello-world") (:keywords  " languages" " lisp" " sly"))])(sly-company . [(20160308 2157)  nil  "sly completion backend for company mode * lexicalbinding: t *" single ((url: ."https://github.com/capitaomorte/sly-company") (:keywords  " convenience" " lisp" " abbrev"))])(sly . [(20160427 2252) ((emacs (24 3)) ) "Sylvester the Cat's Common Lisp IDE  *lexicalbinding:t*" tar ((url: ."https://github.com/capitaomorte/sly") (:keywords  " languages" " lisp" " sly"))])(slovak-holidays . [(20150418 1655)  nil  "Adds a list of slovak holidays to Emacs calendar" single ((url: ."https://github.com/Fuco1/slovak-holidays") (:keywords  " calendar"))])(slirm . [(20160201 2225) ((emacs (24 4)) ) "Systematic Literature Review Mode for Emacs.  * lexicalbinding: t *" single ((url: ."https://github.com/fbie/slirm") (:keywords ""))])(slime-volleyball . [(20140718 1241)  nil  "An SVG Slime Volleyball Game" tar ((url: ."https://github.com/fitzsim/slime-volleyball") (:keywords  " games"))])(slime-theme . [(20141122 2237) ((emacs (24 0)) ) "an Emacs 24 theme based on Slime (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-slime-theme") (:keywords ""))])(slime-docker . [(20160507 508) ((slime (2 16)) (emacs (24)) (docker-tramp (0 1)) (cl-lib (0 5)) ) "URL: https://github.com/daewok/" single ((url: ."https://github.com/daewok/slime-docker") (:keywords  " docker" " lisp" " slime"))])(slime-company . [(20160209 1932) ((slime (2 13)) (company (0 9 0)) ) "slime completion backend for company mode" single ((url: ."https://github.com/anwyn/slime-company") (:keywords  " convenience" " lisp" " abbrev"))])(slime . [(20160419 2358) ((cl-lib (0 5)) (macrostep (0 9)) ) "URL: https://github.com//" tar ((url: ."https://github.com/slime/slime") (:keywords  " languages" " lisp" " slime"))])(slim-mode . [(20140612 50)  nil  "Major mode for editing Slim files" single ((url: ."https://github.com/slim-template/emacs-slim") (:keywords  " markup" " language"))])(slideview . [(20150325 640) ((cl-lib (0 3)) ) "File slideshow" tar ((url: ."https://github.com/mhayashi1120/Emacs-slideview") (:keywords  " files"))])(slamhound . [(20140704 323)  nil  "Rip Clojure namespaces apart and rebuild them." single ((url: ."https://github.com/technomancy/slamhound") (:keywords  " tools" " lisp"))])(slack . [(20160518 109) ((oauth2 (0 10)) (alert (1 2)) (emojify (0 2)) (request (0 2 0)) (circe (2 1)) (websocket (1 5)) ) "client for emacs              * lexicalbinding: t *" tar ((url: ."https://github.com/yuya373/emacs-slack") (:keywords  " tools"))])(skype . [(20150612 942)  nil  "UI for emacs users.." single ((url: ."https://github.com/kiwanami/emacs-skype") (:keywords  " skype" " chat"))])(skewer-reload-stylesheets . [(20160518 444) ((skewer-mode (1 5 3)) ) "liveedit CSS stylesheets." tar ((url: ."https://github.com/NateEag/skewer-reload-stylesheets") (:keywords ""))])(skewer-mode . [(20150919 6)  nil  "live browser JavaScript, CSS, and HTML interaction * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/skewer-mode") (:keywords ""))])(skewer-less . [(20141023 2124) ((skewer-mode (1 5 3)) ) "Skewer support for live LESS stylesheet updates" single ((url: ."https://github.com/purcell/skewer-less") (:keywords  " languages" " tools"))])(skeletor . [(20151221 1331) ((f (0 14 0)) (dash (2 2 0)) (s (1 7 0)) (emacs (24 1)) (cl-lib (0 3)) (let-alist (1 0 3)) ) "Provides project setons for Emacs  * lexicalbinding: t *" tar ((url: ."https://github.com/chrisbarrett/skeletor.el") (:keywords ""))])(simplezen . [(20130504 503) ((dash (1 1 0)) (s (1 4 0)) ) "A simple subset of zencodingmode for Emacs." single ((url: ."https://github.com/magnars/simplezen.el") (:keywords ""))])(simplenote2 . [(20160318 2103) ((request-deferred (0 2 0)) ) "Interact with simplenote.appspot.com" single ((url: ."https://github.com/alpha22jp/simplenote2.el") (:keywords  " simplenote"))])(simplenote . [(20150216 1005)  nil  "Interact with simplenote.appspot.com" single ((url: ."https://github.com/dotemacs/simplenote.el") (:keywords  " simplenote"))])(simpleclip . [(20150805 110)  nil  "Simplified access to the system clipboard" single ((url: ."https://github.com/rolandwalker/simpleclip") (:keywords  " convenience"))])(simple-screen . [(20141103 2124)  nil  "Filename:" single ((url: ."https://github.com/wachikun/simple-screen") (:keywords  " tools"))])(simple-mpc . [(20151228 234)  nil  "provides a simple interface to mpc" tar ((url: ."https://github.com/jorenvo/simple-mpc") (:keywords  " multimedia" " mpd" " mpc"))])(simple-httpd . [(20150501 855) ((cl-lib (0 3)) ) "pureisp HTTP server" tar ((url: ."https://github.com/skeeto/emacs-web-server") (:keywords ""))])(simple-call-tree . [(20160406 556) ((emacs (24 3)) (anaphora (1 0 0)) ) "Filename:" single ((url: ."https://github.com/vapniks/simple-call-tree") (:keywords  " programming"))])(simp . [(20160316 24)  nil  "Simple project definition, chiefly for file finding, and grepping" tar ((url: ."https://github.com/re5et/simp") (:keywords  " project grep find"))])(silkworm-theme . [(20160219 141) ((emacs (24)) ) "Light theme with pleasant, low contrast colors." single ((url: ."https://github.com/mswift42/silkworm-theme") (:keywords ""))])(signature . [(20140731 349)  nil  "Signature Survey" tar ((url: ."https://github.com/pidu/signature") (:keywords ""))])(signal . [(20160425 1417) ((emacs (24)) (cl-lib (0 5)) ) "Advanced hook  * lexicalbinding: t *" single ((url: ."https://github.com/Mola-T/signal") (:keywords  " internal" " lisp" " processes" " tools"))])(sift . [(20160107 1815)  nil  "Frontend for , a fast and powerful grep alternative" single ((url: ."https://github.com/nlamirault/sift.el") (:keywords ""))])(sicp . [(20151130 2357)  nil  "Structure and Interpretation of Computer Programs in info format" single ((url: ."https://github.com/webframp/sicp-info") (:keywords ""))])(sibilant-mode . [(20151205 1650)  nil  "Support for the Sibilant programming language" single ((url: ."https://github.com/jbr/sibilant-mode") (:keywords  " languages"))])(shut-up . [(20151023 1622) ((emacs (24)) (cl-lib (0 3)) ) "Shut up would you!  * lexicalbinding: t *" single ((url: ."https://github.com/cask/shut-up") (:keywords ""))])(shrink-whitespace . [(20150917 315)  nil  "Whitespace removal DWIM key * coding: utf8unix *" single ((url: ."https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords ""))])(shpec-mode . [(20150601 2327)  nil  "Minor mode for shpec specification" single ((url: ."https://github.com/shpec/shpec-mode") (:keywords  " languages" " tools"))])(show-marks . [(20130805 2249) ((fm (1 0)) ) "Filename:" single ((url: ."https://github.com/vapniks/show-marks") (:keywords  " convenience"))])(show-css . [(20160210 2208) ((s (1 10 0)) (doom (1 3)) ) "Show the css of the html attribute the cursor is on" tar ((url: ."https://github.com/8cylinder/showcss-mode") (:keywords  " hypermedia"))])(shoulda . [(20140617 302) ((cl-lib (0 5)) ) "Shoulda test support for ruby" single ((url: ."https://github.com/marcwebbie/shoulda.el") (:keywords  " ruby tests shoulda"))])(shift-text . [(20130901 55) ((es-lib (0 3)) (cl-lib (1 0)) ) "Move the region in 4 directions, in a way similar to Eclipse's" single ((url: ."https://github.com/sabof/shift-text") (:keywords ""))])(shift-number . [(20160421 1811)  nil  "Increase/decrease the number at point" single ((url: ."https://github.com/alezost/shift-number.el") (:keywords  " convenience"))])(shelltest-mode . [(20160227 2148)  nil  "Major mode for sltestrunner" single ((url: ."https://github.com/rtrn/shelltest-mode") (:keywords  " languages"))])(shelldoc . [(20160129 1026) ((s (1 9 0)) (cl-lib (0 3)) ) "sl command editing support with man page." single ((url: ."https://github.com/mhayashi1120/Emacs-shelldoc") (:keywords  " applications"))])(shell-toggle . [(20150226 2211)  nil  "Toggle to and from the sl buffer" single ((url: ."https://github.com/knu/shell-toggle.el") (:keywords  " processes"))])(shell-switcher . [(20160112 1535)  nil  "Provide fast switching between sl buffers  * lexicalbinding: t *" tar ((url: ."https://github.com/DamienCassou/shell-switcher") (:keywords  " emacs package elisp shell eshell term switcher"))])(shell-split-string . [(20151224 1808)  nil  "Split strings using sllike syntax" single ((url: ."https://github.com/10sr/shell-split-string-el") (:keywords  " utility library shell string"))])(shell-pop . [(20160425 2254) ((emacs (24)) ) "ps you to use sl easily on Emacs. Only one key action to work. * lexicalbinding: t *" single ((url: ."https://github.com/kyagi/shell-pop-el") (:keywords  "      shell" " terminal" " tools"))])(shell-here . [(20150729 104)  nil  "Open a sl ative to the working directory" single ((url: ."https://github.com/ieure/shell-here") (:keywords  " unix" " tools" " processes"))])(shell-current-directory . [(20140102 754)  nil  "create new sl based on buffer directory" single ((url: ."https://github.com/metaperl/shell-current-directory") (:keywords  " shell" " comint"))])(shampoo . [(20131230 1819)  nil  "A remote Smalltalk deopment mode" tar ((url: ."https://github.com/dmatveev/shampoo-emacs") (:keywords ""))])(shakespeare-mode . [(20160331 149)  nil  "A major mode for editing Shakespearean templates." single ((url: ."https://github.com/CodyReichert/shakespeare-mode") (:keywords  " shakespeare hamlet lucius julius mode"))])(shader-mode . [(20151030 2204) ((emacs (24)) ) "Major mode for shader" single ((url: ."https://github.com/midnightSuyama/shader-mode") (:keywords ""))])(shadchen . [(20141103 239)  nil  "pattern matching forisp" tar ((url: ."https://github.com/VincentToups/shadchen-el") (:keywords ""))])(shackle . [(20160517 1615) ((cl-lib (0 5)) ) "Enforce rules for popups" single ((url: ."https://github.com/wasamasa/shackle") (:keywords  " convenience"))])(seti-theme . [(20151124 1811)  nil  "A dark colored theme, inspired by Seti Atom Theme" single ((url: ."https://github.com/caisah/seti-theme") (:keywords  " themes"))])(session . [(20120511 800)  nil  "use variables, registers and buffer places across s" single ((url: ."https://github.com/emacsorphanage/session") (:keywords  " session" " session management" " desktop" " data" " tools"))])(serverspec . [(20150623 1955) ((f (0 16 2)) (dash (2 6 0)) (s (1 9 0)) (helm (1 6 1)) ) "Serverspec minor mode" tar ((url: ."https://github.com/k1LoW/emacs-serverspec") (:keywords ""))])(servant . [(20140216 2019) ((f (0 11 0)) (web-server (0 0 1)) (commander (0 5 0)) (dash (2 2 0)) (shut-up (0 2 1)) (s (1 8 0)) (ansi (0 3 0)) (epl (0 2)) ) "ELPA server written in Emacs Lisp * lexicalbinding: t *" tar ((url: ."https://github.com/cask/servant") (:keywords  " elpa" " server"))])(sequences . [(20130909 311) ((emacs (24)) ) "Ports of some Clojure sequence functions." single ((url: ."https://github.com/timvisher/sequences.el") (:keywords  " convenience"))])(seoul256-theme . [(20150715 635)  nil  " " single ((url: ."https://github.com/ChrisDavison/seoul256.el") (:keywords ""))])(sentence-navigation . [(20150915 1246) ((emacs (24 4)) (ample-regexps (0 1)) ) "Commands to navigate onespaced sentences." single ((url: ."https://github.com/noctuid/emacs-sentence-navigation") (:keywords  " sentence evil"))])(sensitive . [(20131015 2135) ((emacs (24)) (sequences (0 1 0)) ) "A dead simple way to load  information" single ((url: ."https://github.com/timvisher/sensitive.el") (:keywords  " convenience"))])(sendto . [(20160425 2050) ((emacs (24 4)) ) "send the region content to a function * lexicalbinding: t *" single ((url: ."https://github.com/lujun9972/sendto.el") (:keywords  " convenience" " region"))])(selectric-mode . [(20151205 148)  nil  "IBM ectric mode for Emacs  * lexicalbinding: t *" single ((url: ."https://github.com/rbanffy/selectric-mode") (:keywords  " multimedia" " convenience" " typewriter" " selectric"))])(selected . [(20160512 1635)  nil  "Keymap for when region is active" single ((url: ."https://github.com/Kungsgeten/selected.el") (:keywords  " convenience"))])(select-themes . [(20160221 906)  nil  "Color theme ection with completingread * lexicalbinding: t *" single ((url: ."https://github.com/jasonm23/emacs-select-themes") (:keywords ""))])(seethru . [(20150219 229) ((shadchen (1 4)) ) "Easily change Emacs' transparency" single ((url: ."https://github.com/Benaiah/seethru") (:keywords  " lisp" " tools" " alpha" " transparency"))])(seeing-is-believing . [(20151011 129)  nil  "minor mode for running the  ruby gem" single ((url: ."https://github.com/jcinnamond/seeing-is-believing") (:keywords ""))])(seclusion-mode . [(20121119 753)  nil  "Edit in seclusion. A Dark Room mode." single ((url: ."https://github.com/dleslie/seclusion-mode") (:keywords ""))])(searchq . [(20150829 2011) ((emacs (24 3)) ) "Framework of queued search tasks using GREP, ACK, AG and more." single ((url: ."https://github.com/boyw165/searchq") (:keywords ""))])(search-web . [(20150312 1903)  nil  "Post web search queries using `browseurl'." single ((url: ."https://github.com/tomoya/search-web.el") (:keywords ""))])(scss-mode . [(20150108 600)  nil  "Major mode for editing SCSS files" single ((url: ."https://github.com/antonj/scss-mode") (:keywords  " scss css mode"))])(scratches . [(20151006 1216) ((f (0 17 0)) (dash (2 11 0)) ) "Multiple  in any language" single ((url: ."https://github.com/cheunghy/scratches") (:keywords  " scratch"))])(scratch-pop . [(20150820 1639)  nil  "Generate, popup (& optionally backup) scratch buffer(s)." single ((url: ."https://github.com/zk-phi/scratch-pop") (:keywords ""))])(scratch-palette . [(20150225 1642)  nil  "make scratch buffer for each files" single ((url: ."https://github.com/zk-phi/scratch-palette") (:keywords ""))])(scratch-message . [(20160518 247)  nil  "Changing message in your scratch buffer" single ((url: ."https://github.com/thisirs/scratch-message") (:keywords  " util scratch"))])(scratch-log . [(20141115 1543)  nil  "Utility for *scratch* buffer." single ((url: ."https://github.com/mori-dev/scratch-log") (:keywords ""))])(scratch-ext . [(20140104 1316)  nil  "Extensions for *scratch*" single ((url: ."https://github.com/kyanagi/scratch-ext-el") (:keywords ""))])(scratch . [(20120831 128)  nil  "Modespecific  buffers" tar ((url: ."https://github.com/ieure/scratch-el") (:keywords  " editing"))])(scpaste . [(20151209 935) ((htmlize (1 39)) ) "Paste to the web via scp." single ((url: ."https://github.com/technomancy/scpaste") (:keywords  " convenience hypermedia"))])(sclang-snippets . [(20130513 1551) ((yasnippet (0 8 0)) ) "Snippets for the SuperCollider Emacs mode" tar ((url: ."https://github.com/ptrv/sclang-snippets") (:keywords  " snippets"))])(sclang-extensions . [(20160509 1138) ((auto-complete (1 4 0)) (dash (1 2 0)) (s (1 3 1)) (emacs (24 1)) ) "Extensions for the SuperCollider Emacs mode." tar ((url: ."https://github.com/chrisbarrett/sclang-extensions") (:keywords  " sclang supercollider languages tools"))])(scheme-here . [(20151126 1546)  nil  "cmuscheme extension for multiple inferior processes" single ((url: ."https://github.com/hiddenlotus/scheme-here") (:keywords  " scheme"))])(scheme-complete . [(20160503 739)  nil  "Smart tab completion for Scheme in Emacs" single ((url: ."https://github.com/ashinn/scheme-complete") (:keywords ""))])(scf-mode . [(20151122 1048)  nil  "shorten filenames in compilation type buffers" single ((url: ."https://github.com/lewang/scf-mode") (:keywords  " compilation"))])(scala-outline-popup . [(20150704 8) ((dash (2 9 0)) (flx-ido (0 5)) (popup (0 5 3)) (scala-mode2 (0 22)) ) "scala file summary popup" single ((url: ."https://github.com/ancane/scala-outline-popup") (:keywords  " scala" " structure" " summary"))])(scad-preview . [(20160206 2136) ((scad-mode (91 0)) ) "Preview SCAD mos in realtime within Emacs" single ((url: ."https://github.com/zk-phi/scad-preview") (:keywords ""))])(sbt-mode . [(20160517 636)  nil  "Interactive support for sbt projects" tar ((url: ."https://github.com/ensime/emacs-sbt-mode") (:keywords  " languages"))])(say-what-im-doing . [(20160513 255)  nil  "Filename:" single ((url: ."https://github.com/benaiah/say-what-im-doing") (:keywords  " text to speech" " dumb" " funny"))])(savekill . [(20140418 1029)  nil  "Save kill ring to disk" single ((url: ."https://github.com/rubikitch/savekill") (:keywords  " tools"))])(save-visited-files . [(20151022 143)  nil  "save opened files across sessions" single ((url: ."https://github.com/nflath/save-visited-files") (:keywords ""))])(save-load-path . [(20140206 2014)  nil  "save loadpath and reuse it to test" single ((url: ."https://github.com/rubikitch/save-load-path") (:keywords  " lisp"))])(sauron . [(20160502 145)  nil  "a frame tracking events inside and outside your emacs buffers" tar ((url: ."https://github.com/djcb/sauron") (:keywords  "comm" "frames"))])(sass-mode . [(20160507 1145) ((haml-mode (3 0 15)) (cl-lib (0 5)) ) "Major mode for editing Sass files" single ((url: ."https://github.com/nex3/sass-mode") (:keywords  " markup" " language" " css"))])(sane-term . [(20150918 702) ((emacs (24 1)) ) "Multi Term is crazy. This is not." single ((url: ."https://github.com/adamrt/sane-term") (:keywords ""))])(salt-mode . [(20150905 213) ((mmm-mode (0 5 4)) (yaml-mode (0 0 12)) (mmm-jinja2 (0 0 1)) ) "Major mode for Salt States" single ((url: ."https://github.com/beardedprojamz/salt-mode") (:keywords  " languages"))])(sage-shell-mode . [(20160517 1337) ((emacs (24)) (deferred (0 3 1)) (cl-lib (0 5)) ) "A frontend for Sage Math * lexicalbinding: t *" tar ((url: ."https://github.com/stakemori/sage-shell-mode") (:keywords  " Sage" " math"))])(sackspace . [(20130719 1756)  nil  "A better backspace" single ((url: ."https://github.com/cofi/sackspace.el") (:keywords  " delete convenience"))])(s-buffer . [(20130606 524)  nil  "s operations for buffers" single ((url: ."https://github.com/nicferrier/emacs-s-buffer") (:keywords  " lisp"))])(s . [(20160509 1457)  nil  "The long lot Emac tring manipulation library." single ((url: ."https://github.com/magnars/s.el") (:keywords  " strings"))])(rvm . [(20150402 2242)  nil  "Emacs integration for" single ((url: ."https://github.com/senny/rvm.el") (:keywords  " ruby rvm"))])(rustfmt . [(20160217 2142) ((emacs (24)) ) "Format rust code using     * lexicalbinding: t *" single ((url: ."https://github.com/fbergroth/emacs-rustfmt") (:keywords  " convenience"))])(rust-mode . [(20160517 1846) ((emacs (24 0)) ) "A major emacs mode for editing Rust source code *lexicalbinding: t*" tar ((url: ."https://github.com/rust-lang/rust-mode") (:keywords  " languages"))])(runtests . [(20150807 1631)  nil  "Run unit tests from Emacs" single ((url: ."https://github.com/sunesimonsen/emacs-runtests") (:keywords  " test"))])(runner . [(20151121 1553)  nil  "Improved "open with" suggestions for dired" single ((url: ."https://github.com/thamer/runner") (:keywords  " shell command" " dired" " file extension" " open with"))])(ruby-tools . [(20151210 15)  nil  "Collection of handy functions for rubymode" tar ((url: ."https://github.com/rejeep/ruby-tools.el") (:keywords  " speed" " convenience" " ruby"))])(ruby-test-mode . [(20160510 150) ((ruby-mode (1 0)) (pcre2el (1 8)) ) "Minor mode for Behaviour and Test Driven" single ((url: ."https://github.com/r0man/ruby-test-mode") (:keywords  " ruby unit test rspec"))])(ruby-refactor . [(20160215 50) ((ruby-mode (1 2)) ) "A minor mode which presents various Ruby refactoring pers." single ((url: ."https://github.com/ajvargo/ruby-refactor") (:keywords  " refactor ruby"))])(ruby-interpolation . [(20131113 52)  nil  "Ruby string interpolation pers" single ((url: ."https://github.com/leoc/ruby-interpolation.el") (:keywords ""))])(ruby-hash-syntax . [(20141023 2124)  nil  "Toggle ruby hash syntax between classic and 1.9 styles" single ((url: ."https://github.com/purcell/ruby-hash-syntax") (:keywords  " languages"))])(ruby-guard . [(20160201 952)  nil  "Launching guard directly inside emacs." single ((url: ."https://github.com/cheunghy/ruby-guard") (:keywords  " ruby" " guard" " rails"))])(ruby-factory . [(20160102 1521) ((inflections (1 1)) ) "Minor mode for Ruby test object generation libraries" single ((url: ."https://github.com/sshaw/ruby-factory-mode") (:keywords  " ruby" " rails" " convenience"))])(ruby-end . [(20151023 1630)  nil  "Automatic insertion of end blocks for Ruby" single ((url: ."https://github.com/rejeep/ruby-end.el") (:keywords  " speed" " convenience" " ruby"))])(ruby-dev . [(20130811 1651)  nil  "Interactive deopement environment for Ruby." tar ((url: ."https://github.com/Mon-Ouie/ruby-dev.el") (:keywords ""))])(ruby-compilation . [(20150709 1440) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0)) ) " " single ((url: ."https://github.com/eschulte/rinari") (:keywords  " ruby" " rails" " project" " convenience" " web"))])(rubocop . [(20151124 1337) ((dash (1 0 0)) (emacs (24)) ) "An Emacs interface for RuboCop * lexicalbinding: t *" single ((url: ."https://github.com/bbatsov/rubocop-emacs") (:keywords  " project" " convenience"))])(rtm . [(20160117 127) ((cl-lib (1 0)) ) "Anisp implementation of the Remember The Milk API" single ((url: ."https://github.com/pmiddend/emacs-rtm") (:keywords  " remember the milk productivity todo"))])(rtags . [(20160519 724)  nil  " " single ((url: ."https://github.com/Andersbakken/rtags") (:keywords ""))])(rspec-mode . [(20160426 557) ((ruby-mode (1 0)) (cl-lib (0 4)) ) "Enhance rubymode for RSpec" tar ((url: ."https://github.com/pezra/rspec-mode") (:keywords  " rspec ruby"))])(rpn-calc . [(20150302 2134) ((popup (0 4)) ) "quick RPN calculator for hackers" single ((url: ."https://github.com/zk-phi/rpn-calc") (:keywords ""))])(rpm-spec-mode . [(20150411 2355)  nil  "RPM spec file editing commands for Emacs/XEmacs" single ((url: ."https://github.com/bjorlykke/rpm-spec-mode") (:keywords  " unix" " languages"))])(roy-mode . [(20151122 2344)  nil  "Roy major mode" single ((url: ."https://github.com/folone/roy-mode") (:keywords  " extensions"))])(rotate . [(20160215 1518)  nil  "Rotate the layout of emacs" single ((url: ."https://github.com/daic-h/emacs-rotate") (:keywords  " window" " layout"))])(rope-read-mode . [(20160504 1647)  nil  "Rearrange lines to read text smoothly * lexicalbinding: t *" single ((url: ."https://github.com/marcowahl/rope-read-mode") (:keywords  " reading" " convenience" " chill"))])(roguel-ike . [(20160120 1102)  nil  "Main file for" tar ((url: ."https://github.com/stevenremot/roguel-ike") (:keywords ""))])(robots-txt-mode . [(20160312 2351)  nil  "Major mode for editing robots.txt" single ((url: ."https://github.com/zonuexe/robots-txt-mode") (:keywords  " web"))])(robe . [(20160518 1759) ((inf-ruby (2 3 0)) ) "Code navigation, documentation lookup and completion for Ruby" tar ((url: ."https://github.com/dgutov/robe") (:keywords  " ruby convenience rails"))])(rnc-mode . [(20121228 702)  nil  "A major mode for editing RELAX NG Compact syntax." single ((url: ."https://github.com/TreeRex/rnc-mode") (:keywords ""))])(rings . [(20140103 736)  nil  "Buffer . Like tabs, but better." single ((url: ."https://github.com/konr/rings") (:keywords  " utilities" " productivity"))])(rinari . [(20150709 1440) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0)) ) "Rinari Is Not A Rails IDE" single ((url: ."https://github.com/eschulte/rinari") (:keywords  " ruby" " rails" " project" " convenience" " web"))])(rigid-tabs . [(20150807 2356) ((emacs (24 3)) ) "Rigidify and adjust the visual alignment of TABs" single ((url: ."https://github.com/wavexx/rigid-tabs.el") (:keywords  " diff" " whitespace" " version control" " magit"))])(rich-minority . [(20151201 2000) ((cl-lib (0 5)) ) "Cleanup and Beautify the list of minormodes." single ((url: ."https://github.com/Malabarba/rich-minority") (:keywords  " mode-line faces"))])(rhtml-mode . [(20130422 2111)  nil  "major mode for editing RHTML files" tar ((url: ."https://github.com/eschulte/rhtml") (:keywords ""))])(reykjavik-theme . [(20160110 1834) ((emacs (24)) ) "Theme with a dark background." single ((url: ."https://github.com/mswift42/reykjavik-theme") (:keywords ""))])(revive . [(20150418 655)  nil  "$Id: ,v 2.23 2015/03/20 04:03:45 yuuji Exp $" single ((url: ."https://github.com/emacsmirror/revive") (:keywords ""))])(review-mode . [(20150110 2212)  nil  "major mode for ReVIEW * lexicalbinding: t *" single ((url: ."https://github.com/kmuto/review-el") (:keywords ""))])(reverse-theme . [(20151031 2245)  nil  "Reverse theme for Emacs" single ((url: ."https://github.com/syohex/emacs-reverse-theme") (:keywords ""))])(reveal-in-osx-finder . [(20150803 57)  nil  "Reveal file associated with buffer in OS X Finder" single ((url: ."https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords  " OS X" " Finder"))])(restclient-helm . [(20160510 1638) ((restclient (0)) (helm (1 9 4)) ) "m interface for restclient" single ((url: ."https://github.com/pashky/restclient.el") (:keywords  " http helm"))])(restclient . [(20160510 1638)  nil  "An interactive HTTP client for Emacs" single ((url: ."https://github.com/pashky/restclient.el") (:keywords  " http"))])(restart-emacs . [(20151204 35)  nil  "Restart emacs from within emacs  * lexicalbinding: t *" tar ((url: ."https://github.com/iqbalansari/restart-emacs") (:keywords  " convenience"))])(resize-window . [(20160512 1105) ((emacs (24)) ) "easily resize windows          * lexicalbinding: t *" single ((url: ."https://github.com/dpsutton/resize-window") (:keywords  " window" " resize"))])(requirejs-mode . [(20130217 320)  nil  "Improved AMD module management" single ((url: ."https://github.com/moricard/requirejs-mode") (:keywords  " Javascript" " AMD" " RequireJs"))])(requirejs . [(20151204 1519) ((s (1 9 0)) (yasnippet (20151011 1823)) (popup (0 5 3)) (js2-mode (20150713)) (cl-lib (0 5)) ) "Requirejs import manipulation and source traversal." single ((url: ."https://github.com/joeheyming/requirejs-emacs") (:keywords  " javascript" " requirejs"))])(request-deferred . [(20160509 641) ((request (0 2 0)) (deferred (0 3 1)) ) "Wrap request by deferred * lexicalbinding: t *" single ((url: ."https://github.com/tkf/emacs-request") (:keywords ""))])(request . [(20160509 641) ((emacs (24)) (cl-lib (0 5)) ) "Compatible layer for URL  in Emacs * lexicalbinding: t *" single ((url: ."https://github.com/tkf/emacs-request") (:keywords ""))])(req-package . [(20160228 205) ((log4e (0 2 0)) (dash (2 7 0)) (ht (0)) (use-package (1 0)) ) "A usepackage wrapper for package runtime dependencies management" tar ((url: ."https://github.com/edvorg/req-package") (:keywords  " dotemacs startup speed config package"))])(repo . [(20160115 314) ((emacs (24 3)) ) "Running  from Emacs" single ((url: ."https://github.com/canatella/repo-el") (:keywords  " convenience"))])(replace-symbol . [(20160518 812)  nil  "Rename symbols in expressions or buffers" single ((url: ."https://github.com/bmastenbrook/replace-symbol-el") (:keywords ""))])(replace-pairs . [(20160207 2051) ((emacs (24 4)) ) "Queryreplace pairs of things * lexicalbinding: t *" single ((url: ."https://github.com/davidshepherd7/replace-pairs") (:keywords ""))])(replace-from-region . [(20150407 829)  nil  "Filename:" single ((url: ."https://github.com/rubikitch/replace-from-region") (:keywords  " replace" " search" " region"))])(repl-toggle . [(20160119 2021) ((fullframe (0 0 5)) ) "Switch to/from repl buffer for current majormode" single ((url: ."https://github.com/tomterl/repl-toggle") (:keywords  " repl" " buffers" " toggle"))])(repeatable-motion . [(20150630 212) ((emacs (24)) ) "Make repeatable versions of motions" tar ((url: ."https://github.com/willghatch/emacs-repeatable-motion") (:keywords  " motion repeatable"))])(remark-mode . [(20151005 55) ((markdown-mode (2 0)) ) "Major mode for the remark slideshow tool" single ((url: ."https://github.com/torgeir/remark-mode.el") (:keywords  " remark" " slideshow" " markdown"))])(relax . [(20131030 534) ((json (1 2)) ) "For browsing and interacting with CouchDB" single ((url: ."https://github.com/technomancy/relax.el") (:keywords  " database http"))])(relative-line-numbers . [(20151007 546) ((emacs (24)) ) "Display ative line numbers on the margin  * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/relative-line-numbers") (:keywords ""))])(relative-buffers . [(20160222 323) ((f (0 16 2)) (dash (2 6 0)) (s (1 9 0)) (cl-lib (0 5)) ) "Emacs buffers naming convention" single ((url: ."https://github.com/proofit404/relative-buffers") (:keywords ""))])(register-channel . [(20150514 1159)  nil  "Jump around fast using registers" single ((url: ."https://github.com/YangZhao11/register-channel") (:keywords  " convenience"))])(region-state . [(20151128 1838)  nil  "Show the number of chars/lines or rows/columns in the region  * lexicalbinding: t *" tar ((url: ."https://github.com/xuchunyang/region-state.el") (:keywords  " convenience"))])(region-bindings-mode . [(20140408 614)  nil  "Enable custom bindings when mark is active." single ((url: ."https://github.com/fgallina/region-bindings-mode") (:keywords  " convenience"))])(regex-tool . [(20131105 634)  nil  "A regular expression evaluation tool for programmers" single ((url: ."https://github.com/jwiegley/regex-tool") (:keywords  " regex languages programming development"))])(regex-dsl . [(20110503 1350)  nil  "lisp syntax for regexps" single ((url: ."https://github.com/alk/elisp-regex-dsl") (:keywords  " "))])(refheap . [(20140903 502) ((json (1 2)) ) "A library for pasting to https://.com" single ((url: ."https://github.com/Raynes/refheap.el") (:keywords ""))])(redtick . [(20160517 516) ((emacs (24)) ) "Smallest pomodoro timer (1 char)" single ((url: ."https://github.com/ferfebles/redtick") (:keywords  " pomodoro" " timer"))])(redpen-paragraph . [(20160512 2122) ((json (1 4)) (emacs (24)) (cl-lib (0 5)) ) "RedPen interface. * lexicalbinding: t *" tar ((url: ."https://github.com/karronoli/redpen-paragraph.el") (:keywords  " document" " proofreading" " help"))])(redis . [(20150601 348) ((emacs (24)) (cl-lib (0 5)) ) "Redis integration                   * lexicalbinding: t *" tar ((url: ."https://github.com/emacs-pe/redis.el") (:keywords  " convenience"))])(recursive-narrow . [(20140903 127)  nil  "narrowtoregion that operates recursiy" single ((url: ."https://github.com/nflath/recursive-narrow") (:keywords ""))])(rectangle-utils . [(20160428 124) ((emacs (24)) (cl-lib (0 5)) ) "Some useful rectangle functions." single ((url: ."https://github.com/thierryvolpiatto/rectangle-utils") (:keywords ""))])(rect+ . [(20150621 844)  nil  "+  Extensions to" tar ((url: ."https://github.com/mhayashi1120/Emacs-rectplus") (:keywords  " extensions" " data" " tools"))])(recover-buffers . [(20150812 1509)  nil  "revisit all buffers from an autosave file" tar ((url: ."https://github.com/tripleee/recover-buffers") (:keywords ""))])(recompile-on-save . [(20151126 2246) ((dash (1 1 0)) (cl-lib (0 5)) ) "Trigger recompilation on file save." single ((url: ."https://github.com/maio/recompile-on-save.el") (:keywords  " convenience files processes tools"))])(rebox2 . [(20121113 2100)  nil  "Filename:" single ((url: ."https://github.com/lewang/rebox2") (:keywords ""))])(realgud . [(20160305 1757) ((list-utils (0 4 2)) (load-relative (1 0)) (test-simple (1 0)) (loc-changes (1 1)) ) "A modular frontend for interacting with external debuggers" tar ((url: ."https://github.com/rocky/emacs-dbgr") (:keywords ""))])(real-auto-save . [(20150707 211)  nil  "Automatically save your all your buffers/files at regular intervals." single ((url: ."https://github.com/chillaranand/real-auto-save") (:keywords ""))])(readline-complete . [(20150708 2237)  nil  "offers completions in sl mode" single ((url: ."https://github.com/monsanto/readline-complete.el") (:keywords ""))])(readability . [(20141125 1244) ((ov (1 0)) (oauth (1 4)) (emacs (24 3)) ) "Read articles from Readability in Emacs * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/ShingoFukuyama/emacs-readability") (:keywords  " readability oauth"))])(react-snippets . [(20151105 740) ((yasnippet (0 7 0)) ) "Yasnippets for React" tar ((url: ."https://github.com/johnmastro/react-snippets.el") (:keywords  " snippets"))])(rdp . [(20120929 954)  nil  "Recursive Descent Parser library" single ((url: ."https://github.com/skeeto/rdp") (:keywords ""))])(rdf-prefix . [(20160518 223)  nil  "Prefix lookup for RDF" single ((url: ."https://github.com/simenheg/rdf-prefix") (:keywords  " convenience" " abbrev"))])(rcirc-notify . [(20150220 604)  nil  "libnotify popups" single ((url: ."https://github.com/nicferrier/rcirc-notify") (:keywords  " lisp" " rcirc" " irc" " notify" " growl"))])(rcirc-groups . [(20160115 2031)  nil  "an emacs buffer in  major mode" single ((url: ."https://github.com/dimitri/rcirc-groups") (:keywords  " comm" " convenience"))])(rcirc-color . [(20151130 2358)  nil  "color nicks" single ((url: ."https://github.com/kensanata/rcirc-color") (:keywords  " comm"))])(rcirc-alertify . [(20140407 919) ((alert (20140406 1353)) ) "Cross platform notifications for rcirc" single ((url: ."https://github.com/fgallina/rcirc-alertify") (:keywords  " comm" " convenience"))])(rcirc-alert . [(20141127 1847)  nil  "Configurable alert messages on top of RCIRC" tar ((url: ."https://github.com/csantosb/rcirc-alert") (:keywords  " lisp" " rcirc" " irc" " alert" " awesome"))])(rbt . [(20160130 251) ((magit (20160128 1201)) (popup (0 5 3)) ) "Integrate reviewboard with emacs." single ((url: ."https://github.com/joeheyming/rbt.el") (:keywords  " reviewboard" " rbt"))])(rbenv . [(20141120 1549)  nil  "Emacs integration for" single ((url: ."https://github.com/senny/rbenv.el") (:keywords  " ruby rbenv"))])(rats . [(20160316 245) ((s (1 10 0)) (cl-lib (0 5)) (go-mode (1 3 1)) ) "Rapid testing suite for Go" single ((url: ."https://github.com/ane/rats.el") (:keywords  " go"))])(rase . [(20120929 445)  nil  "Run At Sun Event daemon" single ((url: ."https://github.com/m00natic/rase") (:keywords ""))])(ranger . [(20160518 2200) ((emacs (24 4)) ) "Make dired more like" single ((url: ."https://github.com/ralesi/ranger.el") (:keywords  " files" " convenience"))])(random-splash-image . [(20151003 930)  nil  "Randomly sets splash image to *GNU Emacs* buffer on startup." single ((url: ."https://github.com/kakakaya/random-splash-image") (:keywords  " games"))])(rand-theme . [(20151220 735) ((cl-lib (0 5)) ) "Filename:" single ((url: ."https://github.com/gopar/rand-theme") (:keywords ""))])(rally-mode . [(20160327 56) ((popwin (1 0 0)) ) "a mode to interact with the Rally Software web site." single ((url: ."https://github.com/seanleblanc/rally-mode") (:keywords  " Rally" " CA" " agile"))])(rake . [(20150831 1702) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5)) ) "Run  commands" tar ((url: ."https://github.com/asok/rake") (:keywords  "          rake" " ruby"))])(rainbow-identifiers . [(20141102 2326) ((emacs (24)) ) "Highlight identifiers according to their names * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/rainbow-identifiers") (:keywords ""))])(rainbow-delimiters . [(20160501 1458)  nil  "Highlight brackets according to their depth * lexicalbinding: t *" tar ((url: ."https://github.com/Fanael/rainbow-delimiters") (:keywords  " faces" " convenience" " lisp" " tools"))])(rainbow-blocks . [(20140307 233)  nil  "Block syntax highlighting for lisp code" single ((url: ."https://github.com/istib/rainbow-blocks") (:keywords ""))])(railscasts-theme . [(20150219 2325)  nil  "Railscasts color theme for GNU Emacs." single ((url: ."https://github.com/mikenichols/railscasts-theme") (:keywords  " railscasts color theme"))])(rails-new . [(20141221 1652)  nil  "Handy emacs command for generating rails application." single ((url: ."https://github.com/cheunghy/rails-new") (:keywords  " rails" " ruby"))])(rails-log-mode . [(20140408 1225)  nil  "Major mode for viewing Rails log files" single ((url: ."https://github.com/ananthakumaran/rails-log-mode") (:keywords  " Rails" " log"))])(railgun . [(20121017 1357)  nil  "be proled to the right place by the power of magnets" single ((url: ."https://github.com/mbriggs/railgun.el") (:keywords  " navigation rails"))])(racket-mode . [(20160215 243) ((faceup (0 0 2)) (s (1 9 0)) (emacs (24 3)) ) "Major mode for Racket language." tar ((url: ."https://github.com/greghendershott/racket-mode") (:keywords ""))])(racer . [(20160422 158) ((dash (2 11 0)) (s (1 10 0)) (emacs (24 3)) (rust-mode (0 2 0)) ) "Rust completion and code navigation via" single ((url: ."https://github.com/racer-rust/emacs-racer") (:keywords  " abbrev" " convenience" " matching" " rust" " tools"))])(r-autoyas . [(20150903 22) ((yasnippet (0 8 0)) (ess (0)) ) "Filename:" single ((url: ."https://github.com/mattfidler/r-autoyas.el") (:keywords  " R yasnippet"))])(quiet . [(20160508 2056)  nil  "disconnect from the online world for a while" single ((url: ."https://github.com/zzkt/quiet") (:keywords  " quiet" " distraction" " network" " detachment" " offline"))])(quickrun . [(20160307 1918) ((emacs (24)) (cl-lib (0 5)) ) "Run commands quickly * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-quickrun") (:keywords ""))])(quickref . [(20160327 36) ((dash (1 0 3)) (s (1 0 0)) ) "Display evant notestof in the echo area" single ((url: ."https://github.com/pd/quickref.el") (:keywords ""))])(quick-preview . [(20150829 1239)  nil  "quick preview using GNOME sushi, gloobus or quick look" single ((url: ."https://github.com/myuhe/quick-preview.el") (:keywords  " files" "hypermedia"))])(quick-buffer-switch . [(20151008 608)  nil  "Quick switch to file or dir buffers." single ((url: ."https://github.com/renard/quick-buffer-switch") (:keywords  " emacs" " configuration"))])(quelpa-use-package . [(20150805 1828) ((emacs (24 3)) (use-package (2)) (quelpa (0)) ) "qpa handler for usepackage" single ((url: ."https://github.com/quelpa/quelpa-use-package") (:keywords  " package management elpa use-package"))])(quelpa . [(20160327 447) ((emacs (24 3)) (package-build (0)) ) "Emacs Lisp packages built directly from source" tar ((url: ."https://github.com/quelpa/quelpa") (:keywords  " package management build source elpa"))])(quasi-monochrome-theme . [(20160223 23)  nil  "High contrast quasi monochrome color theme" single ((url: ."https://github.com/lbolla/emacs-quasi-monochrome") (:keywords  " color-theme" " monochrome" " high contrast"))])(quack . [(20160410 1707)  nil  "(defconst copyright    "Copyright (C) 20022012, 2016 Neil Van Dyke")" single ((url: ."https://github.com/emacsmirror/quack") (:keywords ""))])(qml-mode . [(20160108 2304)  nil  "Major mode for editing QT Declarative (QML) code." single ((url: ."https://github.com/coldnew/qml-mode") (:keywords  " qml" " qt" " qt declarative"))])(qiita . [(20140727 748) ((markdown-mode (2 0)) (helm (1 5 9)) ) "Qiita API Library for emacs" single ((url: ."https://github.com/gongo/qiita-el") (:keywords  " qiita"))])(pyvenv . [(20160413 1556)  nil  "Python virtual environment interface * lexicalbinding: t *" single ((url: ."https://github.com/jorgenschaefer/pyvenv") (:keywords  " Python" " Virtualenv" " Tools"))])(pythonic . [(20160222 323) ((f (0 17 2)) (dash (2 11)) (s (1 9)) (emacs (24)) (cl-lib (0 5)) ) "Utility functions for writing  emacs package.  * lexicalbinding: t *" single ((url: ."https://github.com/proofit404/pythonic") (:keywords ""))])(python3-info . [(20151117 1431)  nil  "Python 3 info manual for Emacs" single ((url: ."https://github.com/dvhansen/python3-info") (:keywords ""))])(python-x . [(20160313 2136)  nil  "python extras for interactive evaluation  * lexicalbinding: t *" tar ((url: ."https://github.com/wavexx/python-x.el") (:keywords ""))])(python-info . [(20151229 252)  nil  "Python info manual for Emacs" single ((url: ."https://github.com/Wilfred/python-info") (:keywords ""))])(python-environment . [(20150310 1653) ((deferred (0 3 1)) ) "virtualenv API for Emacs Lisp" tar ((url: ."https://github.com/tkf/emacs-python-environment") (:keywords  " applications" " tools"))])(python-docstring . [(20160513 1713)  nil  "Smart Python docstring formatting" tar ((url: ."https://github.com/glyph/python-docstring-mode") (:keywords ""))])(python-django . [(20150822 1204)  nil  "A Jazzy package for managing Django projects" single ((url: ."https://github.com/fgallina/python-django.el") (:keywords  " languages"))])(python-cell . [(20131030 716)  nil  "Support for MATLABlike ls in python mode" single ((url: ."https://github.com/thisch/python-cell.el") (:keywords  " python" " matlab" " cell"))])(pytest . [(20160330 2147) ((s (1 9 0)) ) "Easy Python test running in Emacs" single ((url: ."https://github.com/ionrock/pytest-el") (:keywords  " pytest python testing"))])(pyimpsort . [(20160130 1253) ((emacs (24 3)) ) "Sort python imports. * lexicalbinding: t *" tar ((url: ."https://github.com/emacs-pe/pyimpsort.el") (:keywords  " convenience"))])(pyfmt . [(20150525 2213)  nil  "Emacs interface to" single ((url: ."https://github.com/aheaume/pyfmt.el") (:keywords  " tools"))])(pyenv-mode-auto . [(20160127 421) ((f (0 17 0)) (s (1 11 0)) (pyenv-mode (0 1 0)) ) "Automatically activates pyenv version if .pythonversion file exists." single ((url: ."https://github.com/ssbb/pyenv-mode-auto") (:keywords  " python" " pyenv"))])(pyenv-mode . [(20160222 323) ((pythonic (0 1 0)) ) "Integrate pyenv with pythonmode" single ((url: ."https://github.com/proofit404/pyenv-mode") (:keywords ""))])(pydoc . [(20160404 833)  nil  "functional, syntax highlighted  navigation" single ((url: ."https://github.com/statmobile/pydoc") (:keywords  " pydoc" " python"))])(pycoverage . [(20160325 912) ((emacs (24 3)) ) "Support for coverage stats on Python 2.X and 3  * lexicalbinding: t *" tar ((url: ."https://github.com/mattharrison/pycoverage.el") (:keywords  " project" " convenience"))])(pycarddavel . [(20151209 2230) ((emacs (24 0)) (helm (1 7 0)) ) "Integrate pycarddav * lexicalbinding: t *" tar ((url: ."https://github.com/DamienCassou/pycarddavel") (:keywords  " helm pyccarddav carddav message mu4e contacts"))])(py-yapf . [(20160101 2012)  nil  "Use yapf to beautify a Python buffer" tar ((url: ."https://github.com/paetzke/py-yapf.el") (:keywords ""))])(py-test . [(20151117 1422) ((f (0 17)) (dash (2 9 0)) (emacs (24 4)) ) "A test runner for Python code." single ((url: ."https://github.com/Bogdanp/py-test.el") (:keywords  " python testing py.test"))])(py-smart-operator . [(20150825 1010) ((s (1 9 0)) ) "smartoperator for pythonmode" single ((url: ."https://github.com/rmuslimov/py-smart-operator") (:keywords  "   python" " convenience" " smart-operator"))])(py-isort . [(20150422 2339)  nil  "Use isort to sort the imports in a Python buffer" single ((url: ."https://github.com/paetzke/py-isort.el") (:keywords ""))])(py-import-check . [(20151210 900)  nil  "Finds the unused python imports using importchecker" single ((url: ."https://github.com/psibi/emacs-py-import-check") (:keywords  " python" " import" " check"))])(py-gnitset . [(20140225 1210)  nil  "Run your Python tests any way you'd like" single ((url: ."https://github.com/quodlibetor/py-gnitset") (:keywords ""))])(py-autopep8 . [(20151231 2214)  nil  "Use autopep8 to beautify a Python buffer" single ((url: ."https://github.com/paetzke/py-autopep8.el") (:keywords ""))])(px . [(20141006 2052)  nil  "preview inline latex in any mode" single ((url: ."https://github.com/aaptel/preview-latex") (:keywords ""))])(pushbullet . [(20140809 2032) ((grapnel (0 5 2)) (json (1 2)) ) "Emacs client for the PushBullet Android app" tar ((url: ."https://github.com/theanalyst/revolver") (:keywords  " convenience"))])(purty-mode . [(20151125 1041)  nil  "Say prettyprint greek letters, mathematical symbols, or anythingse." single ((url: ."https://github.com/jcatw/purty-mode") (:keywords ""))])(purple-haze-theme . [(20141015 1029) ((emacs (24 0)) ) "an overtly purple color theme for Emacs24." single ((url: ."https://github.com/jasonm23/emacs-purple-haze-theme") (:keywords ""))])(purescript-mode . [(20150331 637)  nil  "A PureScript editing mode    * coding: utf8 *" tar ((url: ."https://github.com/dysinger/purescript-mode") (:keywords  " faces files PureScript"))])(puppet-mode . [(20160417 36) ((pkg-info (0 4)) (emacs (24 1)) ) "Major mode for Puppet manifests  * lexicalbinding: t *" single ((url: ."https://github.com/lunaryorn/puppet-mode") (:keywords  " languages"))])(pungi . [(20151005 145)  nil  "Integrates jedi with virtualenv and buildout python environments" single ((url: ."https://github.com/mgrbyte/pungi") (:keywords  " convenience"))])(puml-mode . [(20160507 1350)  nil  "Filename:" single ((url: ."https://github.com/skuro/puml-mode") (:keywords  " uml plantuml ascii"))])(pt . [(20160120 17)  nil  "A frontend for , The Platinum Searcher." single ((url: ."https://github.com/bling/pt.el") (:keywords  " pt ack ag grep search"))])(psysh . [(20160509 2208)  nil  "PsySH, PHP interactive sl (REPL) * lexicalbinding: t *" single ((url: ."https://github.com/zonuexe/psysh.el") (:keywords  " process" " php"))])(psvn . [(20151104 242)  nil  "Subversion interface for emacs" single ((url: ."https://github.com/emacsmirror/psvn") (:keywords ""))])(psession . [(20160515 1459) ((emacs (24)) (cl-lib (0 5)) ) "Persistent save ofisp objects. * lexicalbinding: t *" single ((url: ."https://github.com/thierryvolpiatto/psession") (:keywords ""))])(psci . [(20150329 301) ((f (0 17 1)) (dash (2 9 0)) (s (1 9 0)) (purescript-mode (13 10)) (deferred (0 3 2)) ) "Major mode for purescript repl" tar ((url: ."https://github.com/ardumont/emacs-psci") (:keywords  " purescript psci repl major mode"))])(psc-ide . [(20160519 502) ((dash (2 11 0)) (s (1 10 0)) (company (0 8 7)) (cl-lib (0 5)) ) "Copyright (C) 2015 The emacs authors" tar ((url: ."https://github.com/epost/psc-ide-emacs") (:keywords ""))])(propfont-mixed . [(20150114 611) ((emacs (24)) (cl-lib (0 5)) ) "Use proportional fonts with spacebased indentation. * lexicalbinding: t *" single ((url: ."https://github.com/ikirill/propfont-mixed") (:keywords  " faces"))])(prop-menu . [(20150728 1918) ((emacs (24 3)) (cl-lib (0 5)) ) "Create and display a context menu based on text and overlay properties  * lexicalbinding: t *" tar ((url: ."https://github.com/david-christiansen/prop-menu-el") (:keywords  " convenience"))])(prompt-text . [(20160112 1525)  nil  "Various information in minibuffer prompt" single ((url: ."https://github.com/10sr/prompt-text-el") (:keywords  " utility minibuffer"))])(projekt . [(20150324 1648) ((emacs (24)) ) "some kind of staging for CVS * lexicalbinding: t *" single ((url: ."https://github.com/tekai/projekt") (:keywords ""))])(projector . [(20151202 441) ((alert (1 1)) (cl-lib (0 5)) (projectile (0 11 0)) ) "Lightweight library for managing projectaware sl and command buffers" single ((url: ."https://github.com/waymondo/projector.el") (:keywords ""))])(projectile-speedbar . [(20150815 126) ((projectile (0 11 0)) ) "projectile integration for speedbar" single ((url: ."https://github.com/anshulverma/projectile-speedbar") (:keywords  " project" " convenience" " speedbar" " projectile"))])(projectile-sift . [(20160107 1815) ((sift (0 2 0)) (projectile (0 13 0)) ) "Run a sift with Projectile" single ((url: ."https://github.com/nlamirault/sift.el") (:keywords ""))])(projectile-rails . [(20160509 1751) ((f (0 13 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (emacs (24 3)) (rake (0 3 2)) (projectile (0 12 0)) ) "Minor mode for Rails projects based on projectilemode" tar ((url: ."https://github.com/asok/projectile-rails") (:keywords  "          rails" " projectile"))])(projectile-hanami . [(20160506 1614) ((inf-ruby (2 2 6)) (emacs (24 3)) (rake (0 3 2)) (projectile (0 12 0)) ) "Minor mode for Hanami projects based on projectile" single ((url: ."https://github.com/avdgaag/projectile-hanami") (:keywords  "         hanami" " ruby" " projectile"))])(projectile-direnv . [(20160306 2228) ((dash (2 12 0)) (s (1 11 0)) (emacs (24)) (projectile (0 13 0)) ) "Set environment variables from .envrc * lexicalbinding: t *" single ((url: ."https://github.com/christianromney/projectile-direnv") (:keywords  " convenience"))])(projectile-codesearch . [(20160111 2255) ((projectile (20150405 126)) (codesearch (20141019 625)) ) "Integration of codesearch into projectile" single ((url: ."https://github.com/abingham/codesearch.el") (:keywords  " tools" " development" " search"))])(projectile . [(20160508 954) ((dash (2 11 0)) (pkg-info (0 4)) ) "Manage and navigate projects in Emacs easily * lexicalbinding: t *" single ((url: ."https://github.com/bbatsov/projectile") (:keywords  " project" " convenience"))])(project-persist-drawer . [(20151108 2022)  nil  "Use a project drawer with projectpersist." single ((url: ."https://github.com/rdallasgray/project-persist-drawer") (:keywords  " defaults"))])(project-persist . [(20150706 121)  nil  "A minor mode to allow loading and saving of project settings." single ((url: ."https://github.com/rdallasgray/project-persist") (:keywords  " project" " persistence"))])(project-explorer . [(20150504 814) ((es-lib (0 3)) (emacs (24)) (es-windows (0 1)) (cl-lib (0 3)) ) "A project explorer sidebar * lexicalbinding: t *" tar ((url: ."https://github.com/sabof/project-explorer") (:keywords ""))])(programmer-dvorak . [(20150427 955)  nil  "Input method for Programmer Dvorak." single ((url: ."https://github.com/yangchenyun/programmer-dvorak") (:keywords  " dvorak programmer-dvorak input-method"))])(prognth . [(20130921 159)  nil  "Extend prog1 to arbitrary index" single ((url: ."https://github.com/Fuco1/prognth") (:keywords  " lisp"))])(professional-theme . [(20150315 1900)  nil  "Filename:" single ((url: ."https://github.com/juanjux/emacs-professional-theme") (:keywords  " theme" " light" " professional"))])(prodigy . [(20160429 1454) ((f (0 14 0)) (dash (2 4 0)) (s (1 8 0)) (emacs (24)) ) "Manage external services from within Emacs * lexicalbinding: t *" single ((url: ."https://github.com/rejeep/prodigy.el") (:keywords ""))])(processing-snippets . [(20151213 754) ((yasnippet (0 8 0)) ) "Snippets for the Processing major mode" tar ((url: ."https://github.com/ptrv/processing2-emacs") (:keywords  " snippets"))])(processing-mode . [(20151213 754)  nil  "Major mode for Processing 2.0" single ((url: ."https://github.com/ptrv/processing2-emacs") (:keywords  " languages" " snippets"))])(proc-net . [(20130415 815)  nil  "network process tools" single ((url: ."https://github.com/nicferrier/emacs-proc-net") (:keywords  " processes"))])(private-diary . [(20151226 433) ((emacs (24 0)) ) "maintain a private diary in Emacs" single ((url: ."https://github.com/cacology/private-diary") (:keywords  " diary" " encryption"))])(private . [(20150122 958) ((aes (0 6)) ) "take care of your  configuration files." single ((url: ."https://github.com/cheunghy/private") (:keywords  " private" " configuration" " backup" " recover"))])(pretty-symbols . [(20140930 2226)  nil  "Draw tokens as Unicode glyphs." single ((url: ."https://github.com/drothlis/pretty-symbols") (:keywords  " faces"))])(pretty-sha-path . [(20141107 2020)  nil  "Prettify Guix/Nix store paths" single ((url: ."https://github.com/alezost/pretty-sha-path.el") (:keywords  " faces convenience"))])(pretty-mode . [(20160416 2234)  nil  "Redisplay parts of the buffer as pretty symbols." single ((url: ."https://github.com/akatov/pretty-mode") (:keywords  " pretty" " unicode" " symbols"))])(preseed-generic-mode . [(20150121 616)  nil  "Debian preseed file major mode" single ((url: ."https://github.com/suntong/preseed-generic-mode") (:keywords ""))])(preproc-font-lock . [(20151108 418)  nil  "Highlight Cstyle preprocessor directives." single ((url: ."https://github.com/Lindydancer/preproc-font-lock") (:keywords  " c" " languages" " faces"))])(ppd-sr-speedbar . [(20151108 2024)  nil  "Sr Speedbar Adaptor for projectpersistdrawer" single ((url: ."https://github.com/rdallasgray/ppd-sr-speedbar") (:keywords  " projects" " drawer"))])(powershell . [(20160211 1058) ((emacs (24)) ) "Mode for editing Powersl scripts  * lexicalbinding: t *" single ((url: ."https://github.com/jschaf/powershell.el") (:keywords  " powershell" " languages"))])(powerline-evil . [(20151112 2310) ((powerline (2 3)) (evil (1 0 8)) ) "Utilities for better Evil support for Powerline" tar ((url: ."https://github.com/raugturi/powerline-evil") (:keywords  " evil" " mode-line" " powerline"))])(powerline . [(20160505 1455) ((cl-lib (0 2)) ) "Rewrite of Powerline" tar ((url: ."https://github.com/milkypostman/powerline") (:keywords  " mode-line"))])(pow . [(20151222 2209) ((emacs (24)) (cl-lib (0 5)) ) "(http://.cx/) manager for emacs" tar ((url: ."https://github.com/yukihr/emacs-pow") (:keywords  " develop" " web" " pow"))])(pov-mode . [(20120825 2216)  nil  "major mode for Povray scene files" tar ((url: ."https://github.com/melmothx/pov-mode") (:keywords  " pov" " povray"))])(pos-tip . [(20150318 2313)  nil  "Show tooltip at point * coding: utf8 *" single ((url: ."https://github.com/pitkali/pos-tip") (:keywords  " Tooltip"))])(portage-navi . [(20141208 2155) ((concurrent (0 3 1)) (ctable (0 1 2)) ) "portage viewer" single ((url: ."https://github.com/kiwanami/emacs-portage-navi") (:keywords  " tools" " gentoo"))])(popwin . [(20150315 2100)  nil  "Popup Window Manager." single ((url: ."https://github.com/m2ym/popwin-el") (:keywords  " convenience"))])(popup-switcher . [(20160518 1839) ((popup (0 5 3)) (cl-lib (0 3)) ) "switch to other buffers and files via popup. * lexicalbinding: t *" single ((url: ."https://github.com/kostafey/popup-switcher") (:keywords  " popup" " switch" " buffers" " functions"))])(popup-kill-ring . [(20151123 1307) ((popup (0 4)) (pos-tip (0 4)) ) "interactiy insert item from killring" single ((url: ."https://github.com/waymondo/popup-kill-ring") (:keywords  " popup" " kill-ring" " pos-tip"))])(popup-imenu . [(20160409 2010) ((dash (2 12 1)) (flx-ido (0 6 1)) (popup (0 5 3)) ) "imenu index popup" single ((url: ."https://github.com/ancane/popup-imenu") (:keywords  " popup" " imenu"))])(popup-complete . [(20150311 2302) ((popup (0 5 0)) ) "completion with popup" single ((url: ."https://github.com/syohex/emacs-popup-complete") (:keywords ""))])(popup . [(20160410 1233) ((cl-lib (0 5)) ) "Visual Popup User Interface" single ((url: ."https://github.com/auto-complete/popup-el") (:keywords  " lisp"))])(poporg . [(20150604 947)  nil  "Pop a comment or string to an empty buffer for text editing" single ((url: ."https://github.com/QBobWatson/poporg") (:keywords  " outlines" " tools"))])(pophint . [(20151001 135) ((log4e (0 2 0)) (yaxception (0 1)) (popup (0 5 0)) ) "Provide navigation using popup tips, like Firefox's Vimperator Hint Mode" tar ((url: ."https://github.com/aki2o/emacs-pophint") (:keywords  " popup"))])(ponylang-mode . [(20160511 2336) ((dash (2 10 0)) ) "Major mode for Pony code" tar ((url: ."https://github.com/SeanTAllen/ponylang-mode") (:keywords  " languages programming"))])(pony-snippets . [(20160205 1211) ((yasnippet (0 8 0)) ) "Yasnippets for Pony" single ((url: ."https://github.com/SeanTAllen/pony-snippets") (:keywords  " snippets" " pony"))])(pomodoro . [(20150717 146)  nil  "(http://www.technique.com)" single ((url: ."https://github.com/baudtack/pomodoro.el") (:keywords ""))])(polymode . [(20160507 443) ((emacs (24)) ) "Filename:" tar ((url: ."https://github.com/vspinu/polymode") (:keywords  " emacs"))])(pointback . [(20100210 2352)  nil  "Restore window points when returning to buffers" single ((url: ."https://github.com/emacsorphanage/pointback") (:keywords  " convenience"))])(point-stack . [(20141226 1310)  nil  "Back and forward navigation through buffer locations" single ((url: ."https://github.com/dgutov/point-stack") (:keywords ""))])(plur . [(20160504 1724) ((emacs (24 4)) ) "Easily search and replace multiple variants of a word  * lexicalbinding: t *" tar ((url: ."https://github.com/xuchunyang/plur") (:keywords ""))])(plsense-direx . [(20140521 408)  nil  "Perl Package Explorer" single ((url: ."https://github.com/aki2o/plsense-direx") (:keywords  " perl" " convenience"))])(plsense . [(20151104 2245) ((log4e (0 2 0)) (auto-complete (1 4 0)) (yaxception (0 2 0)) ) "provide interface for PlSense that is a deopment tool for Perl." single ((url: ."https://github.com/aki2o/emacs-plsense") (:keywords  " perl" " completion"))])(plim-mode . [(20140813 1839)  nil  "Major mode for editing Plim files" single ((url: ."https://github.com/dongweiming/plim-mode") (:keywords  " markup" " language"))])(plenv . [(20130707 1416)  nil  "A  wrapper for Emacs" single ((url: ."https://github.com/karupanerura/plenv.el") (:keywords  " Emacs" " Perl"))])(play-routes-mode . [(20160323 100)  nil  "Play Framework Routes File Support" single ((url: ."https://github.com/brocode/play-routes-mode") (:keywords  " play" " scala"))])(platformio-mode . [(20160329 629) ((projectile (0 13 0)) ) "PlatformIO integration" single ((url: ."https://github.com/ZachMassia/PlatformIO-Mode") (:keywords ""))])(plantuml-mode . [(20150601 1431)  nil  "Major mode for plantuml" single ((url: ."https://github.com/zwz/plantuml-mode") (:keywords  " uml ascii"))])(planet-theme . [(20160426 1158) ((emacs (24)) ) "A dark theme inspired by Gmail's 'Planets' theme of yore" single ((url: ."https://github.com/cmack/emacs-planet-theme") (:keywords  " themes"))])(plan9-theme . [(20160112 1123)  nil  "A color theme for Emacs based on Plan9" single ((url: ."https://github.com/john2x/plan9-theme.el") (:keywords ""))])(pkgbuild-mode . [(20151010 2236)  nil  "Interface to the ArchLinux package manager" single ((url: ."https://github.com/juergenhoetzel/pkgbuild-mode") (:keywords ""))])(pkg-info . [(20150517 1943) ((epl (0 8)) ) "Information about packages       * lexicalbinding: t *" single ((url: ."https://github.com/lunaryorn/pkg-info.el") (:keywords  " convenience"))])(pixiv-novel-mode . [(20160220 2221)  nil  "Major mode for pixiv no" single ((url: ."https://github.com/zonuexe/pixiv-novel-mode.el") (:keywords  " novel pixiv"))])(pixie-mode . [(20150302 1119) ((clojure-mode (3 0 1)) (inf-clojure (1 0 0)) ) "Major mode for Pixielang" single ((url: ."https://github.com/johnwalker/pixie-mode") (:keywords ""))])(pivotal-tracker . [(20151204 350)  nil  "Interact with Pivotal Tracker through its API" single ((url: ."https://github.com/jxa/pivotal-tracker") (:keywords ""))])(pip-requirements . [(20160201 126) ((dash (2 8 0)) ) "A major mode for editing pip requirements files." single ((url: ."https://github.com/Wilfred/pip-requirements.el") (:keywords ""))])(pinyinlib . [(20160506 348)  nil  "Convert first letter of Pinyin to Simplified/Traditional Chinese characters  * lexicalbinding: t *" single ((url: ."https://github.com/cute-jumper/pinyinlib.el") (:keywords  " extensions"))])(pinyin-search . [(20160515 1158) ((pinyinlib (0 1 0)) ) "Search Chinese by Pinyin" single ((url: ."https://github.com/xuchunyang/pinyin-search.el") (:keywords  " Chinese" " search"))])(pinot . [(20140212 426)  nil  "Emacs interface to search" tar ((url: ."https://github.com/tkf/emacs-pinot-search") (:keywords ""))])(pinboard-api . [(20140324 1948)  nil  "Rudimentary http://pinboard.in integration" tar ((url: ."https://github.com/danieroux/pinboard-api-el") (:keywords  " pinboard" " WWW"))])(pillar . [(20141113 211) ((makey (0 3)) ) "Major mode for editing Pillar files  * lexicalbinding: t *" tar ((url: ."https://github.com/pillar-markup/pillar-mode") (:keywords  " markup major-mode"))])(pig-snippets . [(20140618 158) ((yasnippet (0 8 0)) ) "Snippets for pigmode" tar ((url: ."https://github.com/motus/pig-mode") (:keywords  " snippets"))])(pig-mode . [(20140618 158)  nil  "Major mode for Pig files" single ((url: ."https://github.com/motus/pig-mode") (:keywords ""))])(picolisp-mode . [(20150516 1655)  nil  "Major mode for PicoLisp programming." tar ((url: ."https://github.com/flexibeast/picolisp-mode") (:keywords  " picolisp" " lisp" " programming"))])(pianobar . [(20120129 501)  nil  "thin wrapper for Pianobar, a Pandora Radio client" single ((url: ."https://github.com/agrif/pianobar.el") (:keywords ""))])(phpunit . [(20160512 2230) ((f (0 16 0)) (s (1 9 0)) (emacs (24 3)) (pkg-info (0 5)) ) "Launch PHP unit tests using" tar ((url: ."https://github.com/nlamirault/phpunit.el") (:keywords  " php" " tests" " phpunit"))])(phpcbf . [(20150302 2128) ((s (1 9 0)) ) "Format PHP code in Emacs using PHP_CodeSniffer's" single ((url: ."https://github.com/nishimaki10/emacs-phpcbf") (:keywords  " tools" " php"))])(php-refactor-mode . [(20160418 546)  nil  "Minor mode to quickly and say perform common refactorings" single ((url: ."https://github.com/keelerm84/php-refactor-mode.el") (:keywords  " php" " refactor"))])(php-mode . [(20160425 1527) ((emacs (24)) (cl-lib (0 5)) ) "Major mode for editing PHP code" tar ((url: ."https://github.com/ejmr/php-mode") (:keywords ""))])(php-eldoc . [(20140203 341)  nil  "doc backend for php" tar ((url: ."https://github.com/sabof/php-eldoc") (:keywords ""))])(php-boris-minor-mode . [(20140309 1704) ((php-boris (0 0 1)) (highlight (0)) ) "a minor mode to evaluate PHP code in the Boris repl" single ((url: ."https://github.com/steckerhalter/php-boris-minor-mode") (:keywords  " php repl eval"))])(php-boris . [(20160513 50)  nil  "Run boris php REPL" single ((url: ."https://github.com/tomterl/php-boris") (:keywords  " php" " commint" " repl" " boris"))])(php-auto-yasnippets . [(20141129 619) ((yasnippet (0 8 0)) (php-mode (1 11)) ) "Creates snippets for PHP functions" tar ((url: ."https://github.com/ejmr/php-auto-yasnippets") (:keywords ""))])(php+-mode . [(20131118 149)  nil  "php+mode  A better PHP mode with Zend Framework 1 support." tar ((url: ."https://github.com/echosa/phpplus-mode") (:keywords ""))])(phoenix-dark-pink-theme . [(20150407 1102)  nil  "Port of the Sublime Text 2 theme of the same name" single ((url: ."https://github.com/j0ni/phoenix-dark-pink") (:keywords ""))])(phoenix-dark-mono-theme . [(20130307 415)  nil  "Monochromatic version of the Phoenix theme" single ((url: ."https://github.com/j0ni/phoenix-dark-mono") (:keywords ""))])(phi-search-migemo . [(20150116 2106) ((migemo (1 9 1)) (phi-search (2 2 0)) ) "migemo extension for phisearch" single ((url: ."https://github.com/zk-phi/phi-search-migemo") (:keywords ""))])(phi-search-mc . [(20160324 2303) ((multiple-cursors (1 2 1)) (phi-search (2 0 0)) ) "multiplecursors extension for phisearch" single ((url: ."https://github.com/knu/phi-search-mc.el") (:keywords  " search" " cursors"))])(phi-search-dired . [(20150405 1514) ((phi-search (2 2 0)) ) "interactive filtering for dired powered by phisearch" single ((url: ."https://github.com/zk-phi/phi-search-dired") (:keywords ""))])(phi-search . [(20150807 1612)  nil  "another incremental search & replace, compatible with "multiplecursors"" tar ((url: ."https://github.com/zk-phi/phi-search") (:keywords ""))])(phi-rectangle . [(20151208 1454)  nil  "another rectanglemark command (rewrite of rectmark)" single ((url: ."https://github.com/zk-phi/phi-rectangle") (:keywords ""))])(phi-grep . [(20150212 2324) ((cl-lib (0 1)) ) "Interactiyeditable recursive grep implementation inisp" single ((url: ."https://github.com/zk-phi/phi-grep") (:keywords ""))])(phi-autopair . [(20150527 1723) ((paredit (20)) ) "another simpleminded autopair implementation" single ((url: ."https://github.com/zk-phi/phi-autopair") (:keywords ""))])(phabricator . [(20160510 2225) ((f (0 17 2)) (dash (1 0)) (s (1 10 0)) (emacs (24 4)) (projectile (0 13 0)) ) "Phabricator/Arcanist pers for Emacs." single ((url: ."https://github.com/ajtulloch/phabricator.el") (:keywords  " phabricator" " arcanist" " diffusion"))])(ph . [(20130313 237)  nil  "(require 'venture)" tar ((url: ."https://github.com/gromnitsky/ph") (:keywords ""))])(pgdevenv . [(20150106 636)  nil  "Manage your PostgreSQL deopment envs" tar ((url: ."https://github.com/dimitri/pgdevenv-el") (:keywords  " emacs postgresql development environment shell debug gdb"))])(pg . [(20130801 542)  nil  "Emacs Lisp interface to the PostgreSQL RDBMS" single ((url: ."https://github.com/cbbrowne/pg.el") (:keywords  " data comm database postgresql"))])(perspective . [(20160318 456) ((cl-lib (0 5)) ) "switch between named "s" of the editor" single ((url: ."https://github.com/nex3/perspective-el") (:keywords  " workspace" " convenience" " frames"))])(persp-projectile . [(20151220 2030) ((perspective (1 9)) (cl-lib (0 3)) (projectile (0 11 0)) ) "Perspective integration with Projectile" single ((url: ."https://github.com/bbatsov/persp-projectile") (:keywords  " project" " convenience"))])(persp-mode . [(20160514 1529)  nil  ""perspectives" shared among frames + save/load  bugs." single ((url: ."https://github.com/Bad-ptr/persp-mode.el") (:keywords  " perspectives" " session" " workspace" " persistence" " windows" " buffers" " convenience"))])(persistent-soft . [(20150224 253) ((pcache (0 3 1)) (list-utils (0 4 2)) ) "Persistent storage, returning nil on failure" single ((url: ."https://github.com/rolandwalker/persistent-soft") (:keywords  " data" " extensions"))])(persistent-scratch . [(20160405 15) ((emacs (24)) ) "Preserve the scratch buffer across Emacs sessions * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/persistent-scratch") (:keywords ""))])(persistent-overlays . [(20160427 321)  nil  "Minor mode to store ected overlays to be loaded later * coding: utf8 *" tar ((url: ."https://github.com/mneilly/Emacs-Persistent-Overlays") (:keywords  " overlays persistent"))])(perlbrew . [(20130127 1924)  nil  "A  wrapper for Emacs" single ((url: ."https://github.com/kentaro/perlbrew.el") (:keywords  " Emacs" " Perl"))])(perl6-mode . [(20160118 309) ((pkg-info (0 1)) (emacs (24 4)) ) "Major mode for editing Perl 6 code * lexicalbinding: t *" tar ((url: ."https://github.com/hinrik/perl6-mode") (:keywords  " languages"))])(perl-completion . [(20090528 1436)  nil  "minor mode provides useful features for editing perl codes" single ((url: ."https://github.com/imakado/perl-completion") (:keywords  " perl"))])(peg . [(20150708 1441)  nil  "Parsing Expression Grammars in Emacs Lisp" single ((url: ."https://github.com/ellerh/peg.el") (:keywords ""))])(peep-dired . [(20160414 606)  nil  "Peep at files in another window from dired buffers" single ((url: ."https://github.com/asok/peep-dired") (:keywords  " files" " convenience"))])(peek-mode . [(20130621 346) ((elnode (0 9 8 1)) ) "Serve buffers live over HTTP withnode backend" tar ((url: ."https://github.com/erikriverson/peek-mode") (:keywords ""))])(peacock-theme . [(20141116 2351) ((emacs (24 0)) ) "an Emacs 24 theme based on Peacock (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-peacock-theme") (:keywords ""))])(pdb-mode . [(20150129 151)  nil  "Major mode for editing Protein Data Bank files" single ((url: ."https://github.com/sixpi/pdb-mode") (:keywords  " data" " pdb"))])(pcsv . [(20150220 1931)  nil  "Parser of csv * lexicalbinding: t *" single ((url: ."https://github.com/mhayashi1120/Emacs-pcsv") (:keywords  " data"))])(pcre2el . [(20151219 429) ((emacs (24)) (cl-lib (0 3)) ) "regexp syntax converter * lexicalbinding: t *" single ((url: ."https://github.com/joddie/pcre2el") (:keywords ""))])(pcomplete-extension . [(20140605 47) ((emacs (24)) (cl-lib (0 5)) ) "additional completion for pcomplete * lexicalbinding: t *" single ((url: ."https://github.com/thierryvolpiatto/pcomplete-extension") (:keywords ""))])(pcmpl-pip . [(20141024 1648)  nil  "pcomplete for pip" single ((url: ."https://github.com/hiddenlotus/pcmpl-pip") (:keywords  " pcomplete" " pip" " python" " tools"))])(pcmpl-homebrew . [(20150507 952)  nil  "pcomplete for homebrew" single ((url: ."https://github.com/hiddenlotus/pcmpl-homebrew") (:keywords  " pcomplete" " homebrew" " tools"))])(pcmpl-git . [(20160111 1455)  nil  "pcomplete for git" tar ((url: ."https://github.com/leoliu/pcmpl-git-el") (:keywords  " tools"))])(pcmpl-args . [(20120912 1324)  nil  "Enhanced sl command completion    * lexicalbinding: t *" single ((url: ."https://github.com/JonWaltman/pcmpl-args.el") (:keywords  " abbrev completion convenience processes terminals unix"))])(pcache . [(20151109 2239) ((eieio (1 3)) ) "persistent caching for Emacs." single ((url: ."https://github.com/sigma/pcache") (:keywords ""))])(pc-bufsw . [(20150924 2019)  nil  "PC style quick buffer switcher" single ((url: ."https://github.com/ibukanov/pc-bufsw") (:keywords  " buffer"))])(pbcopy . [(20150225 1259)  nil  "Emacs Interface to" single ((url: ."https://github.com/emacsfodder/pbcopy.el") (:keywords  " mac" " osx" " pbcopy"))])(paxedit . [(20160103 1021) ((paredit (23)) (cl-lib (0 5)) ) "Structured, Context Driven LISP Editing and Refactoring" single ((url: ."https://github.com/promethial/paxedit") (:keywords  " lisp" " refactoring" " context"))])(pathify . [(20160426 31)  nil  "Symlink your scripts into a PATH directory" single ((url: ."https://github.com/alezost/pathify.el") (:keywords  " convenience"))])(path-headerline-mode . [(20140423 2132)  nil  "Filename:" single ((url: ."https://github.com/7696122/path-headerline-mode") (:keywords  " headerline"))])(pastelmac-theme . [(20151031 1036) ((emacs (24 1)) ) "a soothing theme with a pas color palette" single ((url: ."https://github.com/bmastenbrook/pastelmac-theme-el") (:keywords  " themes"))])(pastebin . [(20101126 402)  nil  "A simple interface to the www..com webservice" single ((url: ."https://github.com/nicferrier/elpastebin") (:keywords ""))])(password-vault . [(20160127 220) ((emacs (24)) (cl-lib (0 2)) ) "A Password manager for Emacs. * lexicalbinding: t *" single ((url: ."https://github.com/PuercoPop/password-vault") (:keywords  " password" " productivity"))])(password-generator . [(20150223 440)  nil  "Password generator for humans. Good, Bad, Phonetic passwords included." single ((url: ."https://github.com/zargener/emacs-password-genarator") (:keywords ""))])(passthword . [(20141201 1723) ((cl-lib (0 5)) ) "Simple password manager" single ((url: ."https://github.com/pidu/passthword") (:keywords ""))])(pass . [(20160214 1835) ((f (0 17)) (emacs (24)) (password-store (0 1)) ) "Major mode for wordstore * lexicalbinding: t *" tar ((url: ."https://github.com/NicolasPetton/pass") (:keywords  " password-store" " password" " keychain"))])(parsebib . [(20151006 1732) ((emacs (24 3)) ) "A library for parsing bib files" single ((url: ."https://github.com/joostkremers/parsebib") (:keywords  " text bibtex"))])(parse-csv . [(20160513 123)  nil  "Parse strings with CSV fds into sexpressions" single ((url: ."https://github.com/mrc/el-csv") (:keywords  " csv"))])(parent-mode . [(20150825 700)  nil  "get major mode's parent modes" tar ((url: ."https://github.com/Fanael/parent-mode") (:keywords ""))])(paren-face . [(20160424 1935)  nil  "a face for parentheses in lisp modes" single ((url: ."https://github.com/tarsius/paren-face") (:keywords ""))])(paren-completer . [(20160501 1852) ((emacs (24 3)) ) "Automatically, language agnostically, fill in imiters.  * lexicalbinding: t *" single ((url: ."https://github.com/MatthewBregg/paren-completer") (:keywords  " convenience"))])(paredit-menu . [(20160129 133) ((paredit (25)) ) "Adds a menu to paredit as memory aid" single ((url: ."https://github.com/phillord/paredit-menu") (:keywords  " paredit"))])(paredit-everywhere . [(20150822 1244) ((paredit (22)) ) "Enable some paredit features in nonlisp buffers" single ((url: ."https://github.com/purcell/paredit-everywhere") (:keywords  " languages" " convenience"))])(paradox . [(20160324 310) ((spinner (1 4)) (emacs (24 4)) (seq (1 7)) (hydra (0 13 2)) (let-alist (1 0 3)) ) "A modern Packages Menu. Colored, with package ratings, and customizable. * lexicalbinding:t *" tar ((url: ."https://github.com/Malabarba/paradox") (:keywords  " package packages"))])(paper-theme . [(20160101 132) ((emacs (24)) (hexrgb (0)) ) "A minimal Emacs colour theme. * lexicalbinding: t *" single ((url: ."https://github.com/cadadr/paper-theme") (:keywords  " theme paper"))])(pangu-spacing . [(20160223 1036)  nil  "Minormode to add space between Chinese and English characters." single ((url: ."https://github.com/coldnew/pangu-spacing") (:keywords ""))])(pandoc-mode . [(20160406 1449) ((dash (2 10 0)) (hydra (0 10 0)) ) "Minor mode for interacting with Pandoc  * lexicalbinding: t *" tar ((url: ."https://github.com/joostkremers/pandoc-mode") (:keywords  " text" " pandoc"))])(pallet . [(20150512 1502)  nil  "Manage your packages with Cask." single ((url: ."https://github.com/rdallasgray/pallet") (:keywords  " elpa" " package"))])(palimpsest . [(20130802 355)  nil  "Various etion strategies when editing" single ((url: ."https://github.com/danielsz/Palimpsest") (:keywords ""))])(pager-default-keybindings . [(20130720 457) ((pager (1 0)) ) "Add the default keybindings suggested for pager" single ((url: ."https://github.com/nflath/pager-default-keybindings") (:keywords ""))])(pager . [(20100331 231)  nil  "windowsscroll commands" single ((url: ."https://github.com/emacsorphanage/pager") (:keywords ""))])(page-break-lines . [(20160110 1013)  nil  "Display ugly ^L page breaks as tidy horizontal lines" single ((url: ."https://github.com/purcell/page-break-lines") (:keywords  " convenience" " faces"))])(paganini-theme . [(20160516 1858) ((emacs (24 0)) ) "an Emacs 24 theme based on FireCode" single ((url: ."https://github.com/onurtemizkan/paganini") (:keywords ""))])(pacmacs . [(20160131 1632) ((f (0 18 0)) (dash (2 11 0)) (dash-functional (1 2 0)) (emacs (24 4)) (cl-lib (0 5)) ) "Pacman for Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/codingteam/pacmacs.el") (:keywords ""))])(packed . [(20160410 51) ((dash (2 12 1)) (emacs (24 3)) ) "package manager agnostic Emacs Lisp package utilities" single ((url: ."https://github.com/tarsius/packed") (:keywords  " compile" " convenience" " lisp" " package" " library"))])(package-utils . [(20160307 1720) ((epl (0 8)) (async (1 6)) ) "Extensions for package" single ((url: ."https://github.com/Silex/package-utils") (:keywords  " package" " convenience"))])(package-safe-delete . [(20150117 7) ((emacs (24)) ) "Say ete package packages * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/package-safe-delete") (:keywords ""))])(package-filter . [(20140523 1407)  nil  "special handling for package" single ((url: ."https://github.com/milkypostman/package-filter") (:keywords ""))])(package-build . [(20160519 412) ((cl-lib (0 5)) ) "Tools for assembling a package archive" single ((url: ."https://github.com/melpa/melpa") (:keywords  " tools"))])(package+ . [(20150320 555)  nil  "+  Extensions for the  library." single ((url: ."https://github.com/zenspider/package") (:keywords  " extensions" " tools"))])(pabbrev . [(20160321 501)  nil  "Predictive abbreviation expansion" single ((url: ."https://github.com/phillord/pabbrev") (:keywords ""))])(p4 . [(20150722 337)  nil  "Simple PerforceEmacs Integration" single ((url: ."https://github.com/gareth-rees/p4.el") (:keywords ""))])(ox-twiki . [(20160307 115) ((cl-lib (0 5)) (org (8)) ) "org Twiki and Foswiki export" single ((url: ."https://github.com/dfeich/org8-wikiexporters") (:keywords  " org"))])(ox-twbs . [(20160307 1458)  nil  "Bootstrap compatible HTML BackEnd for Org" single ((url: ."https://github.com/marsmining/ox-twbs") (:keywords  " org" " html" " publish" " twitter" " bootstrap"))])(ox-trac . [(20151103 155) ((org (8 0)) ) "Org Export Backend to Trac WikiFormat" single ((url: ."https://github.com/JalapenoGremlin/ox-trac") (:keywords  " org-mode trac"))])(ox-tiddly . [(20160307 115) ((cl-lib (0 5)) (org (8)) ) "org TiddlyWiki exporter" single ((url: ."https://github.com/dfeich/org8-wikiexporters") (:keywords  " org"))])(ox-textile . [(20151115 1225) ((org (8 1)) ) "Textile BackEnd for Org Export Engine" single ((url: ."https://github.com/yashi/org-textile") (:keywords  " org" " textile"))])(ox-rst . [(20151115 1554) ((emacs (24 4)) (org (8 2 4)) ) "Export reStructuredText using orgmode. * lexicalbinding: t *" single ((url: ."https://github.com/masayuko/ox-rst") (:keywords  " org" " rst" " reST" " reStructuredText"))])(ox-reveal . [(20160509 1525) ((org (8 0)) ) "reveal.js Presentation BackEnd for Org Export Engine" single ((url: ."https://github.com/yjwen/org-reveal") (:keywords  " outlines" " hypermedia" " slideshow" " presentation"))])(ox-pukiwiki . [(20150125 205) ((org (8 1)) ) "Pukiwiki BackEnd for Org Export Engine" single ((url: ."https://github.com/yashi/org-pukiwiki") (:keywords  " org" " pukiwiki"))])(ox-pandoc . [(20151223 753) ((dash (2 8)) (emacs (24)) (ht (2 0)) (org (8 2)) ) "org exporter for pandoc.        * lexicalbinding: t *" single ((url: ."https://github.com/kawabata/ox-pandoc") (:keywords  " tools"))])(ox-nikola . [(20151114 1916) ((emacs (24 4)) (org (8 2 4)) (ox-rst (0 2)) ) "Export Nikola articles using orgmode." single ((url: ."https://github.com/masayuko/ox-nikola") (:keywords  " org" " nikola"))])(ox-mediawiki . [(20150924 2) ((s (1 9 0)) (cl-lib (0 5)) ) "Mediawiki BackEnd for Org Export Engine" single ((url: ."https://github.com/tomalexander/orgmode-mediawiki") (:keywords  " org" " wp" " mediawiki"))])(ox-latex-chinese . [(20160514 828) ((emacs (24 4)) ) "An example org latex exporter configure for Chinese users" single ((url: ."https://github.com/tumashu/ox-latex-chinese") (:keywords ""))])(ox-jira . [(20160426 2053) ((org (8 0)) ) "JIRA Backend for Org Export Engine" single ((url: ."https://github.com/stig/ox-jira.el") (:keywords  " outlines" " hypermedia" " wp"))])(ox-ioslide . [(20160121 5) ((f (0 17 2)) (emacs (24 1)) (makey (0 3)) (cl-lib (0 5)) (org (8 0)) ) "Export orgmode to Google I/O HTML5 slide." tar ((url: ."https://github.com/coldnew/org-ioslide") (:keywords  " html presentation"))])(ox-impress-js . [(20150413 116) ((org (8)) ) "impress.js BackEnd for Org Export Engine" tar ((url: ."https://github.com/kinjo/org-impress-js.el") (:keywords  " outlines" " hypermedia" " calendar" " wp"))])(ox-html5slide . [(20131228 1406) ((org (8 0)) ) "Export orgmode to HTML5 slide." single ((url: ."https://github.com/coldnew/org-html5slide") (:keywords  " html presentation"))])(ox-gfm . [(20160324 1820)  nil  "Github Flavored Markdown BackEnd for Org Export Engine" single ((url: ."https://github.com/larstvei/ox-gfm") (:keywords  " org" " wp" " markdown" " github"))])(ox-bibtex-chinese . [(20160510 2006) ((emacs (24 4)) ) "Let oxbibtex work l for Chinese users" single ((url: ."https://github.com/tumashu/ox-bibtex-chinese") (:keywords ""))])(ox-asciidoc . [(20160120 2132) ((org (8 1)) ) "AsciiDoc BackEnd for Org Export Engine" single ((url: ."https://github.com/yashi/org-asciidoc") (:keywords  " org" " asciidoc"))])(owdriver . [(20141011 2238) ((log4e (0 2 0)) (yaxception (0 2 0)) (smartrep (0 0 3)) ) "Quickly perform various actions on other windows" single ((url: ."https://github.com/aki2o/owdriver") (:keywords  " convenience"))])(overseer . [(20160518 1443) ((f (0 18 1)) (dash (2 10 0)) (pkg-info (0 4)) (emacs (24)) ) "Ertrunner Integration Into Emacs" single ((url: ."https://github.com/tonini/overseer.el") (:keywords ""))])(ov . [(20150313 2332) ((emacs (24 3)) ) "Overlay library for Emacs Lisp * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/ShingoFukuyama/ov.el") (:keywords  " overlay"))])(outshine . [(20160416 2346) ((cl-lib (0 5)) (outorg (2 0)) ) "outline with  s outline" tar ((url: ."https://github.com/tj64/outshine") (:keywords ""))])(outorg . [(20160327 1632)  nil  "Orgstyle comment editing" tar ((url: ."https://github.com/tj64/outorg") (:keywords ""))])(outlined-elisp-mode . [(20131108 1927)  nil  "outlineminormode settings for emacs lisp" single ((url: ."https://github.com/zk-phi/outlined-elisp-mode") (:keywords ""))])(outline-magic . [(20150210 626)  nil  "outline mode extensions for Emacs" single ((url: ."https://github.com/tj64/outline-magic") (:keywords  " outlines"))])(otama . [(20160404 1849)  nil  "Orgtable Manipulator" single ((url: ."https://github.com/yoshinari-nomura/otama") (:keywords  " database" " org-mode"))])(osx-trash . [(20150723 2237) ((emacs (24 1)) ) "System trash for OS X           * lexicalbinding: t *" single ((url: ."https://github.com/lunaryorn/osx-trash.el") (:keywords  " files" " convenience" " tools" " unix"))])(osx-pseudo-daemon . [(20131027 830)  nil  "Daemon mode that plays nice with OSX." single ((url: ."https://github.com/DarwinAwardWinner/osx-pseudo-daemon") (:keywords  " convenience osx"))])(osx-plist . [(20101130 2048)  nil  "Apple plist file parser" single ((url: ."https://github.com/emacsmirror/osx-plist") (:keywords  " convenience"))])(osx-org-clock-menubar . [(20150206 511)  nil  "simple menubar integration for orgclock" single ((url: ."https://github.com/jordonbiondo/osx-org-clock-menubar") (:keywords  " org" " osx"))])(osx-location . [(20150613 1717)  nil  "Watch and respond to changes in geographical location on OS X" tar ((url: ."https://github.com/purcell/osx-location") (:keywords  " convenience" " calendar"))])(osx-lib . [(20160402 1436) ((emacs (24 4)) ) "Basic function for Apple/OSX." single ((url: ."https://github.com/raghavgautam/osx-lib") (:keywords  " Apple" " AppleScript" " OSX" " Finder" " Emacs" " Elisp" " VPN" " Speech"))])(osx-dictionary . [(20160215 2326) ((cl-lib (0 5)) ) "Interface for OSX Dictionary.app" tar ((url: ."https://github.com/xuchunyang/osx-dictionary.el") (:keywords ""))])(osx-clipboard . [(20141012 1517)  nil  "Use the OS X clipboard from terminal Emacs" single ((url: ."https://github.com/joddie/osx-clipboard-mode") (:keywords ""))])(osx-browse . [(20140805 322) ((browse-url-dwim (0 6 6)) (string-utils (0 3 2)) ) "Web browsing pers for OS X" single ((url: ."https://github.com/rolandwalker/osx-browse") (:keywords  " hypermedia" " external"))])(origami . [(20160314 513) ((dash (2 5 0)) (s (1 9 0)) (emacs (24)) ) "Flexible text folding  * lexicalbinding: t *" tar ((url: ."https://github.com/gregsexton/origami.el") (:keywords  " folding"))])(orgtbl-show-header . [(20160517 2157)  nil  "Show the header of the current column in the minibuffer" tar ((url: ."https://github.com/DamienCassou/orgtbl-show-header") (:keywords ""))])(orgtbl-join . [(20150315 1727) ((cl-lib (0 5)) ) "join columns from another table" tar ((url: ."https://github.com/tbanel/orgtbljoin") (:keywords  " org" " table" " join" " filtering"))])(orgtbl-ascii-plot . [(20151216 551)  nil  "asciiart bar plots in orgmode tables" single ((url: ."https://github.com/tbanel/orgtblasciiplot") (:keywords  " org" " table" " ascii" " plot"))])(orgtbl-aggregate . [(20160421 2226)  nil  "Create an aggregated Org table from another one" tar ((url: ."https://github.com/tbanel/orgaggregate") (:keywords  " org" " table" " aggregation" " filtering"))])(orglue . [(20150430 2013) ((epic (0 2)) (org-mac-link (1 2)) (org (8 1)) ) "more functionality to orgmode." tar ((url: ."https://github.com/yoshinari-nomura/orglue") (:keywords  " org"))])(orglink . [(20160424 2220) ((dash (2 12 1)) (emacs (24 3)) (org (8 3)) ) "use Org Mode links in other modes" single ((url: ."https://github.com/tarsius/orglink") (:keywords  " hypertext"))])(orgit . [(20160120 624) ((magit (2 4 1)) (dash (2 12 1)) (emacs (24 4)) (org (8 3 3)) ) "support for Org links to Magit buffers" single ((url: ."https://github.com/magit/orgit") (:keywords ""))])(orgbox . [(20140530 1415) ((cl-lib (0 5)) (org (8 0)) ) "Mailboxlike task scheduling Org." single ((url: ."https://github.com/yasuhito/orgbox") (:keywords  " org"))])(organic-green-theme . [(20160512 1752)  nil  "﻿   Lowcontrast green color theme." single ((url: ."https://github.com/kostafey/organic-green-theme") (:keywords ""))])(org2jekyll . [(20160418 2350) ((s (1 9 0)) (dash-functional (2 11 0)) (deferred (0 3 1)) ) "Minor mode to publish orgmode post to jekyll without specific yaml" tar ((url: ."https://github.com/ardumont/org2jekyll") (:keywords  " org-mode jekyll blog publish"))])(org2issue . [(20160427 918) ((ox-gfm (0 1)) (s (20160405 920)) (emacs (24 4)) (gh (0 1)) (org (8 0)) ) "export org to github issue" single ((url: ."https://github.com/lujun9972/org2issue") (:keywords  " convenience" " github" " org"))])(org2blog . [(20160503 921)  nil  "blog from Org mode to wordpress" tar ((url: ."https://github.com/punchagan/org2blog") (:keywords  " orgmode" " wordpress" " blog"))])(org-wunderlist . [(20150829 1106) ((s (1 9 0)) (request-deferred (0 2 0)) (emacs (24)) (alert (1 1)) (org (8 2 4)) (cl-lib (0 5)) ) "Org sync with Wunderlist * lexicalbinding: t *" single ((url: ."https://github.com/myuhe/org-wunderlist.el") (:keywords  " convenience"))])(org-webpage . [(20160307 1626)  nil  "static site generator based on org mode" tar ((url: ."https://github.com/tumashu/org-webpage") (:keywords  " org-mode" " convenience" " beautify"))])(org-wc . [(20160205 915)  nil  "Count words in org mode trees." single ((url: ."https://github.com/dato/org-wc") (:keywords ""))])(org-vcard . [(20151214 1422)  nil  "orgmode support for vCard export and import." tar ((url: ."https://github.com/flexibeast/org-vcard") (:keywords  " outlines" " org" " vcard"))])(org-trello . [(20160302 141) ((dash (2 12 1)) (request-deferred (0 2 0)) (s (1 11 0)) (dash-functional (2 12 1)) (emacs (24)) (deferred (0 4 0)) ) "Minor mode to synchronize orgmode buffer and tlo board" tar ((url: ."https://github.com/org-trello/org-trello") (:keywords  " org-mode trello sync org-trello"))])(org-tree-slide . [(20160514 1425)  nil  "A presentation tool for orgmode" single ((url: ."https://github.com/takaxp/org-tree-slide") (:keywords  " org-mode" " presentation" " narrowing"))])(org-transform-tree-table . [(20150110 2233) ((dash (2 10 0)) (s (1 3 0)) ) "Transform orgmode tree with properties to a table, and the other way around" single ((url: ."https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords  " org-mode table org-table tree csv convert"))])(org-tracktable . [(20160420 2145) ((emacs (24)) (cl-lib (0 5)) ) "Track your writing progress in an orgtable" single ((url: ."https://github.com/tty-tourist/org-tracktable") (:keywords  " org" " writing"))])(org-toodledo . [(20150301 1916) ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5)) ) "Toodledo integration for Emacs Org mode" tar ((url: ."https://github.com/myuhe/org-toodledo") (:keywords  " outlines" " data"))])(org-time-budgets . [(20151123 1718) ((alert (0 5 10)) (cl-lib (0 5)) ) "Define time budgets and display clocked time." single ((url: ."https://github.com/leoc/org-time-budgets") (:keywords ""))])(org-themis . [(20160122 1204) ((cl-lib (0 4)) ) "Experimental project management mode for orgmode" single ((url: ."https://github.com/zellio/org-themis") (:keywords  " org-mode" " elisp" " project"))])(org-tfl . [(20160408 540) ((emacs (24 1)) (cl-lib (0 5)) (org (0 16 2)) ) "Transport for London meets Orgmode" single ((url: ."https://github.com/storax/org-tfl") (:keywords  " org" " tfl"))])(org-table-comment . [(20120210 251)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/org-table-comment.el") (:keywords  " org-mode orgtbl"))])(org-sync . [(20150828 2143) ((emacs (24)) (org (8 2)) (cl-lib (0 5)) ) "Synchronize Org documents with External Issue Trackers" tar ((url: ."https://github.com/arbox/org-sync") (:keywords  " org" " synchronization" " issue tracking" " GitHub" " Redmine"))])(org-repo-todo . [(20160308 229)  nil  "Simple repository todo management with orgmode" single ((url: ."https://github.com/waymondo/org-repo-todo") (:keywords  " convenience"))])(org-ref . [(20160513 437) ((f (0 18 0)) (parsebib (1 0)) (dash (2 11 0)) (s (1 10 0)) (emacs (24 4)) (key-chord (0)) (hydra (0 13 2)) ) "citations, crossreferences and bibliographies in orgmode" tar ((url: ."https://github.com/jkitchin/org-ref") (:keywords  " org-mode" " cite" " ref" " label"))])(org-redmine . [(20160205 2024)  nil  "Redmine tools using Emacs OrgMode" single ((url: ."https://github.com/gongo/org-redmine") (:keywords  " redmine org"))])(org-readme . [(20151204 2017) ((yaoddmuse (0 1 1)) (lib-requires (21 0)) (http-post-simple (1 0)) (cl-lib (0 5)) (header2 (21 0)) ) "Filename:" single ((url: ."https://github.com/mattfidler/org-readme") (:keywords  " Header2" " Readme.org" " Emacswiki" " Git"))])(org-random-todo . [(20160208 2026) ((emacs (24 3)) (alert (1 2)) ) "notify of random TODO's" single ((url: ."https://github.com/unhammer/org-random-todo") (:keywords  " org todo notification"))])(org-protocol-jekyll . [(20151120 38) ((cl-lib (0 5)) ) "Jekyll's handler for orgprotocol" single ((url: ."https://github.com/vonavi/org-protocol-jekyll") (:keywords ""))])(org-present . [(20141110 956) ((org (7)) ) "Minimalist presentation minormode for Emacs orgmode." single ((url: ."https://github.com/rlister/org-present") (:keywords ""))])(org-pomodoro . [(20151217 2153) ((alert (0 5 10)) (cl-lib (0 5)) ) "Pomodoro implementation for orgmode." tar ((url: ."https://github.com/lolownia/org-pomodoro") (:keywords ""))])(org-pdfview . [(20160126 454) ((org (6 1)) (pdf-tools (0 40)) ) "Support for links to documents in pdfview mode" single ((url: ."https://github.com/markus1189/org-pdfview") (:keywords  " org" " pdf-view" " pdf-tools"))])(org-page . [(20160413 1829)  nil  "static site generator based on org mode" tar ((url: ."https://github.com/kelvinh/org-page") (:keywords  " org-mode" " convenience" " beautify"))])(org-outlook . [(20150914 2047)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/org-outlook.el") (:keywords  " Org-outlook "))])(org-octopress . [(20150826 1916) ((orglue (0 1)) (org (8 0)) (ctable (0 1 1)) ) "Compose octopress articles using orgmode." tar ((url: ."https://github.com/yoshinari-nomura/org-octopress") (:keywords  " org" " jekyll" " octopress" " blog"))])(org-multiple-keymap . [(20150329 906) ((emacs (24)) (cl-lib (0 5)) (org (8 2 4)) ) "Set keymap toements, such as timestamp and priority. * lexicalbinding: t *" single ((url: ."https://github.com/myuhe/org-multiple-keymap.el") (:keywords  " convenience" " org-mode"))])(org-mobile-sync . [(20140322 1740) ((emacs (24 3 50)) (org (8 0)) ) "automatically sync orgmobile on changes" single ((url: ."https://github.com/steckerhalter/org-mobile-sync") (:keywords  " org-mode org mobile sync todo"))])(org-linkany . [(20160207 1211) ((log4e (0 2 0)) (yaxception (0 1)) ) "Insert link using anything/m on orgmode" single ((url: ."https://github.com/aki2o/org-linkany") (:keywords  " org" " completion"))])(org-link-travis . [(20140406 727) ((org (7)) ) "Insert/Export the link of Travis CI on orgmode" single ((url: ."https://github.com/aki2o/org-link-travis") (:keywords  " org"))])(org-journal . [(20160427 2134)  nil  "a simple orgmode based journaling mode" single ((url: ."https://github.com/bastibe/org-journal") (:keywords ""))])(org-jira . [(20150911 2058)  nil  "Syncing between Jira and Orgmode." tar ((url: ."https://github.com/baohaojun/org-jira") (:keywords ""))])(org-jekyll . [(20130508 1739) ((org (8 0)) ) "Export jekyllready posts form orgmode entries" single ((url: ."https://github.com/juanre/org-jekyll") (:keywords  " hypermedia"))])(org-iv . [(20151214 11) ((cl-lib (0 5)) (org (8 0)) (impatient-mode (1 0 0)) ) "a tool used to view html generated by orgfile immediay." tar ((url: ."https://github.com/kuangdash/org-iv") (:keywords ""))])(org-grep . [(20151202 2029) ((cl-lib (0 5)) ) "Kind of Mx rgrep adapted for Org mode." single ((url: ."https://github.com/emacsorphanage/org-grep") (:keywords ""))])(org-gnome . [(20150614 2257) ((alert (1 2)) (gnome-calendar (0 1)) (telepathy (0 1)) ) "Orgmode integration with the GNOME desktop" single ((url: ."https://github.com/NicolasPetton/org-gnome.el") (:keywords  " org gnome"))])(org-gcal . [(20160308 406) ((request-deferred (0 2 0)) (emacs (24)) (alert (1 1)) (org (8 2 4)) (cl-lib (0 5)) ) "Org sync with Google Calendar * lexicalbinding: t *" single ((url: ."https://github.com/myuhe/org-gcal.el") (:keywords  " convenience"))])(org-eww . [(20160425 2051) ((emacs (24 4)) (org (8 0)) ) "automatically use eww to preview current orgfile when save" single ((url: ."https://github.com/lujun9972/org-eww") (:keywords  " convenience" " eww" " org"))])(org-elisp-help . [(20130424 645) ((org (8 0)) (cl-lib (0 2)) ) "org links to emacslisp documentation" single ((url: ."https://github.com/tarsius/org-elisp-help") (:keywords  " org" " remember" " lisp"))])(org-dropbox . [(20150114 1311) ((dash (2 2)) (emacs (24)) (names (20150000)) ) "move Dropbox notes from phone into orgmode datetree" single ((url: ."https://github.com/heikkil/org-dropbox") (:keywords  " Dropbox Android notes org-mode"))])(org-drill-table . [(20140125 558) ((dash (2 2 0)) (s (1 7 0)) (emacs (24 1)) (org-plus-contrib (8 2)) (cl-lib (0 3)) ) "Generate drill cards from org tables" single ((url: ."https://github.com/chrisbarrett/org-drill-table") (:keywords ""))])(org-dp . [(20160326 2103) ((cl-lib (0 5)) ) "Declarative Local Programming with Org Elements" tar ((url: ."https://github.com/tj64/org-dp") (:keywords ""))])(org-download . [(20160411 2210) ((async (1 2)) ) "Image draganddrop for Emacs orgmode" single ((url: ."https://github.com/abo-abo/org-download") (:keywords  " images" " screenshots" " download"))])(org-dotemacs . [(20151120 222) ((cl-lib (1 0)) (org (7 9 3)) ) "Filename:" single ((url: ."https://github.com/vapniks/org-dotemacs") (:keywords  " local"))])(org-doing . [(20151030 2325)  nil  "Keep track of what you're doing" single ((url: ."https://github.com/omouse/org-doing") (:keywords ""))])(org-dashboard . [(20150812 1802) ((cl-lib (0 5)) ) "Visually summarize progress in org files" single ((url: ."https://github.com/bard/org-dashboard") (:keywords  " outlines" " calendar"))])(org-cua-dwim . [(20120203 1334)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/org-cua-dwim.el") (:keywords  " org-mode cua-mode"))])(org-context . [(20160108 1814)  nil  "Contextual capture and agenda commands for Orgmode" single ((url: ."https://github.com/thisirs/org-context") (:keywords  " Org" " capture" " agenda" " convenience"))])(org-clock-convenience . [(20160218 630) ((emacs (24 3)) (org (8)) (cl-lib (0 5)) ) "convenience functions for org time tracking" single ((url: ."https://github.com/dfeich/org-clock-convenience") (:keywords  " org"))])(org-cliplink . [(20160413 1749) ((emacs (24 4)) ) "insert orgmode links from the clipboard * lexicalbinding: t *" tar ((url: ."https://github.com/rexim/org-cliplink") (:keywords ""))])(org-chinese-utils . [(20160510 2209)  nil  "Some orgmode utils for Chinese users" single ((url: ."https://github.com/tumashu/org-chinese-utils") (:keywords ""))])(org-capture-pop-frame . [(20160518 1808) ((emacs (24 4)) ) "Run orgcapture in a new pop frame" single ((url: ."https://github.com/tumashu/org-capture-pop-frame") (:keywords ""))])(org-caldav . [(20160306 2240) ((org (7)) ) "Sync org files with external calendar through CalDAV" single ((url: ."https://github.com/dengste/org-caldav") (:keywords  " calendar" " caldav"))])(org-bullets . [(20140919 237)  nil  "Show bullets in orgmode as UTF8 characters" single ((url: ."https://github.com/sabof/org-bullets") (:keywords ""))])(org-bookmark-heading . [(20160327 1304) ((emacs (24 4)) ) "Emacs bookmark support for orgmode" single ((url: ."https://github.com/alphapapa/org-bookmark-heading") (:keywords  " hypermedia" " outlines"))])(org-beautify-theme . [(20150107 156)  nil  " " single ((url: ."https://github.com/jonnay/emagicians-starter-kit") (:keywords  " erc bitlbee bot"))])(org-autolist . [(20150922 2205)  nil  "Improved list management in orgmode" single ((url: ."https://github.com/calvinwyoung/org-autolist") (:keywords  " lists" " checklists" " org-mode"))])(org-attach-screenshot . [(20160126 535)  nil  "screenshots integrated with org attachment dirs" single ((url: ."https://github.com/dfeich/org-screenshot") (:keywords  " org"))])(org-alert . [(20151008 932) ((dash (2 12 0)) (s (1 10 0)) (alert (1 2)) ) "Notify org deadlines via notifysend" single ((url: ."https://github.com/groksteve/org-alert") (:keywords  " org" " org-mode" " notify" " notifications"))])(org-agenda-property . [(20150316 2133) ((emacs (24 2)) ) "Display org properties in the agenda buffer." single ((url: ."https://github.com/Malabarba/org-agenda-property") (:keywords  " calendar "))])(org-ac . [(20140303 1102) ((log4e (0 2 0)) (yaxception (0 1)) (auto-complete-pcmp (0 0 1)) ) "Some autocomplete sources for orgmode" single ((url: ."https://github.com/aki2o/org-ac") (:keywords  " org" " completion"))])(operate-on-number . [(20150707 1423)  nil  "Operate on number at point with arithmetic functions" single ((url: ."https://github.com/knu/operate-on-number.el") (:keywords  " editing"))])(openstack-cgit-browse-file . [(20130819 1727)  nil  "Browse the current file in OpenStack cgit" single ((url: ."https://github.com/chmouel/openstack-cgit-browse-file") (:keywords  " convenience vc git cgit gerrit openstack"))])(opencl-mode . [(20160328 508)  nil  "Syntax coloring for opencl kers" single ((url: ."https://github.com/salmanebah/opencl-mode") (:keywords  " c" " opencl"))])(open-junk-file . [(20160515 625)  nil  "Open a junk (memo) file to tryanderror" single ((url: ."https://github.com/rubikitch/open-junk-file") (:keywords  " convenience" " tools"))])(opam . [(20150719 2020) ((emacs (24 1)) ) "OPAM tools                 * lexicalbinding: t *" single ((url: ."https://github.com/lunaryorn/opam.el") (:keywords  " convenience"))])(one-time-pad-encrypt . [(20160329 2313)  nil  "One time pad encryption within file" single ((url: ."https://github.com/garvinguan/emacs-one-time-pad") (:keywords  " convenience"))])(on-screen . [(20160302 1750) ((cl-lib (0)) ) "guide your eyes while scrolling   * lexicalbinding: t *" single ((url: ."https://github.com/michael-heerdegen/on-screen.el") (:keywords  " convenience"))])(on-parens . [(20150703 606) ((dash (2 10 0)) (emacs (24)) (evil (1 1 6)) (smartparens (1 6 3)) ) "smartparens wrapper to fit with evilmode/vim normalstate * lexicalbinding: t *" single ((url: ."https://github.com/willghatch/emacs-on-parens") (:keywords  " evil" " smartparens"))])(omtose-phellack-theme . [(20160412 1928) ((emacs (24)) ) "A dark, soothing theme with a cold bluish touch." tar ((url: ."https://github.com/franksn/omtose-phellack-theme") (:keywords ""))])(omnisharp . [(20151211 314) ((auto-complete (1 4)) (dash (20141201 2206)) (s (1 9 0)) (csharp-mode (0 8 7)) (json (1 2)) (popup (0 5 1)) (cl-lib (0 5)) (flycheck (0 25 1)) ) "Omnicompletion (inlisense) and more for C#" tar ((url: ."https://github.com/OmniSharp/omnisharp-emacs") (:keywords  " csharp c# IDE auto-complete intellisense"))])(omniref . [(20160226 624)  nil  "Filename:" single ((url: ."https://github.com/dotemacs/omniref.el") (:keywords  " docs" " help" " tools"))])(omni-tags . [(20151212 104) ((pcre2el (1 7)) (cl-lib (0 5)) ) "Highlight and Actions for 'Tags'" tar ((url: ."https://github.com/AdrieanKhisbe/omni-tags.el") (:keywords  " convenience"))])(omni-scratch . [(20151212 59)  nil  "Easy and modespecific draft buffers" single ((url: ."https://github.com/AdrieanKhisbe/omni-scratch.el") (:keywords  " convenience" " languages" " tools"))])(omni-quotes . [(20151212 100) ((omni-log (0 1 2)) (dash (2 8)) ) "Random quotes displayer" tar ((url: ."https://github.com/AdrieanKhisbe/omni-quotes.el") (:keywords  " convenience"))])(omni-log . [(20151212 110) ((dash (1 8 0)) (s (1 6 1)) (emacs (24)) (ht (2 0)) ) "Logging utilities  * lexicalbinding: t *" tar ((url: ."https://github.com/AdrieanKhisbe/omni-log.el") (:keywords  " convenience" " languages" " tools"))])(omni-kill . [(20151212 103)  nil  "Kill all the things" single ((url: ."https://github.com/AdrieanKhisbe/omni-kill.el") (:keywords  " convenience" " editing" " tools"))])(om-mode . [(20141116 940)  nil  "Insert Om component template with life cycle." single ((url: ."https://github.com/danielsz/om-mode") (:keywords  " clojurescript"))])(olivetti . [(20160428 1229)  nil  "Minor mode for a nice writing environment" single ((url: ."https://github.com/rnkn/olivetti") (:keywords  " wp"))])(oldlace-theme . [(20151119 58) ((emacs (24)) ) "Emacs 24 theme with an 'oldlace' background." single ((url: ."https://github.com/mswift42/oldlace-theme") (:keywords ""))])(offlineimap . [(20150916 1958)  nil  "Run OfflineIMAP from Emacs" single ((url: ."https://github.com/jd/offlineimap.el") (:keywords ""))])(octopress . [(20160124 606)  nil  "A lightweight wrapper for Jekyll and Octopress." single ((url: ."https://github.com/aaronbieber/octopress.el") (:keywords  " octopress" " blog"))])(octicons . [(20151101 1140) ((cl-lib (0 5)) ) "utility" tar ((url: ."https://github.com/syohex/emacs-octicons") (:keywords ""))])(ocodo-svg-modelines . [(20150517 1549) ((svg-mode-line-themes (0)) ) "a collection of beautiful, modern SVG moines" tar ((url: ."https://github.com/ocodo/ocodo-svg-modelines") (:keywords ""))])(occur-x . [(20130610 2143)  nil  "Extra functionality for occur" single ((url: ."https://github.com/juan-leon/occur-x") (:keywords  " occur" " search" " convenience"))])(occur-context-resize . [(20151228 1202)  nil  "dynamically resize context around matches in occurmode" single ((url: ."https://github.com/dgtized/occur-context-resize.el") (:keywords  " matching"))])(occidental-theme . [(20130313 358)  nil  "Custom theme for faces based on Adwaita" single ((url: ."https://github.com/olcai/occidental-theme") (:keywords ""))])(obsidian-theme . [(20140421 43)  nil  "URL: http://github.com/mswift42/" single ((url: ."https://github.com/mswift42/obsidian-theme") (:keywords ""))])(objc-font-lock . [(20141022 222)  nil  "Highlight ObjectiveC method calls." single ((url: ."https://github.com/Lindydancer/objc-font-lock") (:keywords  " languages" " faces"))])(oberon . [(20120715 1709)  nil  "Major mode for editing Oberon/Oberon2 program texts" single ((url: ."https://github.com/emacsorphanage/oberon") (:keywords  " oberon oberon-2 languages oop"))])(ob-typescript . [(20150804 2030) ((emacs (24)) (org (8 0)) ) "orgba functions for typescript evaluation" single ((url: ."https://github.com/lurdan/ob-typescript") (:keywords  " literate programming" " reproducible research" " typescript"))])(ob-translate . [(20160411 1625) ((google-translate (0 11)) (org (8)) ) "Translation of text blocks in orgmode." single ((url: ."https://github.com/krisajenkins/ob-translate") (:keywords  " org babel translate translation"))])(ob-swift . [(20151205 1511) ((org (8)) ) "orgba functions for swift evaluation" single ((url: ."https://github.com/zweifisch/ob-swift") (:keywords  " org babel swift"))])(ob-sml . [(20130830 243) ((sml-mode (6 4)) ) "orgba functions for template evaluation" single ((url: ."https://github.com/swannodette/ob-sml") (:keywords  " literate programming" " reproducible research"))])(ob-scala . [(20160209 2235) ((ensime (0 9 10)) ) "orgba functions for scala evaluation" single ((url: ."https://github.com/reactormonk/ob-scala") (:keywords  " scala"))])(ob-sagemath . [(20160518 828) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24)) ) "orgba functions for SageMath evaluation * lexicalbinding: t *" tar ((url: ."https://github.com/stakemori/ob-sagemath") (:keywords  " SageMath" " org-babel"))])(ob-restclient . [(20160324 1405) ((restclient (0)) ) "orgba functions for restclientmode" single ((url: ."https://github.com/alf/ob-restclient.el") (:keywords  " literate programming" " reproducible research"))])(ob-redis . [(20160412 1113) ((org (8)) ) "Execute Redis queries within orgmode blocks." single ((url: ."https://github.com/stardiviner/ob-redis") (:keywords  " org babel redis"))])(ob-prolog . [(20150531 2252)  nil  "orgba functions for prolog evaluation." single ((url: ."https://github.com/ljos/ob-prolog") (:keywords  " literate programming" " reproducible research"))])(ob-php . [(20160505 1719) ((org (8)) ) "Execute PHP within orgmode blocks." single ((url: ."https://github.com/stardiviner/ob-php") (:keywords  " org babel php"))])(ob-mongo . [(20130718 2233) ((org (8)) ) "Execute mongodb queries within orgmode blocks." single ((url: ."https://github.com/krisajenkins/ob-mongo") (:keywords  " org babel mongo mongodb"))])(ob-ml-marklogic . [(20160509 32)  nil  "orgba functions for MarkLogic evaluation" tar ((url: ."https://github.com/ndw/ob-ml-marklogic") (:keywords  " MarkLogic" " XQuery" " JavaScript" " SPARQL"))])(ob-lua . [(20160412 1124) ((org (8)) ) "Execute Lua code within orgmode blocks." single ((url: ."https://github.com/stardiviner/ob-lua") (:keywords  " org babel lua"))])(ob-lfe . [(20150701 2155) ((org (8)) ) "orgba functions for lfe evaluation" single ((url: ."https://github.com/zweifisch/ob-lfe") (:keywords  " org babel lfe lisp erlang"))])(ob-kotlin . [(20150312 2130) ((org (8)) ) "orgba functions for kotlin evaluation" single ((url: ."https://github.com/zweifisch/ob-kotlin") (:keywords  " org babel kotlin"))])(ob-ipython . [(20160425 405) ((f (0 17 2)) (dash (2 10 0)) (dash-functional (1 2 0)) (s (1 9 0)) (emacs (24)) ) "orgba functions for IPython evaluation" single ((url: ."https://github.com/gregsexton/ob-ipython") (:keywords  " literate programming" " reproducible research"))])(ob-http . [(20160416 1232) ((s (1 9 0)) (cl-lib (0 5)) ) "http request in orgmode ba" tar ((url: ."https://github.com/zweifisch/ob-http") (:keywords ""))])(ob-go . [(20160319 352)  nil  "orgba functions for go evaluation" tar ((url: ."https://github.com/pope/ob-go") (:keywords  " golang" " go" " literate programming" " reproducible research"))])(ob-elixir . [(20151021 1947) ((org (8)) ) "orgba functions forixir evaluation" single ((url: ."https://github.com/zweifisch/ob-elixir") (:keywords  " org babel elixir"))])(ob-diagrams . [(20160407 2040)  nil  "orgba functions for diagrams evaluation" single ((url: ."https://github.com/bergey/org-babel-diagrams") (:keywords  " literate programming" " reproducible research"))])(ob-cypher . [(20150225 1037) ((dash (2 10 0)) (dash-functional (1 2 0)) (s (1 9 0)) (cypher-mode (0 0 6)) ) "query neo4j using cypher in orgmode blocks" single ((url: ."https://github.com/zweifisch/ob-cypher") (:keywords  " org babel cypher neo4j"))])(ob-coffee . [(20160416 1136) ((org (8)) ) "orgba functions for coffeescript evaluation" single ((url: ."https://github.com/zweifisch/ob-coffee") (:keywords  " org babel coffee-script"))])(ob-browser . [(20151119 2256) ((org (8)) ) "Render HTML in orgmode blocks." tar ((url: ."https://github.com/krisajenkins/ob-browser") (:keywords  " org babel browser phantomjs"))])(oauth . [(20130128 951)  nil  "Oauth library." tar ((url: ."https://github.com/psanford/emacs-oauth") (:keywords  " comm"))])(nyan-prompt . [(20140810 1308)  nil  "Nyan Cat on the esl prompt." tar ((url: ."https://github.com/PuercoPop/nyan-prompt") (:keywords  " nyan" " cat" " lulz" " eshell" " rainbow"))])(nyan-mode . [(20160430 423)  nil  "Nyan Cat shows position in current buffer in modeline." tar ((url: ."https://github.com/TeMPOraL/nyan-mode") (:keywords  " nyan" " cat" " lulz" " scrolling" " pop tart cat" " build something amazing"))])(nvm . [(20151113 1655) ((f (0 14 0)) (dash (2 4 0)) (dash-functional (2 4 0)) (s (1 8 0)) ) "Manage Node versions within Emacs" single ((url: ."https://github.com/rejeep/nvm.el") (:keywords  " node" " nvm"))])(nummm-mode . [(20151123 216)  nil  "Display the number of minor modes instead of their names" single ((url: ."https://github.com/agpchil/nummm-mode") (:keywords ""))])(number . [(20141128 206)  nil  "Working with s at point." single ((url: ."https://github.com/chrisdone/number") (:keywords ""))])(nsis-mode . [(20150914 2046)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/nsis-mode") (:keywords  " NSIS"))])(nrepl-eval-sexp-fu . [(20140311 1841) ((thingatpt (0 0 0)) (highlight (0 0 0)) (smartparens (0 0 0)) ) "Tiny functionality enhancements for evaluating sexps." single ((url: ."https://github.com/samaaron/nrepl-eval-sexp-fu") (:keywords  " lisp" " highlight" " convenience"))])(noxml-fold . [(20151217 21)  nil  "Fold away XML things." single ((url: ."https://github.com/paddymcall/noXML-fold") (:keywords  " xml" " folding"))])(notmuch-labeler . [(20131231 119) ((notmuch (0)) ) "Improve notmuch way of displaying las" tar ((url: ."https://github.com/DamienCassou/notmuch-labeler") (:keywords  " emacs package elisp notmuch emails"))])(noflet . [(20141102 2254)  nil  "locally override functions" tar ((url: ."https://github.com/nicferrier/emacs-noflet") (:keywords  " lisp"))])(nodejs-repl . [(20151229 2203)  nil  "Run Node.js REPL" single ((url: ."https://github.com/abicky/nodejs-repl.el") (:keywords ""))])(node-resolver . [(20141001 123) ((cl-lib (0 5)) ) "hook to install node modules in background" single ((url: ."https://github.com/meandavejustice/node-resolver.el") (:keywords  " convenience" " nodejs" " javascript" " npm"))])(noctilux-theme . [(20150723 2247)  nil  "Dark theme inspired by LightTable" tar ((url: ."https://github.com/sjrmanning/noctilux-theme") (:keywords ""))])(noccur . [(20150515 603)  nil  "Run multioccur on project/dired files" tar ((url: ."https://github.com/NicolasPetton/noccur.el") (:keywords  " convenience"))])(nnir-est . [(20140301 2202)  nil  "Filename:" single ((url: ."https://github.com/kawabata/nnir-est") (:keywords  " gnus nnir"))])(nm . [(20151111 310) ((emacs (24 3)) (company (0)) (peg (0 6)) (notmuch (0 21)) ) "NEVERMORE: an email interface for Notmuch * lexicalbinding: t *" tar ((url: ."https://github.com/tjim/nevermore") (:keywords ""))])(nlinum-relative . [(20160518 1915) ((nlinum (1 5)) (emacs (24 4)) ) "ative line number with nlinum  * lexicalbinding: t *" single ((url: ."https://github.com/CodeFalling/nlinum-relative") (:keywords  " convenience"))])(nixos-options . [(20160401 1759) ((emacs (24)) ) "Interface for browsing and completing NixOS options." single ((url: ."https://github.com/travisbhartwell/nix-emacs") (:keywords  " unix"))])(nix-sandbox . [(20160401 1759) ((dash (2 12 1)) (s (1 10 0)) ) "Utility functions to work with nixsl sandboxes" single ((url: ."https://github.com/travisbhartwell/nix-emacs") (:keywords ""))])(nix-mode . [(20160504 2316)  nil  " " single ((url: ."https://github.com/NixOS/nix") (:keywords ""))])(nim-mode . [(20160511 1055) ((epc (0 1 1)) (emacs (24 4)) (company (0 8 12)) (commenter (0 5 1)) (let-alist (1 0 1)) (flycheck (0 25 1)) ) "Filename:" tar ((url: ."https://github.com/nim-lang/nim-mode") (:keywords  " nim languages"))])(niflheim-theme . [(20150630 2321)  nil  "A port of the Nifleim theme to Emacs" single ((url: ."https://github.com/niflheim-theme/emacs") (:keywords  " themes"))])(niceify-info . [(20160416 2050)  nil  "improve usability of Info pages" single ((url: ."https://github.com/aaron-em/niceify-info.el") (:keywords ""))])(nginx-mode . [(20150825 511)  nil  "major mode for editing nginx config files" single ((url: ."https://github.com/ajc/nginx-mode") (:keywords  " nginx"))])(nexus . [(20140114 2105)  nil  "REST Client for Nexus Maven Repository servers" tar ((url: ."https://github.com/juergenhoetzel/emacs-nexus") (:keywords  " comm"))])(newlisp-mode . [(20160226 2345)  nil  "newLISP editing mode for Emacs" single ((url: ."https://github.com/kosh04/newlisp-mode") (:keywords  " language" "lisp" "newlisp"))])(never-comment . [(20140105 614)  nil  "Never blocks are comment" single ((url: ."https://github.com/To1ne/never-comment") (:keywords ""))])(netherlands-holidays . [(20150203 17)  nil  "Netherlands holidays for Emacs calendar." single ((url: ."https://github.com/abo-abo/netherlands-holidays") (:keywords  " calendar"))])(neotree . [(20160306 2330)  nil  "A tree plugin like NerdTree for Vim" single ((url: ."https://github.com/jaypei/emacs-neotree") (:keywords ""))])(nclip . [(20130618 415)  nil  "Network (HTTP) Clipboard" tar ((url: ."https://github.com/maio/nclip.el") (:keywords  " nclip" " clipboard" " network"))])(ncl-mode . [(20150526 30) ((emacs (24)) ) "Major Mode for editing NCL scripts" tar ((url: ."https://github.com/yyr/ncl-mode") (:keywords  " ncl" " Major Mode" " ncl-mode" " atmospheric science."))])(navorski . [(20141204 224) ((dash (1 5 0)) (s (1 9 0)) (multi-term (0 8 14)) ) "ping you live in the terminal, like Viktor did." single ((url: ."https://github.com/roman/navorski.el") (:keywords  " terminal"))])(navi2ch . [(20150330 1016)  nil  "Navigator for 2ch for Emacsen * coding: iso20227bit *" tar ((url: ."https://github.com/naota/navi2ch") (:keywords  " network" " 2ch"))])(navi-mode . [(20160327 1634) ((outshine (2 0)) (outorg (2 0)) ) "majormode for easy buffernavigation" single ((url: ."https://github.com/tj64/navi") (:keywords ""))])(nav-flash . [(20140805 322)  nil  "Briefly highlight the current line" single ((url: ."https://github.com/rolandwalker/nav-flash") (:keywords  " extensions" " navigation" " interface"))])(nav . [(20120507 1507)  nil  "Emacs mode for filesystem igation" tar ((url: ."https://github.com/ijt/emacs-nav") (:keywords ""))])(nasm-mode . [(20160428 312) ((emacs (24 3)) ) "NASM x86 assembly major mode * lexicalbinding: t *" single ((url: ."https://github.com/skeeto/nasm-mode") (:keywords ""))])(narrowed-page-navigation . [(20150109 1319) ((emacs (24)) (cl-lib (0 5)) ) "A minor mode for showing one page at a time  * lexicalbinding: t *" single ((url: ."https://github.com/david-christiansen/narrowed-page-navigation") (:keywords  " outlines"))])(narrow-reindent . [(20150723 306) ((emacs (24 4)) ) "Defines a minor mode to leftalign narrowed regions." single ((url: ."https://github.com/emallson/narrow-reindent.el") (:keywords ""))])(naquadah-theme . [(20150923 1641)  nil  "A theme based on Tango color set" single ((url: ."https://github.com/jd/naquadah-theme") (:keywords ""))])(nand2tetris-assembler . [(20151028 551) ((names (0 3 0)) (nand2tetris (0 0 1)) ) "https://www.coursera.org/course/1" single ((url: ."https://github.com/CestDiego/nand2tetris.el") (:keywords  " nand2tetris-assembler" " hdl"))])(nand2tetris . [(20151028 551) ((names (0 3 0)) ) "https://www.coursera.org/course/1" tar ((url: ."https://github.com/CestDiego/nand2tetris.el") (:keywords  " nand2tetris" " hdl"))])(namespaces . [(20130327 650)  nil  "An implementation of  for Elisp, with an emphasis on immutabilty." single ((url: ."https://github.com/chrisbarrett/elisp-namespaces") (:keywords ""))])(names . [(20151201 2004) ((emacs (24 1)) (cl-lib (0 5)) ) "Namespaces for emacslisp. Avoid name clobbering without hiding symbols.  * lexicalbinding:t *" tar ((url: ."https://github.com/Malabarba/names") (:keywords  " extensions lisp"))])(nameless . [(20160404 213) ((emacs (24 4)) ) "Hide package namespace in your emacslisp code  * lexicalbinding: t *" single ((url: ."https://github.com/Malabarba/Nameless") (:keywords  " convenience" " lisp"))])(nameframe-projectile . [(20151018 1707)  nil  "Nameframe integration with Projectile" single ((url: ."https://github.com/john2x/nameframe") (:keywords ""))])(nameframe-perspective . [(20151018 1707)  nil  "Nameframe integration with perspective" single ((url: ."https://github.com/john2x/nameframe") (:keywords ""))])(nameframe . [(20151018 1707)  nil  "Manage frames by name." single ((url: ."https://github.com/john2x/nameframe") (:keywords ""))])(name-this-color . [(20151015 430) ((dash (2 11 0)) (emacs (24)) (cl-lib (0 5)) ) "Match RGB codes to names easily and preciy * lexicalbinding: t *" single ((url: ."https://github.com/knl/name-this-color.el") (:keywords  " lisp" " color" " hex" " rgb" " shade" " name"))])(n4js . [(20150714 1031) ((emacs (24)) (cypher-mode (0)) ) "Neo4j Sl" single ((url: ."https://github.com/tmtxt/n4js.el") (:keywords  " neo4j" " shell" " comint"))])(n3-mode . [(20141028 157)  nil  "mode for Notation 3" single ((url: ."https://github.com/doriantaylor/n3-mode-for-emacs") (:keywords ""))])(myterminal-controls . [(20160120 1230) ((emacs (24)) (cl-lib (0 5)) ) "Quick toggle controls at a keystroke * lexicalbinding: t coding: utf8 *" single ((url: ."https://github.com/myTerminal/myterminal-controls") (:keywords  " convenience" " shortcuts"))])(mysql2sqlite . [(20151124 539)  nil  "Convert mysql databases into sqlite databases." single ((url: ."https://github.com/echosa/emacs-mysql2sqlite") (:keywords ""))])(mynt-mode . [(20150513 449) ((virtualenvwrapper (20131514)) ) "Minor mode to work with the mynt static site generator" single ((url: ."https://github.com/crshd/mynt-mode") (:keywords  " convenience"))])(myanmar-input-methods . [(20160106 2337)  nil  "Emacs Input Method for Myanmar" single ((url: ."https://github.com/yelinkyaw/emacs-myanmar-input-methods") (:keywords  " Myanmar" " Unicode" " Keyboard"))])(mwim . [(20150823 336)  nil  "Move to the beginning/end of line or code  * lexicalbinding: t *" single ((url: ."https://github.com/alezost/mwim.el") (:keywords  " convenience"))])(mwe-log-commands . [(20100703 2041)  nil  "log keyboard commands to buffer" single ((url: ."https://github.com/emacsmirror/mwe-log-commands") (:keywords  " help"))])(mvn . [(20160211 2343)  nil  " " single ((url: ."https://github.com/apg/mvn-el") (:keywords  " compilation" " maven" " java"))])(mutant . [(20160222 2356) ((dash (2 1 0)) (emacs (24 4)) ) "An interface for the Mutant testing tool" single ((url: ."https://github.com/p-lambert/mutant.el") (:keywords  " mutant" " testing"))])(mustard-theme . [(20141116 2352) ((emacs (24 0)) ) "an Emacs 24 theme based on Mustard (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-mustard-theme") (:keywords ""))])(mustang-theme . [(20141018 723)  nil  "URL: http://github.com/mswift42/" single ((url: ."https://github.com/mswift42/mustang-theme") (:keywords ""))])(mustache-mode . [(20141024 2232)  nil  "A major mode for editing Mustache files." single ((url: ."https://github.com/mustache/emacs") (:keywords ""))])(mustache . [(20131118 616) ((dash (1 2 0)) (s (1 3 0)) (ht (0 9)) ) "a  templating library in emacs lisp" tar ((url: ."https://github.com/Wilfred/mustache.el") (:keywords  " mustache" " template"))])(multiple-cursors . [(20160513 1816)  nil  "Multiple cursors for emacs." tar ((url: ."https://github.com/magnars/multiple-cursors.el") (:keywords  " editing cursors"))])(multifiles . [(20130616 533)  nil  "View and edit parts of multiple files in one buffer" single ((url: ."https://github.com/magnars/multifiles.el") (:keywords  " multiple files"))])(multicolumn . [(20150203 651)  nil  "Creating and managing multiple sidebyside windows." single ((url: ."https://github.com/Lindydancer/multicolumn") (:keywords ""))])(multi-web-mode . [(20130824 1154)  nil  "multiple major mode support for web editing" tar ((url: ."https://github.com/fgallina/multi-web-mode") (:keywords  " convenience" " languages" " wp"))])(multi-line . [(20160518 415) ((emacs (24)) ) "statements * lexicalbinding: t *" tar ((url: ."https://github.com/IvanMalison/multi-line") (:keywords  " multi line length whitespace programming"))])(multi-compile . [(20160307 623) ((dash (2 12 1)) (emacs (24)) ) "Multi target interface to compile. * lexicalbinding: t *" single ((url: ."https://github.com/ReanGD/emacs-multi-compile") (:keywords  " tools compile build"))])(multi . [(20131013 2344) ((emacs (24)) ) "Clojurestyle methods for emacs lisp * lexicalbinding: t *" single ((url: ."https://github.com/kurisuwhyte/emacs-multi") (:keywords  " multimethod generic predicate dispatch"))])(mu4e-maildirs-extension . [(20160126 1639) ((dash (0 0 0)) ) "Show mu4e maildirs summary in mu4emainview" tar ((url: ."https://github.com/agpchil/mu4e-maildirs-extension") (:keywords ""))])(mu4e-alert . [(20160215 1809) ((s (1 10 0)) (emacs (24 1)) (ht (2 0)) (alert (1 2)) ) "Desktop notification for mu4e  * lexicalbinding: t *" single ((url: ."https://github.com/iqbalansari/mu4e-alert") (:keywords  " mail" " convenience"))])(mu-cite . [(20160130 1900)  nil  "yet another citation tool for GNU Emacs" tar ((url: ."https://github.com/ksato9700/mu-cite") (:keywords  " mail" " news" " citation"))])(msvc . [(20150530 1651) ((emacs (24)) (ac-clang (1 2 0)) (cl-lib (0 5)) (cedet (1 0)) ) "Microsoft Visual C/C++ mode * lexicalbinding: t *" tar ((url: ."https://github.com/yaruopooner/msvc") (:keywords  " languages" " completion" " syntax check" " mode" " intellisense"))])(mpv . [(20150218 1718) ((json (1 3)) (emacs (24)) (names (0 5 4)) (org (8 0)) (cl-lib (0 5)) ) "control  for easy notetaking  * lexicalbinding: t *" single ((url: ."https://github.com/kljohann/mpv.el") (:keywords  " tools" " multimedia"))])(mpg123 . [(20151215 350)  nil  "$Id: ,v 1.60 2015/12/04 10:05:43 yuuji Exp $" single ((url: ."https://github.com/emacsmirror/mpg123") (:keywords ""))])(mpages . [(20150710 2204)  nil  "An Emacs buffer for quickly writing your Morning Pages" single ((url: ."https://github.com/slevin/mpages") (:keywords ""))])(mozc-temp . [(20160301 2156) ((mozc (0)) (dash (2 10 0)) (emacs (24)) ) "Use mozc temporarily            * lexicalbinding: t *" single ((url: ."https://github.com/HKey/mozc-temp") (:keywords ""))])(mozc-popup . [(20150224 834) ((mozc (0)) (popup (0 5 2)) ) "Mozc with popup" single ((url: ."https://github.com/d5884/mozc-popup") (:keywords  " i18n" " extentions"))])(mozc-im . [(20160412 822) ((mozc (0)) ) "Mozc with inputmethodfunction interface." single ((url: ."https://github.com/d5884/mozc-im") (:keywords  " i18n" " extentions"))])(moz-controller . [(20151209 1006) ((moz (0)) ) "Control Firefox from Emacs" single ((url: ."https://github.com/RenWenshan/emacs-moz-controller") (:keywords ""))])(mowedline . [(20150929 1959)  nil  "This file is part of ." single ((url: ."https://github.com/retroj/mowedline") (:keywords ""))])(move-text . [(20160501 830)  nil  "Filename:" single ((url: ."https://github.com/emacsfodder/move-text") (:keywords  " edit"))])(move-dup . [(20140925 2308)  nil  "Eclipselike moving and duplicating lines or rectangles." single ((url: ."https://github.com/wyuenho/move-dup") (:keywords  " convenience wp"))])(mouse-slider-mode . [(20150911 500) ((emacs (24 3)) (cl-lib (0 3)) ) "scale numbers dragged under the mouse * lexicalbinding: t *" single ((url: ."https://github.com/skeeto/mouse-slider-mode") (:keywords ""))])(motion-mode . [(20140920 956) ((flymake-easy (0 7)) (flymake-cursor (1 0 2)) ) "major mode for RubyMotion enviroment" tar ((url: ."https://github.com/ainame/motion-mode") (:keywords ""))])(mote-mode . [(20160123 829) ((ruby-mode (1 1)) ) "Mote minor mode" single ((url: ."https://github.com/inkel/mote-mode") (:keywords ""))])(morlock . [(20150815 2334)  nil  "more fontlock keywords forisp" single ((url: ."https://github.com/tarsius/morlock") (:keywords  " convenience"))])(moonscript . [(20160504 2254) ((emacs (24)) (cl-lib (0 5)) ) "Major mode for editing MoonScript code" tar ((url: ."https://github.com/k2052/moonscript-mode") (:keywords ""))])(monroe . [(20160421 1940)  nil  "Yet another client for nREPL" single ((url: ."https://github.com/sanel/monroe") (:keywords  " languages" " clojure" " nrepl" " lisp"))])(monokai-theme . [(20160516 504)  nil  "A fruity color theme for Emacs." single ((url: ."https://github.com/oneKelvinSmith/monokai-emacs") (:keywords ""))])(monochrome-theme . [(20140903 1743)  nil  "A dark Emacs 24 theme for your focused hacking sessions" tar ((url: ."https://github.com/fxn/monochrome-theme.el") (:keywords ""))])(monky . [(20160316 1151)  nil  "Control Hg from Emacs." tar ((url: ."https://github.com/ananthakumaran/monky") (:keywords  " tools"))])(mongo . [(20150315 2019)  nil  "MongoDB driver for Emacs Lisp" tar ((url: ."https://github.com/m2ym/mongo-el") (:keywords  " convenience"))])(molokai-theme . [(20151016 2345)  nil  "molokai theme with Emacs theme engine" single ((url: ."https://github.com/alloy-d/color-theme-molokai") (:keywords ""))])(moe-theme . [(20160322 1615)  nil  "A colorful eyecandy theme. Moe, moe, kyun!" tar ((url: ."https://github.com/kuanyui/moe-theme.el") (:keywords  " themes"))])(modtime-skip-mode . [(20140129 601)  nil  "Filename:" single ((url: ."https://github.com/jordonbiondo/modtime-skip-mode") (:keywords ""))])(mode-line-debug . [(20150307 2112)  nil  "show status of `debugonerror' in the modeline" single ((url: ."https://github.com/tarsius/mode-line-debug") (:keywords  " convenience" " lisp"))])(mode-icons . [(20160509 2207) ((emacs (24)) (cl-lib (0 5)) ) "Show icons for modes * lexicalbinding: t *" tar ((url: ."https://github.com/ryuslash/mode-icons") (:keywords  " multimedia"))])(modalka . [(20160122 2033) ((emacs (24 4)) ) "Easily introduce native modal editing of your own design * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/modalka") (:keywords  " modal editing"))])(mocker . [(20151108 629) ((el-x (0 2 4)) (eieio (1 3)) ) "mocking framework for emacs" single ((url: ."https://github.com/sigma/mocker.el") (:keywords  " lisp" " testing"))])(mocha-snippets . [(20160212 108) ((yasnippet (0 8 0)) ) "Yasnippets for the Mocha JS Testing Framework" tar ((url: ."https://github.com/cowboyd/mocha-snippets.el") (:keywords  " test javascript"))])(mocha . [(20160512 318) ((js2-mode (20150909)) ) "Run Mocha or Jasmine tests" single ((url: ."https://github.com/scottaj/mocha.el") (:keywords  " javascript mocha jasmine"))])(mobdebug-mode . [(20140110 1146) ((lua-mode (20130419)) (emacs (24)) ) "Major mode for MobDebug * lexicalbinding: t *" single ((url: ."https://github.com/deftsp/mobdebug-mode") (:keywords ""))])(mo-vi-ment-mode . [(20131029 1439)  nil  "Provide vilike cursor movement that's easy on the fingers" single ((url: ."https://github.com/AjayMT/mo-vi-ment") (:keywords  " convenience"))])(mo-git-blame . [(20160130 159)  nil  "An interactive, iterative 'git blame' mode for Emacs" single ((url: ."https://github.com/mbunkus/mo-git-blame") (:keywords  " tools"))])(mmt . [(20150907 59) ((emacs (24 1)) (cl-lib (0 3)) ) "Missing macro tools for Emacs Lisp * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/mmt") (:keywords  " macro" " emacs-lisp"))])(mmm-mode . [(20150829 816)  nil  "Allow Multiple Major Modes in a buffer" tar ((url: ."https://github.com/purcell/mmm-mode") (:keywords  " convenience" " faces" " languages" " tools"))])(mmm-jinja2 . [(20150905 234) ((mmm-mode (0 5 4)) ) "MMM submode class for Jinja2 Templates" single ((url: ."https://github.com/beardedprojamz/mmm-jinja2") (:keywords ""))])(mkdown . [(20140517 2218) ((markdown-mode (2 0)) ) "Pretty Markdown previews based on .com" tar ((url: ."https://github.com/ajtulloch/mkdown.el") (:keywords  " markdown"))])(mip-mode . [(20151127 1417)  nil  "virtual projects for emacs." single ((url: ."https://github.com/gaudecker/mip-mode") (:keywords  " workspaces workspace project projects mip-mode"))])(minitest . [(20160506 552) ((dash (1 0 0)) ) "An Emacs mode for ruby  files" tar ((url: ."https://github.com/arthurnn/minitest-emacs") (:keywords ""))])(minimal-theme . [(20140410 701)  nil  "A light/dark minimalistic Emacs 24 theme." tar ((url: ."https://github.com/ikame/minimal-theme") (:keywords  " color" " theme" " minimal"))])(minimal-session-saver . [(20140805 322)  nil  "Very lean session saver" single ((url: ."https://github.com/rolandwalker/minimal-session-saver") (:keywords  " tools" " frames" " project"))])(miniedit . [(20100420 145)  nil  "Enhanced editing for minibuffer fds." single ((url: ."https://github.com/emacsorphanage/miniedit") (:keywords ""))])(minibuffer-cua . [(20130906 1934)  nil  "Make CUA mode's Sup/Sdown work in minibuffer" single ((url: ."https://github.com/knu/minibuffer-cua.el") (:keywords  " completion" " editing"))])(minibuffer-complete-cycle . [(20130814 45)  nil  "Cycle through the *Completions* buffer" single ((url: ."https://github.com/knu/minibuffer-complete-cycle") (:keywords  " completion"))])(minibuf-isearch . [(20151227 343)  nil  "incremental search on minibuffer history" single ((url: ."https://github.com/knagano/minibuf-isearch") (:keywords  " minibuffer" " history" " incremental search"))])(mingus . [(20160322 17) ((libmpdee (2 1)) ) "MPD Interface" tar ((url: ."https://github.com/pft/mingus") (:keywords  " multimedia" " elisp" " music" " mpd"))])(milkode . [(20140927 1329)  nil  "Command line search and direct jump with Milkode" single ((url: ."https://github.com/ongaeshi/emacs-milkode") (:keywords  " milkode" " search" " grep" " jump" " keyword"))])(migemo . [(20150412 2241) ((cl-lib (0 5)) ) "$Id: .in,v 1.9 2012/06/24 04:09:59 kaworu Exp $" single ((url: ."https://github.com/emacs-jp/migemo") (:keywords ""))])(midje-mode . [(20150922 850)  nil  "Minor mode for Midje tests" tar ((url: ."https://github.com/dnaumov/midje-mode") (:keywords ""))])(micgoline . [(20160418 1709) ((powerline (2 3)) (emacs (24 3)) ) "powerline mode, color schemes from microsoft and google's logo." single ((url: ."https://github.com/yzprofile/micgoline") (:keywords  " mode-line powerline theme"))])(mic-paren . [(20150111 1016)  nil  "advanced highlighting of matching parentheses" single ((url: ."https://github.com/emacsmirror/mic-paren") (:keywords  " languages" " faces" " parenthesis" " matching"))])(mexican-holidays . [(20160110 542)  nil  "Mexico holidays for Emacs calendar." single ((url: ."https://github.com/shopClerk/mexican-holidays") (:keywords  " calendar"))])(mew . [(20150818 1514)  nil  "Messaging in the Emacs World" tar ((url: ."https://github.com/kazu-yamamoto/Mew") (:keywords ""))])(metaweblog . [(20141130 2205)  nil  "an emacs library to access  based weblogs" tar ((url: ."https://github.com/punchagan/metaweblog") (:keywords ""))])(metascript-mode . [(20150709 857) ((emacs (24 3)) ) "Major mode for the Metascript programming language" single ((url: ."https://github.com/metascript/metascript-mode") (:keywords  " languages metascript mjs"))])(meta-presenter . [(20150705 1930)  nil  "A simple multifile presentation tool for Emacs" single ((url: ."https://github.com/myTerminal/meta-presenter") (:keywords  " productivity" " presentation"))])(mentor . [(20140905 810) ((xml-rpc (1 6 9)) ) "Frontend for the rTorrent bittorrent client" tar ((url: ."https://github.com/skangas/mentor") (:keywords  " bittorrent" " rtorrent"))])(memolist . [(20150805 121) ((markdown-mode (22 0)) (ag (0 45)) ) "is Emacs port of .vim." single ((url: ."https://github.com/mikanfactory/memolist.el") (:keywords  " markdown" " memo"))])(memoize . [(20130422 334)  nil  "Memoization functions * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/emacs-memoize") (:keywords ""))])(memento . [(20150823 1839)  nil  "maintaining daily journals when the day ends." single ((url: ."https://github.com/ehartc/memento") (:keywords ""))])(melpa-upstream-visit . [(20130720 1833) ((s (1 6 0)) ) "A set of kludges to visit a pahosted package's homepage * lexicalbinding: t *" single ((url: ."https://github.com/laynor/melpa-upstream-visit") (:keywords  " convenience"))])(mellow-theme . [(20141116 2352) ((emacs (24 0)) ) "an Emacs 24 theme based on low (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-mellow-theme") (:keywords ""))])(mediawiki . [(20160425 2203)  nil  "frontend" single ((url: ."https://github.com/hexmode/mediawiki-el") (:keywords  " mediawiki wikipedia network wiki"))])(md-readme . [(20150506 1459)  nil  "Markdownformatted READMEs for your ELisp" single ((url: ."https://github.com/thomas11/md-readme") (:keywords  " lisp" " help" " readme" " markdown" " header" " documentation" " github"))])(mc-extras . [(20150218 1834) ((multiple-cursors (1 2 1)) ) "Extra functions for multiplecursors mode." tar ((url: ."https://github.com/knu/mc-extras.el") (:keywords  " editing" " cursors"))])(mbo70s-theme . [(20141122 2242) ((emacs (24 0)) ) "70s style palette, with similarities to mbo theme" single ((url: ."https://github.com/emacsfodder/emacs-mbo70s-theme") (:keywords ""))])(mbe . [(20151126 1934) ((emacs (24)) (cl-lib (0 5)) ) "Macros by Example" single ((url: ."https://github.com/ijp/mbe.el") (:keywords  " tools" " macros"))])(mb-url . [(20160508 2131)  nil  "Multiple Backends for Emacs URL package" tar ((url: ."https://github.com/dochang/mb-url") (:keywords ""))])(maxframe . [(20151114 2218)  nil  "maximize the emacs frame based on display size" single ((url: ."https://github.com/rmm5t/maxframe.el") (:keywords  " display frame window maximize"))])(maven-test-mode . [(20141220 1357) ((s (1 9)) (emacs (24)) ) "Utilities for navigating test files and running maven test tasks." single ((url: ."https://github.com/rranelli/maven-test-mode") (:keywords  " java" " maven" " test"))])(maude-mode . [(20160223 7)  nil  "Emacs mode for the programming language Maude" single ((url: ."https://github.com/rudi/maude-mode") (:keywords  " Maude"))])(math-symbols . [(20151122 842) ((helm (1 0)) ) "Filename:" tar ((url: ."https://github.com/kawabata/math-symbols") (:keywords  " math symbols" " tex" " latex"))])(math-symbol-lists . [(20160507 407)  nil  "Lists of Unicode math symbols and latex commands" tar ((url: ."https://github.com/vspinu/math-symbol-lists") (:keywords  " Unicode" " symbols" " mathematics"))])(material-theme . [(20160516 2344) ((emacs (24 1)) ) "A Theme based on the colors of the Google Material Design" tar ((url: ."https://github.com/cpaulik/emacs-material-theme") (:keywords  " themes"))])(marshal . [(20151108 627) ((json (1 3)) (eieio (1 4)) ) "eieio extension for automatic (un)ling" single ((url: ."https://github.com/sigma/marshal.el") (:keywords  " eieio"))])(marmalade-client . [(20150101 407)  nil  "client for marmalade API from emacs * lexicalbinding: t *" tar ((url: ."https://github.com/nicferrier/emacs-marmalade-upload") (:keywords  " lisp"))])(markup-faces . [(20141110 1617)  nil  "collection of faces for markup language modes" single ((url: ."https://github.com/sensorflo/markup-faces") (:keywords  " wp faces"))])(markup . [(20130208 509)  nil  "Simple  generation pers." single ((url: ."https://github.com/leoc/markup.el") (:keywords  " Convenience" " Markup" " HTML"))])(markdown-toc . [(20160227 1908) ((dash (2 11 0)) (s (1 9 0)) (markdown-mode (2 1)) ) "A simple TOC generator for markdown file" tar ((url: ."https://github.com/ardumont/markdown-toc") (:keywords  " markdown" " toc" " tools"))])(markdown-preview-mode . [(20160216 336) ((markdown-mode (2 1)) (cl-lib (0 5)) (websocket (1 5)) ) "markdown realtime preview minor mode." single ((url: ."https://github.com/ancane/markdown-preview-mode") (:keywords  " markdown" " preview"))])(markdown-preview-eww . [(20160111 2302) ((emacs (24 4)) ) "Realtime preview by eww * lexicalbinding: t *" single ((url: ."https://github.com/niku/markdown-preview-eww") (:keywords ""))])(markdown-mode+ . [(20120829 2010) ((markdown-mode (20111229)) ) "+  extra functions for" tar ((url: ."https://github.com/milkypostman/markdown-mode-plus") (:keywords  " markdown" " latex" " osx" " rtf"))])(markdown-mode . [(20160513 2118) ((emacs (24)) (cl-lib (0 5)) ) "Major mode for Markdownformatted text * lexicalbinding: t *" tar ((url: ."https://github.com/jrblevin/markdown-mode") (:keywords  " Markdown" " GitHub Flavored Markdown" " itex"))])(mark-tools . [(20130614 1825)  nil  "Some simple tools to access the markring in Emacs" single ((url: ."https://github.com/stsquad/emacs-mark-tools") (:keywords ""))])(mark-multiple . [(20121118 2354)  nil  "A library that sorta lets you mark several regions at once" tar ((url: ."https://github.com/magnars/mark-multiple.el") (:keywords  " marking library"))])(marcopolo . [(20160421 1804) ((dash (2 9 0)) (s (1 9 0)) (pkg-info (0 5 0)) (request (0 1 0)) ) "Emacs client to the Docker HUB/Registry API" tar ((url: ."https://github.com/nlamirault/marcopolo") (:keywords  " docker"))])(map-regexp . [(20130523 503) ((cl-lib (0 2)) ) "map over matches of a regular expression" single ((url: ."https://github.com/tarsius/map-regexp") (:keywords  " convenience"))])(map-progress . [(20140311 532)  nil  "mapping macros that report progress" single ((url: ."https://github.com/tarsius/map-progress") (:keywords  " convenience"))])(manage-minor-mode . [(20141125 1243) ((emacs (24 3)) ) "Manage your minormodes easily * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/ShingoFukuyama/manage-minor-mode") (:keywords  " minor-mode manage emacs"))])(man-commands . [(20151222 621) ((cl-lib (0 5)) ) "Add interactive commands for every manpages installed in your computer." single ((url: ."https://github.com/nflath/man-commands") (:keywords ""))])(mallard-snippets . [(20131024 253) ((mallard-mode (0 1 1)) (yasnippet (0 8 0)) ) "Yasnippets for Mallard" tar ((url: ."https://github.com/jhradilek/emacs-mallard-snippets") (:keywords  " snippets Mallard"))])(mallard-mode . [(20131204 1225)  nil  "Major mode for editing Mallard files" tar ((url: ."https://github.com/jhradilek/emacs-mallard-mode") (:keywords  " XML Mallard"))])(malinka . [(20160402 1629) ((f (0 11 0)) (dash (2 4 0)) (s (1 9 0)) (projectile (0 11 0)) (rtags (0 0)) (cl-lib (0 3)) ) "A C/C++ project configuration package for Emacs" single ((url: ."https://github.com/LefterisJP/malinka") (:keywords  " c c++ project-management"))])(makey . [(20131231 2230) ((cl-lib (0 2)) ) "interactive commandline mode" single ((url: ."https://github.com/mickeynp/makey") (:keywords ""))])(maker-mode . [(20150116 1954) ((dash (2 8 0)) (s (1 3 0)) ) "Emacs mode for maker (scala build tool)" single ((url: ."https://github.com/fommil/maker-mode") (:keywords  " processes" " tools"))])(make-it-so . [(20150320 307) ((emacs (24)) (helm (1 5 3)) ) "Transform files with Makefile recipes. * lexicalbinding: t *" tar ((url: ."https://github.com/abo-abo/make-it-so") (:keywords  " make" " dired"))])(make-color . [(20140625 1950)  nil  "Alternative to picking color  update fg/bg color by pressing r/g/b/... keys" tar ((url: ."https://github.com/alezost/make-color.el") (:keywords  " color"))])(main-line . [(20151121 1006) ((cl-lib (0 5)) ) "moine replacement forked from an early version of powerline" single ((url: ."https://github.com/emacsfodder/emacs-mainline") (:keywords  " statusline / modeline"))])(magnatune . [(20151031 335) ((dash (2 9 0)) (s (1 9 0)) ) "browse 's music catalog" tar ((url: ."https://github.com/eikek/magnatune.el") (:keywords ""))])(magma-mode . [(20160304 2008)  nil  "Magma mode for Emacs" tar ((url: ."https://github.com/ThibautVerron/magma-mode") (:keywords ""))])(magit-topgit . [(20160314 354) ((magit (2 1 0)) (emacs (24 4)) ) "TopGit extension for Magit" single ((url: ."https://github.com/magit/magit-topgit") (:keywords  " vc tools"))])(magit-svn . [(20151219 2147) ((magit (2 1 0)) (emacs (24 4)) ) "GitSvn extension for Magit" single ((url: ."https://github.com/magit/magit-svn") (:keywords  " vc tools"))])(magit-stgit . [(20160224 2303) ((magit (2 1 0)) (emacs (24 4)) ) "StGit extension for Magit" single ((url: ."https://github.com/magit/magit-stgit") (:keywords  " vc tools"))])(magit-rockstar . [(20160517 2151) ((magit (2 6 1)) (dash (2 12 1)) ) "commit like a rockstar  * lexicalbinding: t *" single ((url: ."https://github.com/tarsius/magit-rockstar") (:keywords  " convenience"))])(magit-p4 . [(20160313 419) ((magit (2 1)) (magit-popup (2 1)) (p4 (12 0)) (cl-lib (0 5)) ) "gitp4 plugin for Magit" single ((url: ."https://github.com/qoocku/magit-p4") (:keywords  " vc tools"))])(magit-gitflow . [(20160428 1730) ((magit (2 1 0)) (magit-popup (2 2 0)) ) "gitflow extension for magit           * lexicalbinding: t *" single ((url: ."https://github.com/jtatarik/magit-gitflow") (:keywords  " vc tools"))])(magit-gh-pulls . [(20160513 1810) ((magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1)) (emacs (24)) (gh (0 9 1)) ) "GitHub pull requests extension for Magit" tar ((url: ."https://github.com/sigma/magit-gh-pulls") (:keywords  " git tools"))])(magit-gerrit . [(20160226 1730) ((magit (2 3 1)) ) "Magit plugin for Gerrit Code Review" single ((url: ."https://github.com/terranpro/magit-gerrit") (:keywords ""))])(magit-find-file . [(20151217 1942) ((magit (2 1 0)) (dash (2 8 0)) ) "completingread over all files in Git" single ((url: ."https://github.com/bradwright/magit-find-file.el") (:keywords  " git"))])(magit-filenotify . [(20151117 740) ((magit (1 3 0)) (emacs (24 4)) ) "Refresh status buffer when git tree changes * lexicalbinding: t *" single ((url: ."https://github.com/magit/magit-filenotify") (:keywords  " tools"))])(magit-annex . [(20160515 705) ((magit (2 3 0)) (cl-lib (0 3)) ) "Control gitannex from Magit  * lexicalbinding: t *" tar ((url: ."https://github.com/magit/magit-annex") (:keywords  " vc tools"))])(magic-latex-buffer . [(20160212 2203) ((emacs (24 3)) (cl-lib (0 5)) ) "Magically enhance LaTeXmode fontlocking for semiWYSIWYG editing" single ((url: ."https://github.com/zk-phi/magic-latex-buffer") (:keywords ""))])(magic-filetype . [(20160508 2207) ((s (1 9 0)) (emacs (24)) ) "Enhance filetype major mode * mode: emacslisp lexicalbinding: t *" single ((url: ."https://github.com/zonuexe/magic-filetype.el") (:keywords  " vim ft file magic-mode"))])(mag-menu . [(20150506 250) ((splitter (0 1 0)) ) "Intuitive keyboardcentric menu system   * lexicalbinding: t *" single ((url: ."https://github.com/chumpage/mag-menu") (:keywords  " convenience"))])(macrostep . [(20160222 341) ((cl-lib (0 5)) ) "interactive macro expander" tar ((url: ."https://github.com/joddie/macrostep") (:keywords  "   lisp" " languages" " macro" " debugging"))])(macro-math . [(20130329 4)  nil  "inbuffer mathematical operations" single ((url: ."https://github.com/nschum/macro-math.el") (:keywords  " convenience"))])(m-buffer . [(20160126 503) ((dash (2 8 0)) (emacs (24 3)) ) "ListOriented, Functional Buffer Manipulation * lexicalbinding: t *" tar ((url: ."https://github.com/phillord/m-buffer-el") (:keywords ""))])(lxc . [(20140411 422)  nil  "integration with Emacs" single ((url: ."https://github.com/nicferrier/emacs-lxc") (:keywords  " processes"))])(lusty-explorer . [(20150509 657)  nil  "Dynamic filesystem explorer and buffer switcher * mode: emacslisp *" single ((url: ."https://github.com/sjbach/lusty-emacs") (:keywords  " convenience" " files" " matching"))])(lush-theme . [(20150522 441) ((emacs (24)) ) "Filename:" single ((url: ."https://github.com/andre-richter/emacs-lush-theme") (:keywords  " theme" " dark" " strong colors"))])(lua-mode . [(20160503 241)  nil  "a majormode for editing Lua scripts" tar ((url: ."https://github.com/immerrr/lua-mode") (:keywords  " languages" " processes" " tools"))])(love-minor-mode . [(20130430 601) ((lua-mode (20130419)) ) "Minor mode for working on LÖVE projects" single ((url: ."https://github.com/ejmr/love-minor-mode") (:keywords ""))])(lorem-ipsum . [(20140912 508)  nil  "Insert dummy pseudo Latin text." single ((url: ."https://github.com/jschaf/emacs-lorem-ipsum") (:keywords  " tools" " language" " convenience"))])(loop . [(20151228 1926)  nil  "friendly imperative  structures" single ((url: ."https://github.com/Wilfred/loop.el") (:keywords  " loop" " while" " for each" " break" " continue"))])(look-dired . [(20151116 956) ((look-mode (1 0)) ) "Filename:" single ((url: ."https://github.com/vapniks/look-dired") (:keywords  " convenience"))])(lolcode-mode . [(20140208 500)  nil  "Major mode for editing LOLCODE" single ((url: ."https://github.com/bodil/lolcode-mode") (:keywords  " LOLCODE major mode"))])(logview . [(20160308 354) ((emacs (24 1)) ) "Major mode for viewing log files  * lexicalbinding: t *" single ((url: ."https://github.com/doublep/logview") (:keywords  "   files" " tools"))])(logstash-conf . [(20150314 901)  nil  "basic mode for editing logstash configuration" single ((url: ."https://github.com/Wilfred/logstash-conf.el") (:keywords ""))])(logito . [(20120226 455) ((eieio (1 3)) ) "logging library for Emacs" single ((url: ."https://github.com/sigma/logito") (:keywords  " lisp" " tool"))])(logalimacs . [(20131022 229) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120)) ) "Frontend to logalingcommand for Ruby gems" single ((url: ."https://github.com/logaling/logalimacs") (:keywords  " translation" " logaling-command"))])(log4e . [(20150105 2357)  nil  "provide logging framework forisp" single ((url: ."https://github.com/aki2o/log4e") (:keywords  " log"))])(loccur . [(20160130 422) ((cl-lib (0)) ) "Perform an occurlike folding in current buffer * lexicalbinding: t *" single ((url: ."https://github.com/fourier/loccur") (:keywords  " matching"))])(loc-changes . [(20150303 48)  nil  "keep track of positions even after buffer changes" single ((url: ."https://github.com/rocky/emacs-loc-changes") (:keywords ""))])(load-theme-buffer-local . [(20151013 728)  nil  "Install emacs24 color themes by buffer." single ((url: ."https://github.com/vic/color-theme-buffer-local") (:keywords  " faces"))])(load-relative . [(20160505 1519)  nil  "ative file load (within a multifile Emacs package)" single ((url: ."https://github.com/rocky/emacs-load-relative") (:keywords  " internal"))])(livid-mode . [(20131116 2144) ((skewer-mode (1 5 3)) (s (1 8 0)) ) "Live browser eval of JavaScript every time a buffer changes" single ((url: ."https://github.com/pandeiro/livid-mode") (:keywords ""))])(livescript-mode . [(20140613 1221)  nil  "Major mode for editing LiveScript files" single ((url: ."https://github.com/yhisamatsu/livescript-mode") (:keywords  " languages livescript"))])(lively . [(20160209 235)  nil  "interactiy updating text" single ((url: ."https://github.com/emacsorphanage/lively") (:keywords ""))])(live-code-talks . [(20150116 623) ((emacs (24)) (narrowed-page-navigation (0 1)) (cl-lib (0 5)) ) "Support for slides with live code in them  * lexicalbinding: t *" single ((url: ."https://github.com/david-christiansen/live-code-talks") (:keywords  " docs" " multimedia"))])(literate-coffee-mode . [(20160114 2034) ((coffee-mode (0 5 0)) ) "majormode for Literate CoffeeScript * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-literate-coffee-mode") (:keywords ""))])(litable . [(20150908 2209)  nil  "dynamic evaluation replacement with emacs" single ((url: ."https://github.com/Fuco1/litable") (:keywords  " lisp"))])(lit-mode . [(20141205 1241)  nil  "Major mode for lit" single ((url: ."https://github.com/HectorAE/lit-mode") (:keywords  " languages" " tools"))])(list-utils . [(20160414 2202)  nil  "Listmanipulation utility functions" single ((url: ."https://github.com/rolandwalker/list-utils") (:keywords  " extensions"))])(list-unicode-display . [(20150219 1701) ((cl-lib (0 5)) ) "Search for and list unicode characters by name" single ((url: ."https://github.com/purcell/list-unicode-display") (:keywords  " convenience"))])(list-register . [(20091204 215)  nil  "List register" single ((url: ."https://github.com/emacsmirror/list-register") (:keywords ""))])(list-packages-ext . [(20151116 116) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6)) ) "ras  Extras for listpackages  * lexicalbinding: t *" single ((url: ."https://github.com/laynor/list-packages-ext") (:keywords  " convenience" " tools"))])(list-environment . [(20151227 1056)  nil  "A tabulated process environment editor  * lexicalbinding: t *" single ((url: ."https://github.com/dgtized/list-environment.el") (:keywords  " processes" " unix"))])(lispyscript-mode . [(20151123 2209)  nil  "Major mode for LispyScript code." single ((url: ."https://github.com/krisajenkins/lispyscript-mode") (:keywords  " lisp languages"))])(lispy . [(20160516 1813)  nil  "vilike Paredit. * lexicalbinding: t *" tar ((url: ."https://github.com/abo-abo/lispy") (:keywords  " lisp"))])(lisp-extra-font-lock . [(20160508 602)  nil  "Highlight bound variables and quoted exprs." single ((url: ."https://github.com/Lindydancer/lisp-extra-font-lock") (:keywords  " languages" " faces"))])(liso-theme . [(20160411 429)  nil  "Eclectic Dark Theme for GNU Emacs" single ((url: ."https://github.com/caisah/liso-theme") (:keywords  " theme" " themes"))])(linum-relative . [(20160510 1618)  nil  "display ative line number in emacs." single ((url: ."https://github.com/coldnew/linum-relative") (:keywords  " converience"))])(linum-off . [(20160218 1059)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/linum-off") (:keywords  " Line Numbering"))])(linphone . [(20130524 1909)  nil  "Emacs interface to Linphone" tar ((url: ."https://github.com/zabbal/emacs-linphone") (:keywords  " comm"))])(link-hint . [(20160511 1532) ((emacs (24 1)) (avy (0 3 0)) (cl-lib (0 5)) ) "Use avy to open or copy visible urls." single ((url: ."https://github.com/noctuid/link-hint.el") (:keywords  " url"))])(link . [(20140718 1129)  nil  "Hypertext s in text buffers" single ((url: ."https://github.com/myrkr/dictionary-el") (:keywords  " interface" " hypermedia"))])(lingr . [(20100808 131)  nil  "Lingr Client for GNU Emacs" single ((url: ."https://github.com/lugecy/lingr-el") (:keywords  " chat" " client" " Internet"))])(light-soap-theme . [(20150607 2245) ((emacs (24)) ) "Emacs 24 theme with a light background." single ((url: ."https://github.com/mswift42/light-soap-theme") (:keywords ""))])(lice . [(20151226 222)  nil  "License And Header Template" tar ((url: ."https://github.com/buzztaiki/lice-el") (:keywords  " template" " license" " tools"))])(libmpdee . [(20160118 701)  nil  "Client end library for mpd, a music playing daemon" single ((url: ."https://github.com/andyetitmoves/libmpdee") (:keywords  "	music" " mpd"))])(lexbind-mode . [(20141027 2229)  nil  "Puts the value of lexicalbinding in the mode line * lexicalbinding: t *" single ((url: ."https://github.com/spacebat/lexbind-mode") (:keywords  "   convenience" " lisp"))])(leuven-theme . [(20160515 714)  nil  "Awesome Emacs color theme on white background" single ((url: ."https://github.com/fniessen/emacs-leuven-theme") (:keywords  " color theme"))])(letcheck . [(20160203 348)  nil  "Check the erroneous assignments in let forms" single ((url: ."https://github.com/Fuco1/letcheck") (:keywords  " convenience"))])(less-css-mode . [(20150511 1819)  nil  "Major mode for editing LESS CSS files (lesscss.org)" single ((url: ."https://github.com/purcell/less-css-mode") (:keywords  " less css mode"))])(lentic-server . [(20150320 2126) ((web-server (0 1 1)) (lentic (0 8)) ) "Web Server for Emacs Literate Source" tar ((url: ."https://github.com/phillord/lentic-server") (:keywords ""))])(lentic . [(20160111 105) ((f (0 17 2)) (dash (2 5 0)) (s (1 9 0)) (emacs (24 4)) (m-buffer (0 13)) ) "One buffer as a view of another * lexicalbinding: t *" tar ((url: ."https://github.com/phillord/lentic") (:keywords ""))])(lenlen-theme . [(20150412 109) ((color-theme-solarized (20150110)) ) "a solarizedbased kawaii light theme" single ((url: ."https://github.com/zk-phi/lenlen-theme") (:keywords ""))])(lemon-mode . [(20130216 2104)  nil  "A major mode for editing lemon grammar files" single ((url: ."https://github.com/mooz/lemon-mode") (:keywords  " lemon"))])(legalese . [(20150821 124)  nil  "Add  to your program files" single ((url: ."https://github.com/jorgenschaefer/legalese") (:keywords  " convenience"))])(leerzeichen . [(20151106 1429)  nil  "Minor mode to display whitespace characters." single ((url: ."https://github.com/fgeller/leerzeichen.el") (:keywords  " whitespace characters"))])(ledger-mode . [(20160505 943)  nil  " " single ((url: ."https://github.com/ledger/ledger") (:keywords ""))])(ldap-mode . [(20091204 215)  nil  "major modes for editing LDAP schema and LDIF files  *coding: iso88591*" single ((url: ."https://github.com/emacsmirror/ldap-mode") (:keywords  " data"))])(lavender-theme . [(20141116 2353) ((emacs (24 0)) ) "an Emacs 24 theme based on Lavender (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-lavender-theme") (:keywords ""))])(launchctl . [(20150520 1429) ((emacs (24 1)) ) "Interface to  on Mac OS X." single ((url: ."https://github.com/pekingduck/launchctl-el") (:keywords  " tools" " convenience"))])(launch . [(20130620 604)  nil  "files with OSstandard associated applications." single ((url: ."https://github.com/sfllaw/emacs-launch") (:keywords  " convenience processes"))])(latex-unicode-math-mode . [(20160411 2030)  nil  "Input method for Unicode math symbols * Coding: utf8 *" single ((url: ."https://github.com/Christoph-D/latex-unicode-math-mode") (:keywords ""))])(latex-preview-pane . [(20151024 403)  nil  "Makes LaTeX editing less painful by providing a updatable preview pane" tar ((url: ."https://github.com/jsinglet/latex-preview-pane") (:keywords  " latex" " preview"))])(latex-extra . [(20160329 821) ((cl-lib (0 5)) (auctex (11 86 1)) ) "Adds several useful functionalities to LaTeXmode." single ((url: ."https://github.com/Malabarba/latex-extra") (:keywords  " tex"))])(latest-clojure-libraries . [(20150708 2049)  nil  "Clojure dependency resolver" single ((url: ."https://github.com/AdamClements/latest-clojure-libraries") (:keywords ""))])(langtool . [(20160118 1901) ((cl-lib (0 3)) ) "Grammar check utility using LanguageTool" single ((url: ."https://github.com/mhayashi1120/Emacs-langtool") (:keywords  " docs"))])(langdoc . [(20150218 1445) ((cl-lib (0 2)) ) "p to define p document mode for various languages" single ((url: ."https://github.com/tom-tan/langdoc") (:keywords  " convenience" " eldoc"))])(lang-refactor-perl . [(20131123 527)  nil  "Simple refactorings, primarily for Perl" single ((url: ."https://github.com/jplindstrom/emacs-lang-refactor-perl") (:keywords  " languages" " refactoring" " perl"))])(labburn-theme . [(20160517 2123)  nil  "A lab color space zenburn theme." single ((url: ."https://github.com/ksjogo/labburn-theme") (:keywords  " theme" " zenburn"))])(kwin . [(20150309 212)  nil  "communicatewith the KWin window manager" single ((url: ."https://github.com/reactormonk/kwin-minor-mode") (:keywords ""))])(kv . [(20140108 2334)  nil  "key/value data structure functions" single ((url: ."https://github.com/nicferrier/emacs-kv") (:keywords  " lisp"))])(kurecolor . [(20150424 1222) ((s (1 0)) (emacs (24 1)) ) "color editing goodies for Emacs" tar ((url: ."https://github.com/emacsfodder/kurecolor") (:keywords ""))])(ksp-cfg-mode . [(20160511 2312) ((cl-lib (0 5)) ) "major mode for editing KSP CFG files" single ((url: ."https://github.com/lashtear/ksp-cfg-mode") (:keywords  " data"))])(kroman . [(20150917 1702)  nil  "Korean hangul romanization" single ((url: ."https://github.com/cheunghy/kroman-el") (:keywords  " korean" " roman"))])(kpm-list . [(20160311 250)  nil  "An emacs buffer list that tries to inligently group together buffers." single ((url: ."https://github.com/KMahoney/kpm-list") (:keywords ""))])(kooten-theme . [(20160415 304) ((emacs (24 1)) ) "Dark color theme" single ((url: ."https://github.com/kootenpv/emacs-kooten-theme") (:keywords  " themes"))])(kolon-mode . [(20140122 1934)  nil  "Filename:" single ((url: ."https://github.com/samvtran/kolon-mode") (:keywords  " xslate" " perl"))])(kixtart-mode . [(20150612 4) ((emacs (24)) ) "major mode for Kixtart scripting files" single ((url: ."https://github.com/ryrun/kixtart-mode") (:keywords  " languages"))])(kite-mini . [(20160508 1906) ((dash (2 11 0)) (websocket (1 5)) ) "Remoy evaluate JavaScript in the WebKit debugger" tar ((url: ."https://github.com/tungd/kite-mini.el") (:keywords  " webkit"))])(kite . [(20130202 338) ((json (1 2)) (websocket (0 93 1)) ) "WebKit inspector frontend" tar ((url: ."https://github.com/jscheid/kite") (:keywords  " tools"))])(killer . [(20120808 1922)  nil  "kill and ete text" single ((url: ."https://github.com/tarsius/killer") (:keywords  " convenience"))])(kill-ring-search . [(20140422 2355)  nil  "incremental search for the kill ring" tar ((url: ."https://github.com/nschum/kill-ring-search.el") (:keywords  " convenience" " matching"))])(kill-or-bury-alive . [(20160128 1709) ((emacs (24 4)) (cl-lib (0 5)) ) "Precise control over buffer killing in Emacs * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/kill-or-bury-alive") (:keywords  " buffer" " killing" " convenience"))])(kibit-helper . [(20150509 11) ((s (0 8)) (emacs (24)) ) "Conveniently use the Kibit Leiningen plugin from Emacs" single ((url: ."https://github.com/brunchboy/kibit-helper") (:keywords  " languages" " clojure" " kibit"))])(kfg . [(20140909 1411) ((f (0 17 1)) ) "an emacs configuration system" single ((url: ."https://github.com/abingham/kfg") (:keywords ""))])(keyword-search . [(20160415 1741)  nil  "browser keyword search from Emacs" single ((url: ."https://github.com/keyword-search/keyword-search") (:keywords  " web" " search" " keyword"))])(keyset . [(20160209 1859) ((dash (2 8 0)) (cl-lib (0 5)) ) "A small library for structuring key bindings." single ((url: ."https://github.com/HKey/keyset") (:keywords ""))])(keymap-utils . [(20160213 729) ((cl-lib (0 3)) ) "keymap utilities" single ((url: ."https://github.com/tarsius/keymap-utils") (:keywords  " convenience" " extensions"))])(keyfreq . [(20160516 2216) ((cl-lib (0 5)) ) "track command frequencies" single ((url: ."https://github.com/dacap/keyfreq") (:keywords ""))])(keydef . [(20090429 331)  nil  "a simpler way to define keys, with kbd syntax" single ((url: ."https://github.com/emacsorphanage/keydef") (:keywords  " convenience lisp customization keyboard keys"))])(keychain-environment . [(20160424 1946)  nil  "load keychain environment variables" single ((url: ."https://github.com/tarsius/keychain-environment") (:keywords  " gnupg" " pgp" " ssh"))])(key-seq . [(20150907 1556) ((key-chord (0 6)) ) "map pairs of sequentially pressed keys to commands" single ((url: ."https://github.com/vlevit/key-seq.el") (:keywords  " convenience keyboard keybindings"))])(key-leap . [(20160110 437) ((emacs (24 3)) ) "Leap between lines by typing keywords" tar ((url: ."https://github.com/MartinRykfors/key-leap") (:keywords  " point" " convenience"))])(key-intercept . [(20140211 1549)  nil  "Intercept prefix keys" single ((url: ."https://github.com/tarao/key-intercept-el") (:keywords  " keyboard"))])(key-combo . [(20150405 358)  nil  "map key sequence to commands" single ((url: ."https://github.com/uk-ar/key-combo") (:keywords  " keyboard input"))])(kerl . [(20150425 405)  nil  "Emacs integration for" single ((url: ."https://github.com/correl/kerl.el") (:keywords  " tools"))])(karma . [(20160220 2045) ((emacs (24)) (pkg-info (0 4)) ) "Filename:" single ((url: ."https://github.com/tonini/karma.el") (:keywords  " language" " javascript" " js" " karma" " testing"))])(kaomoji . [(20160218 1620) ((helm-core (1 9 1)) (emacs (24 3)) ) "Input  superb easily      * lexicalbinding: t *" tar ((url: ."https://github.com/kuanyui/kaomoji.el") (:keywords  " tools" " fun"))])(kanji-mode . [(20160411 2233)  nil  "View stroke order for kanji characters at cursor" single ((url: ."https://github.com/wsgac/kanji-mode") (:keywords ""))])(kakapo-mode . [(20150907 1252) ((cl-lib (0 5)) ) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((url: ."https://github.com/listx/kakapo-mode") (:keywords  " indentation"))])(kaesar-mode . [(20160128 1808) ((kaesar (0 1 4)) (cl-lib (0 3)) ) "Encrypt/Decrypt buffer by AES with password." single ((url: ."https://github.com/mhayashi1120/Emacs-kaesar") (:keywords  " data" " convenience"))])(kaesar-file . [(20160128 1808) ((kaesar (0 1 1)) ) "Encrypt/Decrypt file by AES with password." single ((url: ."https://github.com/mhayashi1120/Emacs-kaesar") (:keywords  " data" " files"))])(kaesar . [(20160128 1808) ((cl-lib (0 3)) ) "Another AES algorithm encrypt/decrypt string with password." single ((url: ."https://github.com/mhayashi1120/Emacs-kaesar") (:keywords  " data"))])(jvm-mode . [(20150422 1508) ((dash (2 6 0)) (emacs (24)) ) "Monitor and manage your JVMs * lexicalbinding: t *" single ((url: ."https://github.com/martintrojer/jvm-mode.el") (:keywords  " convenience"))])(jumplist . [(20151120 1145) ((cl-lib (0 5)) ) "Jump like vim  or ex" single ((url: ."https://github.com/ganmacs/jumplist") (:keywords  " jumplist vim"))])(jump-to-line . [(20130123 53)  nil  "Jump to line number at point." single ((url: ."https://github.com/ongaeshi/jump-to-line") (:keywords  " jump" " line" " back" " file" " ruby" " csharp" " python" " perl"))])(jump-char . [(20160505 2351)  nil  "navigation by char" single ((url: ."https://github.com/lewang/jump-char") (:keywords ""))])(jump . [(20151009 1629) ((inflections (1 1)) (findr (0 7)) ) "build functions which contextually  between files" single ((url: ."https://github.com/eschulte/jump.el") (:keywords  " project" " convenience" " navigation"))])(jumblr . [(20151124 1330) ((dash (2 2 0)) (s (1 8 0)) ) "an anagram game for emacs" tar ((url: ."https://github.com/mkmcc/jumblr") (:keywords  " anagram" " word game" " games"))])(julia-shell . [(20160514 2228) ((julia-mode (0 3)) ) "Major mode for an inferior Julia sl" single ((url: ."https://github.com/dennisog/julia-shell-mode") (:keywords ""))])(julia-mode . [(20160518 143)  nil  "Major mode for editing Julia source code" tar ((url: ."https://github.com/JuliaLang/julia-emacs") (:keywords  " languages"))])(jst . [(20150604 1940) ((f (0 17)) (pcache (0 3)) (dash (2 10)) (s (1 9)) (emacs (24 4)) ) "JS test mode" single ((url: ."https://github.com/cheunghy/jst-mode") (:keywords  " js" " javascript" " jasmine" " coffee" " coffeescript"))])(jss . [(20130508 2223) ((emacs (24 1)) (js2-mode (0)) (websocket (0)) ) "An emacs interface to webkit and mozilla debuggers" tar ((url: ."https://github.com/segv/jss") (:keywords  " languages"))])(json-snatcher . [(20150512 1147) ((emacs (24)) ) "Grabs the path to JSON values in a JSON file * lexicalbinding: t *" single ((url: ."https://github.com/Sterlingg/json-snatcher") (:keywords ""))])(json-rpc . [(20160427 2307) ((emacs (24 1)) (cl-lib (0 5)) ) "JSONRPC library * lexicalbinding: t *" single ((url: ."https://github.com/skeeto/elisp-json-rpc") (:keywords ""))])(json-reformat . [(20160212 1653)  nil  "Reformatting tool for JSON" single ((url: ."https://github.com/gongo/json-reformat") (:keywords  " json"))])(json-mode . [(20151117 1200) ((json-snatcher (1 0 0)) (json-reformat (0 0 5)) ) "Major mode for editing JSON files" single ((url: ."https://github.com/joshwnj/json-mode") (:keywords ""))])(jsfmt . [(20150728 625)  nil  "Interface to  command for javascript files" single ((url: ."https://github.com/brettlangdon/jsfmt.el") (:keywords ""))])(jscs . [(20151016 149) ((emacs (24 1)) (cl-lib (0 5)) ) "Consistent JavaScript editing using JSCS  * lexicalbinding: t *" single ((url: ."https://github.com/papaeye/emacs-jscs") (:keywords  " languages" " convenience"))])(js3-mode . [(20160515 2350)  nil  "An improved JavaScript editing mode" tar ((url: ."https://github.com/thomblake/js3-mode") (:keywords  "  javascript languages"))])(js2-refactor . [(20160506 2112)  nil  "The beginnings of a JavaScript refactoring library in emacs." tar ((url: ."https://github.com/magnars/js2-refactor.el") (:keywords  " conveniences"))])(js2-mode . [(20160511 737) ((emacs (24 1)) (cl-lib (0 5)) ) "Improved JavaScript editing mode" tar ((url: ."https://github.com/mooz/js2-mode") (:keywords  " languages" " javascript"))])(js2-highlight-vars . [(20150914 1608) ((js2-mode (20150908)) ) "highlight occurrences of the variable under cursor" single ((url: ."https://github.com/unhammer/js2-highlight-vars.el") (:keywords ""))])(js2-closure . [(20151004 1648) ((js2-mode (20140114)) ) "Google Closure dependency manager" tar ((url: ."https://github.com/jart/js2-closure") (:keywords ""))])(js-doc . [(20160209 907)  nil  "Insert JsDoc style comment easily" single ((url: ."https://github.com/mooz/js-doc") (:keywords  " document" " comment"))])(js-comint . [(20160220 1950) ((nvm (0 2 0)) ) "Run a JavaScript interpreter in an inferior process window." single ((url: ."https://github.com/redguardtoo/js-comint") (:keywords  " javascript" " node" " inferior-mode" " convenience"))])(jquery-doc . [(20150812 1558)  nil  "jQuery api documentation interface for emacs" tar ((url: ."https://github.com/ananthakumaran/jquery-doc.el") (:keywords  " docs" " jquery"))])(jq-mode . [(20160222 2040) ((emacs (24 3)) ) "Edit jq scripts." tar ((url: ."https://github.com/ljos/jq-mode") (:keywords ""))])(jonprl-mode . [(20151203 1742) ((emacs (24 3)) (yasnippet (0 8 0)) (cl-lib (0 5)) ) "A major mode for editing JonPRL files  * lexicalbinding: t *" tar ((url: ."https://github.com/david-christiansen/jonprl-mode") (:keywords  " languages"))])(jknav . [(20121007 425)  nil  "Automatically enable j/k keys for linebased navigation" single ((url: ."https://github.com/aculich/jknav.el") (:keywords  " keyboard navigation"))])(jist . [(20151229 750) ((magit (2 1 0)) (dash (2 12 0)) (pkg-info (0 4)) (emacs (24 4)) (request (0 2 0)) (let-alist (1 0 4)) ) "Gist integration                     * lexicalbinding: t *" single ((url: ."https://github.com/emacs-pe/jist.el") (:keywords  " convenience"))])(jira-markup-mode . [(20150602 1359)  nil  "Emacs Major mode for JIRAmarkupformatted text files" single ((url: ."https://github.com/mnuessler/jira-markup-mode") (:keywords  " jira" " markup"))])(jinja2-mode . [(20141128 1807)  nil  "A major mode for jinja2" single ((url: ."https://github.com/paradoxxxzero/jinja2-mode") (:keywords ""))])(jg-quicknav . [(20160217 1235) ((s (1 9 0)) (cl-lib (0 5)) ) "Quickly navigate the file system to find a file." single ((url: ."https://github.com/jeffgran/jg-quicknav") (:keywords  " navigation"))])(jenkins-watch . [(20121005 726)  nil  "Watch continuous integration build status * indenttabsmode: t tabwidth: 8 *" single ((url: ."https://github.com/ataylor284/jenkins-watch") (:keywords ""))])(jenkins . [(20151115 1108) ((dash (2 12)) (json (1 4)) (emacs (24 3)) ) "Minimalistic Jenkins client for Emacs" single ((url: ."https://github.com/rmuslimov/jenkins.el") (:keywords  " jenkins" " convenience"))])(jekyll-modes . [(20141117 2114) ((polymode (0 2)) ) "Major modes (markdown and HTML) for authoring Jekyll content" single ((url: ."https://github.com/fred-o/jekyll-modes") (:keywords  " docs"))])(jedi-direx . [(20140310 1736) ((jedi (0 1 2)) ) "Tree style source code viewer for Python buffer" single ((url: ."https://github.com/tkf/emacs-jedi-direx") (:keywords ""))])(jedi-core . [(20160502 1143) ((python-environment (0 0 2)) (epc (0 1 0)) (emacs (24)) (cl-lib (0 5)) ) "Common code of jedi and companyjedi * lexicalbinding: t *" tar ((url: ."https://github.com/tkf/emacs-jedi") (:keywords ""))])(jedi . [(20160502 1143) ((auto-complete (1 4)) (jedi-core (0 2 2)) (emacs (24)) ) "a Python autocompletion for Emacs * lexicalbinding: t *" single ((url: ."https://github.com/tkf/emacs-jedi") (:keywords ""))])(jdee . [(20160316 2227) ((emacs (24 3)) ) "Java Deopment Environment for Emacs" tar ((url: ."https://github.com/jdee-emacs/jdee") (:keywords  " java" " tools"))])(jbeans-theme . [(20160407 357) ((emacs (24)) ) "Jbeans theme for GNU Emacs 24 (deftheme)" single ((url: ."https://github.com/synic/jbeans-emacs") (:keywords ""))])(jazz-theme . [(20160413 136)  nil  "A warm color theme for Emacs 24." single ((url: ."https://github.com/donderom/jazz-theme") (:keywords ""))])(jaword . [(20150325 2218) ((tinysegmenter (0 1)) ) "Minormode for handling Japanese words better" single ((url: ."https://github.com/zk-phi/jaword") (:keywords ""))])(javap-mode . [(20120224 608)  nil  "URL: http://github.com/hiredman/" single ((url: ."https://github.com/hiredman/javap-mode") (:keywords ""))])(javadoc-lookup . [(20160214 831) ((cl-lib (0 3)) ) "Javadoc Emacs integration with Maven" tar ((url: ."https://github.com/skeeto/javadoc-lookup") (:keywords ""))])(java-snippets . [(20160329 1110) ((yasnippet (0 8 0)) ) "Yasnippets for Java" tar ((url: ."https://github.com/nekop/yasnippet-java-mode") (:keywords ""))])(java-imports . [(20160312 715) ((pcache (0 3 2)) (s (1 10 0)) (emacs (24 4)) ) "Code for dealing with Java imports" single ((url: ."https://github.com/dakrone/emacs-java-imports") (:keywords  " java"))])(jaunte . [(20130413 1719)  nil  "Emacs Hit a Hint" single ((url: ."https://github.com/kawaguchi/jaunte.el") (:keywords ""))])(jasminejs-mode . [(20150527 1944)  nil  "A minor mode for manipulating jasmine test files * lexicalbinding: t *" tar ((url: ."https://github.com/stoltene2/jasminejs-mode") (:keywords  " javascript jasmine"))])(jar-manifest-mode . [(20160501 826)  nil  "Major mode to edit JAR manifest files" single ((url: ."https://github.com/omajid/jar-manifest-mode") (:keywords  " convenience languages"))])(jape-mode . [(20151212 1143)  nil  "An Emacs editing mode mode for GATE's JAPE files" single ((url: ."https://github.com/tanzoniteblack/jape-mode") (:keywords  " languages jape gate"))])(japanlaw . [(20160129 1630) ((cl-lib (0 5)) ) "Japan law from law.egov.go.jp * Coding: utf8 *" tar ((url: ."https://github.com/mhayashi1120/japanlaw.el") (:keywords  " docs help"))])(japanese-holidays . [(20150209 937) ((cl-lib (0 3)) ) "Filename:" single ((url: ."https://github.com/emacs-jp/japanese-holidays") (:keywords  " calendar"))])(jammer . [(20160310 1659)  nil  "Punish yourf for using Emacs inefficiently" single ((url: ."https://github.com/wasamasa/jammer") (:keywords  " games"))])(jade-mode . [(20151025 53)  nil  "URL: https://github.com/brianc/" single ((url: ."https://github.com/brianc/jade-mode") (:keywords ""))])(jabber-otr . [(20150918 1944) ((jabber (0 8 92)) (emacs (24)) ) "OffTheRecord messaging for jabber  * lexicalbinding: t *" single ((url: ."https://github.com/legoscia/emacs-jabber-otr") (:keywords  " comm"))])(j-mode . [(20140702 2309)  nil  "Major mode for editing J programs" tar ((url: ."https://github.com/zellio/j-mode") (:keywords  " J" " Langauges"))])(iy-go-to-char . [(20150927 1026)  nil  "Go to next CHAR which is similar to "f" and "t" in vim" single ((url: ."https://github.com/doitian/iy-go-to-char") (:keywords  " navigation" " search"))])(ix . [(20151130 1158) ((grapnel (0 5 3)) ) "Emacs client for http://.io pastebin" single ((url: ."https://github.com/theanalyst/ix.el") (:keywords ""))])(ivy-bibtex . [(20160423 700) ((f (0 16 2)) (dash (2 6 0)) (parsebib (1 0)) (s (1 9 0)) (biblio (0 2)) (cl-lib (0 5)) (swiper (0 7 0)) ) "A BibTeX bibliography manager based on Ivy" tar ((url: ."https://github.com/tmalsburg/helm-bibtex") (:keywords ""))])(ivy . [(20160518 449) ((emacs (24 1)) ) "Incremental Vertical completYon * lexicalbinding: t *" tar ((url: ."https://github.com/abo-abo/swiper") (:keywords  " matching"))])(ivs-edit . [(20140720 1846) ((dash (2 6 0)) (emacs (24 3)) (cl-lib (1 0)) ) "IVS (Ideographic Variation Sequence) editing tool  * lexicalbinding: t *" tar ((url: ."https://github.com/kawabata/ivs-edit") (:keywords  " Ideographic Variation Sequence"))])(ivariants . [(20140802 2136) ((emacs (24 3)) (ivs-edit (1 0)) ) "Filename:" tar ((url: ."https://github.com/kawabata/emacs-ivariants") (:keywords  " Ideographic Variants"))])(iterator . [(20160407 306) ((emacs (24)) (cl-lib (0 5)) ) "A library to create and useisp s objects. * lexicalbinding: t *" single ((url: ."https://github.com/thierryvolpiatto/iterator") (:keywords ""))])(itasca . [(20160406 2042) ((emacs (24 3)) ) "Major modes for Itasca software data files." tar ((url: ."https://github.com/jkfurtney/itasca-emacs") (:keywords  " itasca" " FLAC" " 3DEC" " UDEC" " FLAC3D" " PFC" " PFC2D" " PFC3D" " FISH"))])(itail . [(20151114 35)  nil  "An interactive tail mode" single ((url: ."https://github.com/re5et/itail") (:keywords  " tail"))])(iss-mode . [(20141002 313)  nil  "Mode for InnoSetup install scripts" single ((url: ."https://github.com/rasmus-toftdahl-olesen/iss-mode") (:keywords ""))])(isgd . [(20150414 1736)  nil  "Shorten URLs using the .com shortener service" single ((url: ."https://github.com/chmouel/isgd.el") (:keywords ""))])(isend-mode . [(20150724 2114)  nil  "Interactiy send parts of an Emacs buffer to an interpreter" single ((url: ."https://github.com/ffevotte/isend-mode.el") (:keywords ""))])(isearch-symbol-at-point . [(20130729 621)  nil  "Use isearch to search for the symbol at point" single ((url: ."https://github.com/re5et/isearch-symbol-at-point") (:keywords  " isearch"))])(isearch-dabbrev . [(20141224 1422) ((cl-lib (0 5)) ) "Use dabbrev in isearch" single ((url: ."https://github.com/Dewdrops/isearch-dabbrev") (:keywords  " dabbrev isearch"))])(irony-eldoc . [(20141227 1419) ((emacs (24)) (irony (0 1)) (cl-lib (0 5)) ) "ironymode support fordocmode * lexicalbinding: t *" single ((url: ."https://github.com/ikirill/irony-eldoc") (:keywords  " c" " c++" " objc" " convenience" " tools"))])(irony . [(20160511 2208) ((json (1 2)) (cl-lib (0 5)) ) "C/C++ minor mode powered by libclang" tar ((url: ."https://github.com/Sarcasm/irony-mode") (:keywords  " c" " convenience" " tools"))])(iregister . [(20150516 507)  nil  "Interactive register commands for Emacs." tar ((url: ."https://github.com/atykhonov/iregister.el") (:keywords  " convenience"))])(ir-black-theme . [(20130303 1607)  nil  "Port of irblack theme" single ((url: ."https://github.com/jmdeldin/ir-black-theme.el") (:keywords  " faces"))])(ipretty . [(20151122 1557)  nil  "Interactive Emacs Lisp prettyprinting" single ((url: ."https://github.com/steckerhalter/ipretty") (:keywords  " pretty-print elisp buffer"))])(iplayer . [(20150101 1855)  nil  "Browse and download BBC TV/radio shows" single ((url: ."https://github.com/csrhodes/iplayer-el") (:keywords  " multimedia" " bbc"))])(iodine-theme . [(20151101 39) ((emacs (24)) ) "A light emacs color theme" single ((url: ."https://github.com/srdja/iodine-theme") (:keywords  " themes"))])(ioccur . [(20150315 1726)  nil  "Incremental occur" single ((url: ."https://github.com/thierryvolpiatto/ioccur") (:keywords ""))])(io-mode-inf . [(20140129 334)  nil  "Interaction with an Io interpreter." single ((url: ."https://github.com/slackorama/io-emacs") (:keywords  " io languages"))])(io-mode . [(20140814 1821)  nil  "Major mode to edit Io language files in Emacs" single ((url: ."https://github.com/superbobry/io-mode") (:keywords  " languages" " io"))])(interval-tree . [(20130325 2207) ((dash (1 1 0)) ) "Interval tree data structure for 1D range queries" single ((url: ."https://github.com/Fuco1/interval-tree") (:keywords  " extensions" " data structure"))])(interval-list . [(20150328 118) ((dash (2 4 0)) (emacs (24 4)) (cl-lib (0 5)) ) "Interval list data structure for 1D ections" single ((url: ."https://github.com/Fuco1/interval-list") (:keywords  " extensions" " data structure"))])(interleave . [(20160518 48)  nil  "Interleaving text books since 2015" single ((url: ."https://github.com/rudolfochrist/interleave") (:keywords ""))])(interaction-log . [(20160305 2101) ((cl-lib (0)) ) "exhaustive log of interactions with Emacs   * lexicalbinding: t *" single ((url: ."https://github.com/michael-heerdegen/interaction-log.el") (:keywords  " convenience"))])(insfactor . [(20141117 802)  nil  "Client for a Clojure project with  in it" single ((url: ."https://github.com/duelinmarkers/insfactor.el") (:keywords  " clojure"))])(insert-shebang . [(20160413 2212)  nil  "Insert shebang line automatically." single ((url: ."https://github.com/psachin/insert-shebang") (:keywords  " shebang" " tool" " convenience"))])(inlineR . [(20120520 2232)  nil  "insert Tag for inline image of R graphics" single ((url: ."https://github.com/myuhe/inlineR.el") (:keywords  " convenience" " iimage.el" " cacoo.el"))])(inline-crypt . [(20130409 2007)  nil  "Simple inline encryption via openssl" tar ((url: ."https://github.com/Sodel-the-Vociferous/inline-crypt-el") (:keywords  " crypt"))])(inkpot-theme . [(20120505 2208)  nil  "port of vim's inkpot theme" single ((url: ."https://github.com/siovan/emacs24-inkpot") (:keywords ""))])(initsplit . [(20160113 2253)  nil  "code to split customizations into different files" single ((url: ."https://github.com/dabrahams/initsplit") (:keywords  " lisp"))])(init-open-recentf . [(20151107 1223) ((emacs (24 4)) ) "Open recentf immediay after Emacs is started * coding: utf8  lexicalbinding: t *" single ((url: ."https://github.com/zonuexe/init-open-recentf.el") (:keywords  " file recentf after-init-hook"))])(init-loader . [(20150311 2301)  nil  "Loader for configuration files" single ((url: ."https://github.com/emacs-jp/init-loader") (:keywords ""))])(inform7-mode . [(20131010 1456) ((sws-mode (0 1)) ) "Major mode for editing Inform 7 source files" single ((url: ."https://github.com/fred-o/inform7-mode") (:keywords  " inform" " inform7" " interactive fiction"))])(inflections . [(20151009 1629)  nil  "convert english words between singular and plural" single ((url: ."https://github.com/eschulte/jump.el") (:keywords  " ruby rails languages oop"))])(inf-ruby . [(20160423 2337)  nil  "Run a Ruby process in a buffer" single ((url: ."https://github.com/nonsequitur/inf-ruby") (:keywords  " languages ruby"))])(inf-php . [(20130414 1521) ((php-mode (1 5 0)) ) "Run a php interactive sl in a buffer" single ((url: ."https://github.com/taksatou/inf-php") (:keywords  " languages" "php"))])(inf-mongo . [(20131216 1828)  nil  "Run a MongoDB sl process in a buffer" single ((url: ."https://github.com/tobiassvn/inf-mongo") (:keywords  " databases mongodb"))])(inf-clojure . [(20160405 1238) ((clojure-mode (5 3)) (emacs (24 3)) ) "Run an external Clojure process in an Emacs buffer * lexicalbinding: t *" single ((url: ."https://github.com/clojure-emacs/inf-clojure") (:keywords  " processes" " clojure"))])(indy . [(20150611 108)  nil  "A minor mode and EDSL to manage your mode's indentation rules." single ((url: ."https://github.com/kwrooijen/indy") (:keywords  " convenience" " matching" " tools"))])(indicators . [(20130220 637)  nil  "Display the buffer ative location of line in the fringe." single ((url: ."https://github.com/Fuco1/indicators.el") (:keywords  " fringe frames"))])(indent-guide . [(20151119 2317)  nil  "show vertical lines to guide indentation" single ((url: ."https://github.com/zk-phi/indent-guide") (:keywords ""))])(import-popwin . [(20150716 1733) ((popwin (0 6)) (cl-lib (0 5)) ) "popwin buffer near by import statements with popwin" single ((url: ."https://github.com/syohex/emacs-import-popwin") (:keywords ""))])(impatient-mode . [(20150708 51) ((htmlize (1 40)) (cl-lib (0 3)) (simple-httpd (1 4 0)) ) "Serve buffers live over HTTP" tar ((url: ."https://github.com/netguy204/imp.el") (:keywords ""))])(immutant-server . [(20140312 608)  nil  "Run your Immutant server in Emacs" single ((url: ."https://github.com/leathekd/immutant-server.el") (:keywords ""))])(imgur . [(20120307 1825) ((anything (1 287)) ) "client for Emacs" single ((url: ."https://github.com/myuhe/imgur.el") (:keywords  "  multimedia" " convenience"))])(imgix . [(20141228 511) ((dash (2 9 0)) (s (1 9 0)) (json (1 2)) (ht (2 0)) (cl-lib (0 5)) ) "Copyright (C) 2014" tar ((url: ."https://github.com/imgix/imgix-emacs") (:keywords  " images" " image processing" " image editing" " sepia" " blur"))])(imenus . [(20160221 532) ((cl-lib (0 5)) ) "Imenu for multiple buffers and without subgroups" single ((url: ."https://github.com/alezost/imenus.el") (:keywords  " tools convenience"))])(imenu-anywhere . [(20160427 1718) ((cl-lib (0 5)) ) "ido/m imenu tag ection across all buffers with the same mode" single ((url: ."https://github.com/vspinu/imenu-anywhere") (:keywords  " ido" " imenu" " tags"))])(imapfilter . [(20160419 1746)  nil  "run the  executable  * lexicalbinding: t *" single ((url: ."https://github.com/tarsius/imapfilter") (:keywords  " mail"))])(imakado . [(20141024 1723)  nil  "'s usefull macros and functions" single ((url: ."https://github.com/imakado/emacs-imakado") (:keywords  " convenience"))])(image-dired+ . [(20150430 1344) ((cl-lib (0 3)) ) "+  Imagedired extensions" single ((url: ."https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords  " extensions" " multimedia"))])(image-archive . [(20160128 1756) ((emacs (24)) (cl-lib (0 5)) ) "Image thumbnails in archive file with nonblocking" single ((url: ."https://github.com/mhayashi1120/Emacs-image-archive") (:keywords  " multimedia"))])(image+ . [(20150708 16) ((cl-lib (0 3)) ) "+  Image manipulate extensions for Emacs" tar ((url: ."https://github.com/mhayashi1120/Emacs-imagex") (:keywords  " multimedia" " extensions"))])(ignoramus . [(20160414 2209)  nil  "Ignore backups, build files, et al." single ((url: ."https://github.com/rolandwalker/ignoramus") (:keywords  " convenience" " tools"))])(iflipb . [(20141124 516)  nil  "interactiy flip between recently visited buffers" single ((url: ."https://github.com/jrosdahl/iflipb") (:keywords ""))])(ietf-docs . [(20150928 1757)  nil  "Fetch, Cache and Load IETF documents" single ((url: ."https://github.com/choppsv1/ietf-docs") (:keywords  " ietf" " rfc"))])(iedit . [(20160517 1240)  nil  "Edit multiple regions in the same way simultaneously." tar ((url: ."https://github.com/victorhge/iedit") (:keywords  " occurrence region simultaneous refactoring"))])(ids-edit . [(20160325 622) ((emacs (24 3)) ) "IDS (Ideographic Description Sequence) editing tool  * lexicalbinding: t *" tar ((url: ."https://github.com/kawabata/ids-edit") (:keywords  " Ideographic Description Sequence"))])(idris-mode . [(20160302 2235) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5)) ) "Major mode for editing Idris code * lexicalbinding: t *" tar ((url: ."https://github.com/idris-hackers/idris-mode") (:keywords  " languages"))])(idomenu . [(20141124 520)  nil  "imenu tag ection a la ido" single ((url: ."https://github.com/birkenfeld/idomenu") (:keywords ""))])(ido-yes-or-no . [(20160218 817) ((ido-completing-read+ (0)) ) "Use Ido to answer yesorno questions" single ((url: ."https://github.com/DarwinAwardWinner/ido-yes-or-no") (:keywords ""))])(ido-vertical-mode . [(20160430 137)  nil  "Makes idomode display vertically." single ((url: ."https://github.com/creichert/ido-vertical-mode.el") (:keywords  " convenience"))])(ido-ubiquitous . [(20160320 1438) ((emacs (24 1)) (ido-completing-read+ (3 13)) (cl-lib (0 5)) ) "Use ido (nearly) everywhere. * lexicalbinding: t *" single ((url: ."https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords  " convenience" " completion" " ido"))])(ido-springboard . [(20160330 209)  nil  "Temporarily change defaultdirectory for one command" single ((url: ."https://github.com/jwiegley/springboard") (:keywords  " ido"))])(ido-sort-mtime . [(20131117 2130)  nil  "Sort Ido's file list by modification time" single ((url: ."https://github.com/pkkm/ido-sort-mtime") (:keywords  " convenience" " files"))])(ido-skk . [(20151111 1750) ((ddskk (20150912 1820)) (emacs (24 4)) ) "ido interface for skk henkan" single ((url: ."https://github.com/tsukimizake/ido-skk") (:keywords  " languages"))])(ido-occur . [(20160128 1724) ((dash (2 11 0)) ) "Yet another `occur' with `ido'." single ((url: ."https://github.com/danil/ido-occur") (:keywords  " inner buffer search"))])(ido-occasional . [(20150214 2048) ((emacs (24 1)) ) "Use ido where you choose. * lexicalbinding: t *" single ((url: ."https://github.com/abo-abo/ido-occasional") (:keywords  " completion"))])(ido-migemo . [(20150922 647) ((migemo (1 9 1)) ) "Migemo plugin for Ido" single ((url: ."https://github.com/myuhe/ido-migemo.el") (:keywords  " files"))])(ido-load-library . [(20140805 322) ((pcache (0 2 3)) (persistent-soft (0 8 8)) ) "Loadlibrary alternative using idocompletingread" single ((url: ."https://github.com/rolandwalker/ido-load-library") (:keywords  " maint" " completion"))])(ido-hacks . [(20150401 309)  nil  "Put more IDO in your IDO" single ((url: ."https://github.com/scottjad/ido-hacks") (:keywords  " convenience"))])(ido-grid-mode . [(20160122 1939) ((emacs (24 4)) ) "Display idoprospects in the minibuffer in a grid. * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/larkery/ido-grid-mode.el") (:keywords  " convenience"))])(ido-gnus . [(20140217 46) ((gnus (5 13)) ) "Filename:" single ((url: ."https://github.com/vapniks/ido-gnus") (:keywords  " comm"))])(ido-exit-target . [(20150904 2237) ((emacs (24 4)) ) "Commands and keys for ecting other window and frame targets within ido" single ((url: ."https://github.com/waymondo/ido-exit-target") (:keywords  " convenience" " tools" " extensions"))])(ido-describe-bindings . [(20160128 1725) ((dash (2 11 0)) ) "Yet another `describebindings' with `ido'." single ((url: ."https://github.com/danil/ido-describe-bindings") (:keywords  " help"))])(ido-completing-read+ . [(20160320 1438) ((emacs (24 1)) (cl-lib (0 5)) ) "+  A completingreadfunction using ido  * lexicalbinding: t *" single ((url: ."https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords  " ido" " completion" " convenience"))])(ido-complete-space-or-hyphen . [(20130228 1808)  nil  "Complete SPACE or HYPHEN when type SPACE in ido" single ((url: ."https://github.com/doitian/ido-complete-space-or-hyphen") (:keywords  " ido completion"))])(ido-clever-match . [(20151012 126) ((emacs (24 4)) (cl-lib (0 5)) ) "Alternative matcher for ido." tar ((url: ."https://github.com/Bogdanp/ido-clever-match") (:keywords  " ido flex"))])(ido-at-point . [(20151113 2308) ((emacs (24)) ) "idostyle completionatpoint * lexicalbinding: t *" single ((url: ."https://github.com/katspaugh/ido-at-point") (:keywords  " convenience" " abbrev"))])(idle-require . [(20090716 603)  nil  "loadisp libraries while Emacs is idle" single ((url: ."https://github.com/nschum/idle-require.el") (:keywords  " internal"))])(idle-highlight-mode . [(20120921 48)  nil  "highlight the word the point is on" single ((url: ."https://github.com/nonsequitur/idle-highlight-mode") (:keywords  " convenience"))])(identica-mode . [(20130205 653)  nil  "Major mode API client for status.net open microblogging" tar ((url: ."https://github.com/gabrielsaldana/Emacs-Identica-mode") (:keywords  " identica web"))])(idea-darkula-theme . [(20160417 703) ((emacs (24 1)) ) "Color theme based on InliJ IDEA Darkula color theme" single ((url: ."https://github.com/fourier/idea-darkula-theme") (:keywords  " themes"))])(id-manager . [(20160425 1716)  nil  "idpassword management" single ((url: ."https://github.com/kiwanami/emacs-id-manager") (:keywords  " password" " convenience"))])(ibuffer-vc . [(20151029 1512) ((cl-lib (0 2)) ) "Group ibuffer's list by VC project, or show VC status" single ((url: ."https://github.com/purcell/ibuffer-vc") (:keywords  " themes"))])(ibuffer-tramp . [(20151119 139)  nil  "Group ibuffer's list by TRAMP connection" single ((url: ."https://github.com/svend/ibuffer-tramp") (:keywords  " convenience"))])(ibuffer-rcirc . [(20150216 518) ((cl-lib (0 2)) ) "Ibuffer integration for rcirc" single ((url: ."https://github.com/fgallina/ibuffer-rcirc") (:keywords  " buffer" " convenience" " comm"))])(ibuffer-projectile . [(20150122 37) ((projectile (0 11 0)) ) "Group ibuffer's list by projectile root" single ((url: ."https://github.com/purcell/ibuffer-projectile") (:keywords  " themes"))])(ibuffer-git . [(20110508 1531)  nil  "show git status in ibuffer column" single ((url: ."https://github.com/jrockway/ibuffer-git") (:keywords  " convenience"))])(iasm-mode . [(20131005 744)  nil  "interactive assembly major mode." tar ((url: ."https://github.com/RAttab/iasm-mode") (:keywords  ""))])(i2b2-mode . [(20140710 904)  nil  "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." single ((url: ."https://github.com/danlamanna/i2b2-mode") (:keywords  " xml" "phi" "i2b2" "deidi2b2"))])(hydra . [(20160518 2221) ((cl-lib (0 5)) ) "Make bindings that stick around. * lexicalbinding: t *" tar ((url: ."https://github.com/abo-abo/hydra") (:keywords  " bindings"))])(hyde . [(20160508 1108)  nil  "Major mode to p create and manage Jekyll blogs" tar ((url: ."https://github.com/nibrahim/Hyde") (:keywords ""))])(hydandata-light-theme . [(20160123 953)  nil  "A light color theme that is easy on your eyes" single ((url: ."https://github.com/hydandata/hydandata-light-theme") (:keywords  " color-theme theme"))])(hyai . [(20160320 935) ((emacs (24)) (cl-lib (0 5)) ) "Hasl Yet Another Indentation * lexicalbinding: t *" single ((url: ."https://github.com/iquiw/hyai") (:keywords ""))])(hy-mode . [(20160422 1613)  nil  "Major mode for Hy code" single ((url: ."https://github.com/hylang/hy-mode") (:keywords  " languages" " lisp"))])(hungry-delete . [(20151204 514)  nil  "hungry ete minor mode" single ((url: ."https://github.com/nflath/hungry-delete") (:keywords ""))])(httprepl . [(20141102 134) ((dash (2 5 0)) (s (1 9 0)) (emacs (24)) ) "An HTTP REPL  * lexicalbinding: t *" single ((url: ."https://github.com/gregsexton/httprepl.el") (:keywords  " http" " repl"))])(httpcode . [(20121002 1145)  nil  "explains the meaning of an HTTP status code" single ((url: ."https://github.com/rspivak/httpcode.el") (:keywords ""))])(http-twiddle . [(20151121 2144)  nil  "send & twiddle & resend HTTP requests" single ((url: ."https://github.com/hassy/http-twiddle") (:keywords  " HTTP" " REST" " SOAP"))])(http . [(20160127 1225) ((emacs (24 4)) (request (0 2 0)) ) "Yet another HTTP client              * lexicalbinding: t *" single ((url: ."https://github.com/emacs-pe/http.el") (:keywords  " convenience"))])(html-to-markdown . [(20151105 1640) ((cl-lib (0 5)) ) "HTML to Markdown converter written in Emacslisp." single ((url: ."https://github.com/Malabarba/html-to-markdown") (:keywords  " tools wp languages"))])(html-script-src . [(20130808 1858)  nil  "Insert <script src=".."> for popular JavaScript libraries" single ((url: ."https://github.com/rejeep/html-script-src.el") (:keywords  " tools" " convenience"))])(html-check-frag . [(20160131 1335) ((emacs (24 3)) ) "Check htmlfragments" single ((url: ."https://github.com/TobiasZawada/html-check-frag") (:keywords  " html"))])(ht . [(20151118 259)  nil  "Copyrig (C) 2013 Wilfred Hughes" single ((url: ."https://github.com/Wilfred/ht.el") (:keywords  " hash table" " hash map" " hash"))])(howdoi . [(20150204 843)  nil  "instant coding answers via Emacs." tar ((url: ."https://github.com/atykhonov/emacs-howdoi") (:keywords  " howdoi" " convenience"))])(how-many-lines-in-project . [(20140807 1242)  nil  "Calculate how many lines are there in your project." single ((url: ."https://github.com/hiddenlotus/how-many-lines-in-project") (:keywords  " project" " convenience"))])(hound . [(20150221 104) ((web (1 0)) (cl-lib (0 5)) ) "Display  search results in a compilation window" single ((url: ."https://github.com/ryoung786/hound.el") (:keywords ""))])(hookify . [(20160313 2249) ((dash (1 5 0)) (s (1 9 0)) ) "Interactive commands to create temporary hooks" single ((url: ."https://github.com/Silex/hookify") (:keywords  " hook" " convenience"))])(homebrew-mode . [(20160407 25) ((dash (1 2 0)) (inf-ruby (2 4 0)) (emacs (24 4)) ) "minor mode for editing Homebrew formulae" single ((url: ."https://github.com/dunn/homebrew-mode") (:keywords  " homebrew brew ruby"))])(hoa-pp-mode . [(20151117 2143) ((emacs (24 1)) (names (20150723 0)) ) "Major mode for Hoa PP grammars * lexicalbinding: t *" single ((url: ."https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords  " php" " hoa"))])(hlinum . [(20150622 1033) ((cl-lib (0 2)) ) "Extension for linum to highlight current line number" single ((url: ."https://github.com/tom-tan/hlinum-mode") (:keywords  " convenience" " extensions"))])(hlint-refactor . [(20151125 444)  nil  "Apply HLint suggestions" single ((url: ."https://github.com/mpickering/hlint-refactor-mode") (:keywords  " haskell" " refactor"))])(hl-todo . [(20160424 1949)  nil  "highlight TODO keywords" single ((url: ."https://github.com/tarsius/hl-todo") (:keywords  " convenience"))])(hl-sexp . [(20101130 2043)  nil  "highlight the current sexp" single ((url: ."https://github.com/emacsmirror/hl-sexp") (:keywords  " faces" " frames" " emulation"))])(hl-sentence . [(20150722 410)  nil  "highlight a sentence based on customizable face" single ((url: ."https://github.com/milkypostman/hl-sentence") (:keywords  " highlighting"))])(hl-indent . [(20141228 530) ((emacs (24)) (cl-lib (0 5)) ) "Highlight irregular indentation. * lexicalbinding: t *" single ((url: ."https://github.com/ikirill/hl-indent") (:keywords  " convenience" " faces"))])(hl-anything . [(20160423 954) ((emacs (24 3)) ) "Highlight symbols, ections, enclosing parens and more." single ((url: ."https://github.com/hl-anything/hl-anything-emacs") (:keywords ""))])(hiwin . [(20150825 1627)  nil  "Visible active window mode." single ((url: ."https://github.com/yoshida-mediba/hiwin-mode") (:keywords  " faces" " editing" " emulating"))])(hive . [(20140215 2200) ((sql (3 0)) ) "Hive SQL mode extension" single ((url: ."https://github.com/r0man/hive-el") (:keywords  " sql hive"))])(historyf . [(20151201 1653)  nil  "file history library like browser" single ((url: ."https://github.com/k1LoW/emacs-historyf") (:keywords ""))])(history . [(20150410 834) ((emacs (24 3)) ) "History utility for source code navigation" single ((url: ."https://github.com/boyw165/history") (:keywords ""))])(hipster-theme . [(20141206 1205)  nil  "A low contrast color theme for Emacs." single ((url: ."https://github.com/xzerocode/hipster-theme") (:keywords ""))])(hippie-namespace . [(20140805 322)  nil  "Special treatment for namespace prefixes in hippieexpand" single ((url: ."https://github.com/rolandwalker/hippie-namespace") (:keywords  " convenience" " lisp" " tools" " completion"))])(hippie-expand-slime . [(20141023 2126)  nil  "Hook slime's completion into hippieexpand" single ((url: ."https://github.com/purcell/hippie-expand-slime") (:keywords ""))])(hippie-exp-ext . [(20160503 726)  nil  "Filename:" single ((url: ."https://github.com/rubikitch/hippie-exp-ext") (:keywords  " abbrev" " convenience" " completions" " hippie-expand"))])(hindent . [(20160517 2235)  nil  "(style . "chrisdone")" single ((url: ."https://github.com/chrisdone/hindent") (:keywords ""))])(highlight2clipboard . [(20151021 240) ((htmlize (1 47)) ) "Copy text to clipboard with highlighting." single ((url: ."https://github.com/Lindydancer/highlight2clipboard") (:keywords  " tools"))])(highlight-unique-symbol . [(20140908 1045) ((deferred (0 3 2)) ) "highlight symbols which not appear in the repository" single ((url: ."https://github.com/hitode909/emacs-highlight-unique-symbol") (:keywords ""))])(highlight-thing . [(20160221 851)  nil  "Minimalistic minor mode to highlight current thing under point." single ((url: ."https://github.com/fgeller/highlight-thing.el") (:keywords  " highlight thing symbol"))])(highlight-symbol . [(20160103 409)  nil  "automatic and manual symbol highlighting" tar ((url: ."https://github.com/nschum/highlight-symbol.el") (:keywords  " faces" " matching"))])(highlight-stages . [(20150422 1157)  nil  "highlight staged (quasiquoted) expressions" single ((url: ."https://github.com/zk-phi/highlight-stages") (:keywords ""))])(highlight-quoted . [(20160123 1940) ((emacs (24)) ) "Highlight Lisp quotes and quoted symbols  * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/highlight-quoted") (:keywords ""))])(highlight-parentheses . [(20151108 1516)  nil  "highlight surrounding parentheses" tar ((url: ."https://github.com/tsdh/highlight-parentheses.el") (:keywords  " faces" " matching"))])(highlight-numbers . [(20160516 1759) ((emacs (24)) (parent-mode (2 0)) ) "Highlight numbers in source code * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/highlight-numbers") (:keywords ""))])(highlight-leading-spaces . [(20151216 2022) ((emacs (24 4)) ) "Highlight leading spaces" single ((url: ."https://github.com/mrBliss/highlight-leading-spaces") (:keywords ""))])(highlight-indentation . [(20150307 1808)  nil  "Minor modes for highlighting indentation" single ((url: ."https://github.com/antonj/Highlight-Indentation-for-Emacs") (:keywords ""))])(highlight-indent-guides . [(20151117 126)  nil  "Minor mode to highlight indentation" single ((url: ."https://github.com/DarthFennec/highlight-indent-guides") (:keywords ""))])(highlight-escape-sequences . [(20151231 2012)  nil  "Highlight escape sequences * lexicalbinding: t *" single ((url: ."https://github.com/dgutov/highlight-escape-sequences") (:keywords  " convenience"))])(highlight-defined . [(20141225 2330) ((emacs (24)) ) "Syntax highlighting of known Elisp symbols * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/highlight-defined") (:keywords ""))])(highlight-blocks . [(20151202 15) ((emacs (24)) ) "Highlight the blocks point is in * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/highlight-blocks") (:keywords ""))])(hideshow-org . [(20120224 650)  nil  "Provides orgmode like hide and show for hideshow" single ((url: ."https://github.com/shanecelis/hideshow-org") (:keywords  " C C++ java lisp tools editing comments blocks hiding outlines org-mode"))])(hi2 . [(20141006 331)  nil  "indentation module for Hasl Mode" single ((url: ."https://github.com/nilcons/hi2") (:keywords  " indentation haskell"))])(hgrc-mode . [(20150410 443)  nil  "major mode for editing hgrc files * lexicalbinding: t *" single ((url: ."https://github.com/omajid/hgrc-mode") (:keywords  " convenience vc hg"))])(hgignore-mode . [(20160501 807)  nil  "a major mode for editing hgignore files * lexicalbinding: t *" single ((url: ."https://github.com/omajid/hgignore-mode") (:keywords  " convenience vc hg"))])(hfst-mode . [(20160402 1928)  nil  "major mode for editing HFST files" single ((url: ."https://github.com/unhammer/hfst-mode") (:keywords  " languages"))])(hexo . [(20160423 2317) ((emacs (24 3)) ) "Major mode & tools for Hexo      * lexicalbinding: t *" single ((url: ."https://github.com/kuanyui/hexo.el") (:keywords  " tools" " hexo"))])(heroku-theme . [(20150607 1217)  nil  "Heroku color theme" single ((url: ."https://github.com/jonathanchu/heroku-theme") (:keywords ""))])(heroku . [(20120630 213)  nil  "Interface to Heroku apps." single ((url: ."https://github.com/technomancy/heroku.el") (:keywords  " convenience" " api" " database"))])(helm-zhihu-daily . [(20151006 1619) ((emacs (24 4)) (helm (1 0)) (cl-lib (0 5)) ) "m interface for 知乎日报 (http://daily.zhihu.com)" single ((url: ."https://github.com/xuchunyang/helm-zhihu-daily") (:keywords ""))])(helm-xcdoc . [(20160116 1818) ((emacs (24 4)) (helm (1 5)) ) "Search Xcode Document by docsetutil and eww with m interface  * lexicalbinding: t *" single ((url: ."https://github.com/fujimisakari/emacs-helm-xcdoc") (:keywords ""))])(helm-words . [(20150414 418)  nil  "m extension for looking up words in dictionaries and thesauri." single ((url: ."https://github.com/pronobis/helm-words") (:keywords ""))])(helm-wordnet . [(20160128 2307) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5)) ) "Copyright (C) 2015  authors" single ((url: ."https://github.com/raghavgautam/helm-wordnet") (:keywords  " Dictionary" " WordNet" " Emacs" " Elisp" " Helm"))])(helm-w3m . [(20150722 2324) ((w3m (0 0)) (emacs (24 1)) (helm (1 5)) (cl-lib (0 5)) ) "W3m bookmark  m interface. * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-w3m") (:keywords ""))])(helm-w32-launcher . [(20141224 414) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5)) ) "Start Menu entry launcher using m * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/helm-w32-launcher") (:keywords ""))])(helm-unicode . [(20150429 254) ((emacs (24 4)) (helm (1 6)) ) "m command for unicode characters. * lexicalbinding: t *" single ((url: ."https://github.com/shosti/helm-unicode") (:keywords ""))])(helm-themes . [(20151014 1723) ((helm-core (1 7 7)) ) "Color theme ection with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-themes") (:keywords ""))])(helm-systemd . [(20160518 1433) ((emacs (24 4)) (helm (1 9 2)) (with-editor (2 5 0)) ) "m's systemd interface        * lexicalbinding: t *" single ((url: ."https://github.com/lompik/helm-systemd") (:keywords  " convenience"))])(helm-swoop . [(20160418 557) ((emacs (24 3)) (helm (1 0)) ) "Efficiently hopping squeezed lines powered by m interface * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/ShingoFukuyama/helm-swoop") (:keywords  " helm swoop inner buffer search"))])(helm-spotify . [(20131015 547) ((multi (2 0 0)) (helm (0 0 0)) ) "Control Spotify with m." single ((url: ."https://github.com/krisajenkins/helm-spotify") (:keywords  " helm spotify"))])(helm-spaces . [(20160320 735) ((spaces (0 1 0)) (helm (1 9 3)) ) "m sources for spaces" single ((url: ."https://github.com/yasuyk/helm-spaces") (:keywords  " helm frames convenience"))])(helm-sheet . [(20130630 2039) ((helm (1 0)) ) "m sources for sheet" single ((url: ."https://github.com/yasuyk/helm-sheet") (:keywords  " helm sheet"))])(helm-sage . [(20160514 1545) ((sage-shell-mode (0 1 0)) (helm (1 5 6)) (cl-lib (0 5)) ) "A m extension for sageslmode." single ((url: ."https://github.com/stakemori/helm-sage") (:keywords  " Sage" " math" " helm"))])(helm-safari . [(20160404 1124) ((emacs (24)) (helm (1 9 1)) ) "Browse your Safari bookmarks and history  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/helm-safari") (:keywords  " tools"))])(helm-rubygems-org . [(20140826 1956) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5)) ) "Use m to search rubygems.org * lexicalbinding: t *" single ((url: ."https://github.com/neomantic/helm-rubygems-org") (:keywords  " ruby" " rubygems" " gemfile" " helm"))])(helm-rubygems-local . [(20130712 911) ((helm (1 5 3)) ) "Installed local rubygems findfile for m" single ((url: ."https://github.com/hadashiA/helm-rubygems-local") (:keywords ""))])(helm-robe . [(20151209 1155) ((helm (1 7 7)) ) "completing read function for robe * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-robe") (:keywords ""))])(helm-rhythmbox . [(20160310 2034) ((helm (1 5 0)) (cl-lib (0 5)) ) "control Rhythmbox's play queue via m *lexicalbinding: t*" single ((url: ."https://github.com/mrBliss/helm-rhythmbox") (:keywords ""))])(helm-recoll . [(20160502 56) ((helm (1 9 5)) ) "m interface for the recoll desktop search tool. * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-recoll") (:keywords  " convenience"))])(helm-rb . [(20131124 39) ((helm-ag-r (20131123)) (helm (1 0)) ) "Search Ruby's method by ag and display m" tar ((url: ."https://github.com/yuutayamada/helm-rb") (:keywords  " Searching Ruby"))])(helm-rails . [(20140325 2209) ((inflections (1 1)) (helm (1 5 1)) ) "m extension for Rails projects." single ((url: ."https://github.com/asok/helm-rails") (:keywords  "          helm" " rails" " git"))])(helm-qiita . [(20160519 12) ((helm (1 9 5)) (cl-lib (0 5)) ) "Qiita with m interface * lexicalbinding: t *" single ((url: ."https://github.com/masutaka/emacs-helm-qiita") (:keywords ""))])(helm-pydoc . [(20160325 920) ((helm-core (1 7 4)) (cl-lib (0 5)) ) "pydoc with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-pydoc") (:keywords ""))])(helm-purpose . [(20160219 209) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4)) ) "m Interface for Purpose * lexicalbinding: t *" single ((url: ."https://github.com/bmag/helm-purpose") (:keywords ""))])(helm-pt . [(20160215 742) ((emacs (24 4)) (helm (1 5 6)) (cl-lib (0 5)) ) "platinum searcher m interface" tar ((url: ."https://github.com/ralesi/helm-pt") (:keywords ""))])(helm-projectile . [(20160430 949) ((dash (1 5 0)) (helm (1 7 7)) (cl-lib (0 3)) (projectile (0 13 0)) ) "m integration for Projectile" single ((url: ."https://github.com/bbatsov/helm-projectile") (:keywords  " project" " convenience"))])(helm-project-persist . [(20151210 2343) ((helm (1 5 2)) (project-persist (0 1 4)) ) "m integration for projectpersist package" single ((url: ."https://github.com/Sliim/helm-project-persist") (:keywords  " project-persist project helm"))])(helm-proc . [(20160514 2218)  nil  "m interface for managing system processes" tar ((url: ."https://github.com/markus1189/helm-proc") (:keywords  " helm"))])(helm-perldoc . [(20151101 1127) ((helm-core (1 7 7)) (deferred (0 3 1)) (cl-lib (0 5)) ) "perldoc with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-perldoc") (:keywords ""))])(helm-pages . [(20160322 1013) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5)) ) "Pages in current buffer as m datasource  * lexicalbinding: t *" single ((url: ."https://github.com/david-christiansen/helm-pages") (:keywords  " convenience" " helm" " outlines"))])(helm-package . [(20151210 1648) ((helm (1 7 7)) (cl-lib (0 5)) ) "Listing ELPA packages with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-package") (:keywords ""))])(helm-orgcard . [(20151001 2324) ((helm-core (1 7 7)) ) "browse the orgcard by m * lexicalbinding: t *" single ((url: ."https://github.com/emacs-jp/helm-orgcard") (:keywords  " convenience" " helm" " org"))])(helm-org-rifle . [(20160424 131) ((f (0 18 1)) (dash (2 12)) (s (1 10 0)) (emacs (24 4)) (helm (1 9 4)) ) "Rifle through your Org files" single ((url: ."https://github.com/alphapapa/helm-org-rifle") (:keywords  " hypermedia" " outlines"))])(helm-open-github . [(20151226 2242) ((helm-core (1 7 7)) (gh (0 8 2)) (cl-lib (0 5)) ) "Utilities of Opening Github Page * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-open-github") (:keywords ""))])(helm-notmuch . [(20160413 306) ((helm (1 9 3)) (notmuch (0 21)) ) "Search emails with Notmuch and m  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/helm-notmuch") (:keywords  " mail"))])(helm-nixos-options . [(20160401 1759) ((nixos-options (0 0 1)) (helm (1 5 6)) ) "m Interface for nixosoptions" single ((url: ."https://github.com/travisbhartwell/nix-emacs") (:keywords  " unix"))])(helm-mu . [(20160404 2353) ((helm (1 5 5)) ) "m sources for searching emails and contacts" single ((url: ."https://github.com/emacs-helm/helm-mu") (:keywords ""))])(helm-mt . [(20151105 1320) ((emacs (24)) (multi-term (0 0)) (helm (0 0)) (cl-lib (0 5)) ) "m multiterm management. * lexicalbinding: t *" single ((url: ."https://github.com/dfdeshom/helm-mt") (:keywords  " helm multi-term"))])(helm-mode-manager . [(20151124 1738) ((helm (1 5 3)) ) "ect and toggle major and minor modes with m" single ((url: ."https://github.com/istib/helm-mode-manager") (:keywords ""))])(helm-migemo . [(20151010 1156) ((migemo (1 9)) (helm-core (1 7 8)) (emacs (24 4)) (cl-lib (0 5)) ) "Migemo plugin for m * lexicalbinding: t *" tar ((url: ."https://github.com/emacs-jp/helm-migemo") (:keywords  " matching" " convenience" " tools" " i18n"))])(helm-make . [(20160331 2254) ((helm (1 5 3)) (projectile (0 11 0)) ) "ect a Makefile target with m" single ((url: ."https://github.com/abo-abo/helm-make") (:keywords  " makefile"))])(helm-ls-hg . [(20150909 1343) ((helm (1 7 8)) ) "List hg files in hg project. * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-ls-hg") (:keywords ""))])(helm-ls-git . [(20160408 1240) ((helm (1 7 8)) ) "list git files. * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-ls-git") (:keywords ""))])(helm-lobsters . [(20150213 2346) ((helm (1 0)) (cl-lib (0 5)) ) "m frontend for lobste.rs" single ((url: ."https://github.com/julienXX/helm-lobste.rs") (:keywords ""))])(helm-jstack . [(20150604 509) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5)) ) "Copyright (C) 2015  authors" single ((url: ."https://github.com/raghavgautam/helm-jstack") (:keywords  " Java" " Jps" " Jstack" " JVM" " Emacs" " Elisp" " Helm"))])(helm-j-cheatsheet . [(20131228 2041) ((helm (1 5 3)) ) "Quick J reference for Emacs" single ((url: ."https://github.com/abo-abo/helm-j-cheatsheet") (:keywords ""))])(helm-itunes . [(20151013 1448) ((helm (1 6 1)) ) "Play local iTunes and Spotify tracks" single ((url: ."https://github.com/anschwa/helm-itunes") (:keywords ""))])(helm-ispell . [(20151231 1653) ((helm-core (1 7 7)) ) "islcompleteword with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-ispell") (:keywords ""))])(helm-img-tiqav . [(20151225 722) ((helm-img (0 0 1)) ) "An msource for joking." single ((url: ."https://github.com/l3msh0/helm-img-tiqav") (:keywords  " convenience"))])(helm-img . [(20151225 721) ((helm (1 7 7)) (cl-lib (0 5)) ) "Utilities for making image sources for m." tar ((url: ."https://github.com/l3msh0/helm-img") (:keywords  " convenience"))])(helm-idris . [(20141203 157) ((idris-mode (0 9 14)) (helm (0 0 0)) ) "A m datasource for Idris documentation, queried from the compiler" single ((url: ."https://github.com/david-christiansen/helm-idris") (:keywords  " languages" " helm"))])(helm-hoogle . [(20150919 1532) ((emacs (24 4)) (helm (1 6 2)) ) "Use m to navigate query results from Hoogle" single ((url: ."https://github.com/jwiegley/helm-hoogle") (:keywords  " haskell programming hoogle"))])(helm-helm-commands . [(20130903 149) ((helm (1 5 4)) ) "Filename:" single ((url: ."https://github.com/vapniks/helm-helm-commands") (:keywords  " convenience"))])(helm-hayoo . [(20151014 1451)  nil  "Source and configured m for searching hayoo" single ((url: ."https://github.com/markus1189/helm-hayoo") (:keywords  " helm"))])(helm-hatena-bookmark . [(20160519 10) ((helm (1 9 5)) ) "Hatena::Bookmark with m interface * lexicalbinding: t *" single ((url: ."https://github.com/masutaka/emacs-helm-hatena-bookmark") (:keywords ""))])(helm-gtags . [(20160417 2055) ((emacs (24 3)) (helm (1 7 7)) ) "GNU GLOBAL m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-gtags") (:keywords ""))])(helm-growthforecast . [(20140120 1144) ((helm (1 5 9)) ) "m extensions for growthforecast." single ((url: ."https://github.com/daic-h/helm-growthforecast") (:keywords ""))])(helm-grepint . [(20160304 426) ((emacs (24)) (helm (1 0)) ) "Generic m interface to grep * lexicalbinding: t *" single ((url: ."https://github.com/kopoli/helm-grepint") (:keywords  " grep" " grepping" " searching" " helm"))])(helm-google . [(20160227 420) ((google (0)) (helm (0)) ) "Emacs m Interface for quick Google searches" single ((url: ."https://github.com/steckerhalter/helm-google") (:keywords  " helm google search browse"))])(helm-go-package . [(20160321 1631) ((helm (1 9 3)) (deferred (0 4 0)) (go-mode (1 3 1)) ) "m sources for Go programming language's package" single ((url: ."https://github.com/yasuyk/helm-go-package") (:keywords  " helm go"))])(helm-gitlab . [(20160203 0) ((dash (2 9 0)) (s (1 9 0)) (gitlab (0)) (helm (1 0)) ) "m interface to Gitlab" single ((url: ."https://github.com/nlamirault/emacs-gitlab") (:keywords  " gitlab" " helm"))])(helm-gitignore . [(20151204 804) ((gitignore-mode (1 1 0)) (request (0 1 0)) (helm (1 7 0)) (cl-lib (0 5)) ) "Generate .gitignore files with gitignore.io." single ((url: ."https://github.com/jupl/helm-gitignore") (:keywords  " helm gitignore gitignore.io"))])(helm-github-stars . [(20150626 623) ((emacs (24 4)) (helm (1 6 8)) ) "m integration for your starred repositories on github  * lexicalbinding: t *" single ((url: ."https://github.com/Sliim/helm-github-stars") (:keywords  " helm github stars"))])(helm-git-grep . [(20160414 2256) ((helm (1 9 3)) ) "m for git grep, an incremental gitgrep(1)" single ((url: ."https://github.com/yasuyk/helm-git-grep") (:keywords  " helm" " git"))])(helm-git-files . [(20141212 2117) ((helm (1 5 9)) ) "m for git files" single ((url: ."https://github.com/kenbeese/helm-git-files") (:keywords  " helm" " git"))])(helm-git . [(20130206 2031)  nil  "m extension for Git." single ((url: ."https://github.com/maio/helm-git") (:keywords ""))])(helm-ghq . [(20160203 2327) ((helm (1 8 0)) ) "ghq with m interface * lexicalbinding: t *" single ((url: ."https://github.com/masutaka/emacs-helm-ghq") (:keywords ""))])(helm-ghc . [(20141106 243) ((emacs (24)) (helm (1 6 4)) (cl-lib (0 5)) (ghc (5 2 1 0)) ) "A m datasource for ghcmod errors * lexicalbinding: t *" single ((url: ."https://github.com/david-christiansen/helm-ghc") (:keywords  " languages" " helm"))])(helm-fuzzy-find . [(20150613 1849) ((emacs (24 1)) (helm (1 7 0)) ) "Find file using Fuzzy Search  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/helm-fuzzy-find") (:keywords  " helm fuzzy find file"))])(helm-fuzzier . [(20160220 1640) ((emacs (24 3)) (helm (1 7 0)) ) "Better fuzzy matching for m * lexicalbinding: t *" single ((url: ."https://github.com/EphramPerdition/helm-fuzzier") (:keywords  " convenience helm fuzzy"))])(helm-flyspell . [(20151027 12) ((helm (1 6 5)) ) "m extension for correcting words with flysl" single ((url: ."https://github.com/pronobis/helm-flyspell") (:keywords ""))])(helm-flymake . [(20130717 1344) ((helm (1 0)) ) "m interface for flymake" single ((url: ."https://github.com/tam17aki/helm-flymake") (:keywords ""))])(helm-flycheck . [(20160320 2330) ((dash (2 12 1)) (helm (1 9 3)) (flycheck (0 25 1)) ) "Show flycheck errors with m" single ((url: ."https://github.com/yasuyk/helm-flycheck") (:keywords  " helm" " flycheck"))])(helm-flx . [(20160228 852) ((flx (0 5)) (emacs (24 4)) (helm (1 7 9)) ) "Sort m candidates by flx score * lexicalbinding: t *" single ((url: ."https://github.com/PythonNut/helm-flx") (:keywords  " convenience" " helm" " fuzzy" " flx"))])(helm-firefox . [(20160419 2058) ((emacs (24 1)) (helm (1 5)) (cl-lib (0 5)) ) "Firefox bookmarks * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-firefox") (:keywords ""))])(helm-emms . [(20151002 428) ((emacs (24 1)) (helm (1 5)) (emms (0 0)) (cl-lib (0 5)) ) "Emms for m. * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-emms") (:keywords ""))])(helm-emmet . [(20131014 1429) ((helm (1 0)) (emmet-mode (1 0 2)) ) "m sources for emmetmode's snippets" single ((url: ."https://github.com/yasuyk/helm-emmet") (:keywords  " convenience" " helm" " emmet"))])(helm-dirset . [(20151209 812) ((f (0 16 2)) (s (1 9 0)) (helm (1 6 1)) (cl-lib (0 5)) ) "m sources for multi directories" single ((url: ."https://github.com/k1LoW/helm-dirset") (:keywords  " files" " directories"))])(helm-dired-recent-dirs . [(20131228 2214) ((helm (1 0)) ) "Show recent dirs with m support." single ((url: ."https://github.com/akisute3/helm-dired-recent-dirs") (:keywords  " helm" " dired" " zsh"))])(helm-dictionary . [(20160409 45) ((helm (1 5 5)) ) "m source for looking up dictionaries" single ((url: ."https://github.com/emacs-helm/helm-dictionary") (:keywords ""))])(helm-describe-modes . [(20160212 1318) ((emacs (24 1)) (helm (1 9)) (cl-lib (0 5)) ) "m interface to major and minor modes.  * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-describe-modes") (:keywords  " docs" " convenience"))])(helm-descbinds . [(20160109 1147) ((helm (1 5)) ) "A convenient `describebindings' with `m'   * lexicalbinding: t *" single ((url: ."https://github.com/emacs-helm/helm-descbinds") (:keywords  " helm" " help"))])(helm-dash . [(20160417 808) ((helm (1 9 2)) (cl-lib (0 5)) ) "Offline documentation browser for +150 APIs using Dash docsets.  * lexicalbinding: t *" single ((url: ."https://github.com/areina/helm-dash") (:keywords  " docs"))])(helm-ctest . [(20150823 1940) ((dash (2 11 0)) (s (1 9 0)) (helm-core (1 7 4)) ) "Run ctest from within emacs" single ((url: ."https://github.com/danlamanna/helm-ctest") (:keywords  " helm" "ctest"))])(helm-css-scss . [(20141125 1240) ((emacs (24)) (helm (1 0)) ) "CSS/SCSS/LESS ectors with m interface * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/ShingoFukuyama/helm-css-scss") (:keywords  " scss css less selector helm"))])(helm-cscope . [(20150609 2149) ((xcscope (1 0)) (emacs (24 1)) (helm (1 6 7)) (cl-lib (0 5)) ) "m interface for xcscope. * lexicalbinding: t *" single ((url: ."https://github.com/alpha22jp/helm-cscope.el") (:keywords  " cscope" " helm"))])(helm-company . [(20160517 1358) ((company (0 6 13)) (helm (1 5 9)) ) "m interface for companymode" single ((url: ."https://github.com/manuel-uberti/helm-company") (:keywords ""))])(helm-commandlinefu . [(20150611 1345) ((json (1 3)) (emacs (24 1)) (helm (1 7 0)) (let-alist (1 0 3)) ) "Search and browse commandlinefu.com from m  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/helm-commandlinefu") (:keywords  " commandlinefu.com"))])(helm-codesearch . [(20160123 1913) ((dash (2 12 0)) (s (1 10 0)) (helm (1 7 7)) (cl-lib (0 5)) ) "m interface for codesearch" single ((url: ."https://github.com/youngker/helm-codesearch.el") (:keywords  " tools"))])(helm-cmd-t . [(20150824 257)  nil  "cmdt style completion" tar ((url: ."https://github.com/emacs-helm/helm-cmd-t") (:keywords  " helm project-management completion convenience cmd-t textmate"))])(helm-clojuredocs . [(20160405 1523) ((edn (1 1 2)) (helm (1 5 7)) ) "search for p in clojuredocs.org" single ((url: ."https://github.com/mbuczko/helm-clojuredocs") (:keywords  " helm" " clojure"))])(helm-circe . [(20160207 1452) ((emacs (24)) (helm (0 0)) (cl-lib (0 5)) (circe (0 0)) ) "m circe buffer management. * lexicalbinding: t *" single ((url: ."https://github.com/lesharris/helm-circe") (:keywords  " helm circe"))])(helm-cider-history . [(20150720 520) ((cider (0 9 0)) (helm (1 4 0)) ) "m interface for cider history" single ((url: ."https://github.com/Kungi/helm-cider-history") (:keywords  " convenience"))])(helm-chronos . [(20150529 436) ((helm (1 7 1)) (chronos (1 2)) ) "m interface for chronos timers" single ((url: ."https://github.com/dxknight/helm-chronos") (:keywords  " calendar"))])(helm-chrome . [(20151223 958) ((emacs (24)) (helm (1 5)) (cl-lib (0 3)) ) "Filename:" single ((url: ."https://github.com/kawabata/helm-chrome") (:keywords  " chrome bookmarks"))])(helm-c-yasnippet . [(20151231 1618) ((yasnippet (0 8 0)) (helm (1 7 7)) (cl-lib (0 3)) ) "m source for yasnippet * lexicalbinding: t *" single ((url: ."https://github.com/emacs-jp/helm-c-yasnippet") (:keywords  " convenience" " emulation"))])(helm-c-moccur . [(20151230 1724) ((helm (20120811)) (color-moccur (2 71)) ) "m source for colormoccur" tar ((url: ."https://github.com/myuhe/helm-c-moccur.el") (:keywords  " convenience" " emulation"))])(helm-bundle-show . [(20151221 2030) ((helm (1 8 0)) ) "bundle show with m interface * lexicalbinding: t *" single ((url: ."https://github.com/masutaka/emacs-helm-bundle-show") (:keywords ""))])(helm-bm . [(20160321 2131) ((s (1 11 0)) (bm (1 0)) (helm (1 9 3)) (cl-lib (0 5)) ) "m sources for bm" single ((url: ."https://github.com/yasuyk/helm-bm") (:keywords  " helm" " bookmark"))])(helm-bind-key . [(20141109 1315) ((bind-key (1 0)) (helm (1 6 4)) ) "msource for for bindkey." single ((url: ."https://github.com/myuhe/helm-bind-key.el") (:keywords  " convenience" " emulation"))])(helm-bibtexkey . [(20140214 2304) ((helm (1 5 8)) ) "Bibtexkey source for m" tar ((url: ."https://github.com/kenbeese/helm-bibtexkey") (:keywords  " bib" " tex"))])(helm-bibtex . [(20160423 700) ((f (0 16 2)) (dash (2 6 0)) (parsebib (1 0)) (s (1 9 0)) (biblio (0 2)) (helm (1 5 5)) (cl-lib (0 5)) ) "A BibTeX bibliography manager based on m" tar ((url: ."https://github.com/tmalsburg/helm-bibtex") (:keywords ""))])(helm-backup . [(20151214 247) ((s (1 8 0)) (helm (1 5 5)) (cl-lib (0)) ) "Backup each file change using git * lexicalbinding: t *" single ((url: ."https://github.com/antham/helm-backup") (:keywords  " backup" " convenience" " files" " tools" " vc"))])(helm-aws . [(20151124 1736) ((s (1 9 0)) (helm (1 5 3)) (cl-lib (0 5)) ) "Manage AWS EC2 server instances directly from Emacs" single ((url: ."https://github.com/istib/helm-aws") (:keywords ""))])(helm-anything . [(20141126 1831) ((anything (20120101)) (helm (20130406)) ) "Filename:" single ((url: ."https://github.com/rubikitch/helm-anything") (:keywords  " helm" " anything" " convenience" " search" " tools"))])(helm-ag-r . [(20131123 2331) ((helm (1 0)) ) "Search something by ag and display by m" single ((url: ."https://github.com/yuutayamada/helm-ag-r") (:keywords  " Searching"))])(helm-ag . [(20160515 2143) ((emacs (24 3)) (helm (1 7 7)) ) "the silver searcher with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-ag") (:keywords ""))])(helm-ad . [(20151209 1815) ((dash (2 8 0)) (helm (1 6 2)) ) "m source for Active Directory" single ((url: ."https://github.com/tnoda/helm-ad") (:keywords  " comm"))])(helm-ack . [(20150820 1055) ((helm (1 0)) (cl-lib (0 5)) ) "Ack command with m interface * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-helm-ack") (:keywords ""))])(helm-R . [(20120820 814) ((ess (20120509)) (helm (20120517)) ) "msources and some utilities for GNU R." single ((url: ."https://github.com/myuhe/helm-R.el") (:keywords  " convenience"))])(helm . [(20160518 2147)  nil  "Emacs incremental and narrowing framework * lexicalbinding: t *" tar ((url: ."https://github.com/emacs-helm/helm") (:keywords ""))])(headlong . [(20150417 2326)  nil  "reckless completion" single ((url: ."https://github.com/abo-abo/headlong") (:keywords  " completion"))])(hcl-mode . [(20160503 800) ((emacs (24)) (cl-lib (0 5)) ) "Major mode for Hashicorp" single ((url: ."https://github.com/syohex/emacs-hcl-mode") (:keywords ""))])(hc-zenburn-theme . [(20150929 33)  nil  "An higher contrast version of the Zenburn theme." single ((url: ."https://github.com/edran/hc-zenburn-emacs") (:keywords ""))])(hayoo . [(20140831 2021)  nil  "Query  and show results in a tabulated buffer." single ((url: ."https://github.com/benma/hayoo.el") (:keywords  " hayoo" " haskell"))])(haxor-mode . [(20160112 435) ((emacs (24 0)) ) "Major mode for exiting .hax files" single ((url: ."https://github.com/krzysztof-magosa/haxor-mode") (:keywords  " haxor"))])(haste . [(20141031 436) ((json (1 2)) ) "Emacs client for bin (http://bin.com/about.md)" single ((url: ."https://github.com/rlister/emacs-haste-client") (:keywords ""))])(haskell-snippets . [(20160122 658) ((yasnippet (0 8 0)) ) "Yasnippets for Hasl" tar ((url: ."https://github.com/haskell/haskell-snippets") (:keywords  " snippets" " haskell"))])(haskell-mode . [(20160519 45)  nil  "A Hasl editing mode    * coding: utf8 lexicalbinding: t *" tar ((url: ."https://github.com/haskell/haskell-mode") (:keywords  " faces files Haskell"))])(haskell-emacs . [(20160223 1950)  nil  "Write emacs extensions in hasl" single ((url: ."https://github.com/knupfer/haskell-emacs") (:keywords  " haskell" " emacs" " ffi"))])(harvest . [(20160406 43) ((s (1 11 0)) (swiper (0 7 0)) (hydra (0 13 0)) ) "Harvest integration" single ((url: ."https://github.com/kostajh/harvest.el") (:keywords  " harvest"))])(hardhat . [(20160414 2213) ((ignoramus (0 7 0)) ) "Protect against clobbering userwritable files" single ((url: ."https://github.com/rolandwalker/hardhat") (:keywords  " convenience"))])(hardcore-mode . [(20151114 1501)  nil  "Disable arrow keys + optionally backspace and return" single ((url: ."https://github.com/magnars/hardcore-mode.el") (:keywords ""))])(handoff . [(20150917 1400)  nil  "Get your hand off that mouse, damn it!" single ((url: ."https://github.com/rejeep/handoff.el") (:keywords ""))])(handlebars-sgml-mode . [(20151122 512)  nil  "Add Handlebars contextual indenting support to sgmlmode" single ((url: ."https://github.com/jacott/handlebars-sgml-mode") (:keywords ""))])(handlebars-mode . [(20150212 149)  nil  "A major mode for editing Handlebars files." single ((url: ."https://github.com/danielevans/handlebars-mode") (:keywords ""))])(hamlet-mode . [(20131208 1524) ((dash (2 3 0)) (s (1 7 0)) (cl-lib (0 3)) ) "Hamlet editing mode" single ((url: ."https://github.com/lightquake/hamlet-mode") (:keywords  " wp" " languages" " comm"))])(haml-mode . [(20150509 1111) ((ruby-mode (1 0)) ) "Major mode for editing Haml files" single ((url: ."https://github.com/nex3/haml-mode") (:keywords  " markup" " language" " html"))])(hamburg-theme . [(20160123 2202) ((emacs (24)) ) "Color Theme with a dark blue background." single ((url: ."https://github.com/mswift42/hamburg-theme") (:keywords ""))])(ham-mode . [(20150811 2106) ((markdown-mode (2 0)) (html-to-markdown (1 2)) ) "Html As Markdown. Transparently edit an html file using markdown  * lexicalbinding:t *" single ((url: ."https://github.com/Malabarba/ham-mode") (:keywords  " convenience emulation wp"))])(hackernews . [(20160326 2225)  nil  "Hacker News Client for Emacs" tar ((url: ."https://github.com/clarete/hackernews.el") (:keywords  " hackernews"))])(guru-mode . [(20160416 1022)  nil  "Become an Emacs guru   * lexicalbinding:t *" single ((url: ."https://github.com/bbatsov/guru-mode") (:keywords  " convenience"))])(guide-key-tip . [(20150925 1730) ((guide-key (1 2 3)) (pos-tip (0 4 5)) ) "Show guidekey hints using postip" single ((url: ."https://github.com/aki2o/guide-key-tip") (:keywords  " help convenience Tooltip"))])(guide-key . [(20150108 1435) ((popwin (0 3 0)) (dash (2 10 0)) (s (1 9 0)) ) "Guide the following key bindings automatically and dynamically" single ((url: ."https://github.com/kai2nenobu/guide-key") (:keywords  " help convenience"))])(gscholar-bibtex . [(20160506 1122)  nil  "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((url: ."https://github.com/cute-jumper/gscholar-bibtex") (:keywords  " extensions"))])(gs-mode . [(20151202 1806)  nil  "Major mode for editing GrADS script files" single ((url: ."https://github.com/yyr/emacs-grads") (:keywords  " GrADS script major-mode"))])(gruvbox-theme . [(20160514 2158)  nil  "A retrogroove colour theme for Emacs" single ((url: ."https://github.com/Greduan/emacs-theme-gruvbox") (:keywords ""))])(grunt . [(20160316 2328) ((dash (2 9 0)) (emacs (24 3)) (ansi-color (3 4 2)) ) "Some glue to stick Emacs and Gruntfiles together" single ((url: ."https://github.com/gempesaw/grunt.el") (:keywords  " convenience" " grunt"))])(gruber-darker-theme . [(20160417 1930)  nil  "Gruber Darker color theme for Emacs 24." single ((url: ."https://github.com/rexim/gruber-darker-theme") (:keywords ""))])(groovy-mode . [(20160505 1501)  nil  "Major mode for Groovy source files" tar ((url: ."https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes") (:keywords  " languages"))])(grizzl . [(20160131 1551) ((emacs (24 3)) (cl-lib (0 5)) ) "Fast fuzzy search index for Emacs. * lexicalbinding: t *" single ((url: ."https://github.com/grizzl/grizzl") (:keywords  "   convenience" " usability"))])(greymatters-theme . [(20150621 1923) ((emacs (24)) ) "Emacs 24 theme with a light background." single ((url: ."https://github.com/mswift42/greymatters-theme") (:keywords ""))])(grep-a-lot . [(20131006 2147)  nil  "manages multiple search results buffers for grep" single ((url: ."https://github.com/ZungBang/emacs-grep-a-lot") (:keywords  " tools" " convenience" " search"))])(gregorio-mode . [(20151026 2220)  nil  "Gregorio Mode for .gabc files" single ((url: ."https://github.com/cajetanus/gregorio-mode.el") (:keywords  " gregorio" "chant"))])(green-phosphor-theme . [(20150517 15)  nil  "A light color theme with muted, autumnal colors." single ((url: ."https://github.com/aalpern/emacs-color-theme-green-phosphor") (:keywords  " color" " theme"))])(grapnel . [(20151122 842)  nil  "HTTP request lib with flexible callback dispatch" single ((url: ."https://github.com/leathekd/grapnel") (:keywords ""))])(graphviz-dot-mode . [(20151127 2221)  nil  "Mode for the dotlanguage used by graphviz (att)." single ((url: ."https://github.com/ppareit/graphviz-dot-mode") (:keywords  " mode dot dot-language dotlanguage graphviz graphs att"))])(graphene-meta-theme . [(20151108 1800)  nil  "Integrated theming for common packages" single ((url: ."https://github.com/rdallasgray/graphene-meta-theme") (:keywords  " defaults"))])(graphene . [(20151109 1540)  nil  "Newbiefriendly defaults" tar ((url: ."https://github.com/rdallasgray/graphene") (:keywords  " defaults"))])(grandshell-theme . [(20160408 2250)  nil  "Grand Sl color theme for Emacs > 24" tar ((url: ."https://github.com/steckerhalter/grandshell-theme") (:keywords  " color theme grand shell faces"))])(grails-projectile-mode . [(20160327 2124) ((emacs (24)) (cl-lib (0 5)) (projectile (0 10 0)) ) "Grails mode with Projectile for projects management." tar ((url: ."https://github.com/yveszoundi/grails-projectile-mode") (:keywords  " grails" " projectile"))])(grails-mode . [(20160505 1501)  nil  "minormode that adds some Grails project management to a grails project" single ((url: ."https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes") (:keywords  " languages"))])(grails . [(20160417 1436) ((emacs (24)) ) "Minor mode for Grails projects" tar ((url: ."https://github.com/lifeisfoo/emacs-grails") (:keywords ""))])(gradle-mode . [(20150927 159) ((s (1 8 0)) ) "Gradle integration with Emacs' compile" single ((url: ."https://github.com/jacobono/emacs-gradle-mode") (:keywords  " gradle"))])(gplusify . [(20150313 344)  nil  "Add Google Plus markup to a piece of code" single ((url: ."https://github.com/jorgenschaefer/gplusify") (:keywords ""))])(govet . [(20150429 259)  nil  "linter/problem finder for the Go source code" single ((url: ."https://github.com/meshelton/govet") (:keywords ""))])(goto-last-change . [(20150110 223)  nil  "Move point through bufferundolist positions" single ((url: ."https://github.com/camdez/goto-last-change.el") (:keywords  " convenience"))])(goto-gem . [(20140730 245) ((s (1 9 0)) ) "Open dired in gem directory" single ((url: ."https://github.com/pidu/goto-gem") (:keywords  " gemfile" " convenience"))])(gotham-theme . [(20160517 2055)  nil  "A very dark Emacs color theme." single ((url: ."https://github.com/wasamasa/gotham-theme") (:keywords ""))])(gotest . [(20160414 1625) ((f (0 17 3)) (s (1 11 0)) (emacs (24 3)) (go-mode (1 3 1)) ) "Launch GO unit tests" single ((url: ."https://github.com/nlamirault/gotest.el") (:keywords  " languages" " go" " tests"))])(gorepl-mode . [(20151121 2022) ((emacs (24)) ) "Go REPL Interactive Deopment in top of Gore * lexicalbinding: t *" single ((url: ."https://github.com/manute/gorepl-mode") (:keywords  " languages" " go" " golang" " gorepl"))])(gore-mode . [(20151124 327) ((go-mode (1 0 0)) ) "Simple mode for gore, a commandline evaluator for golang." single ((url: ."https://github.com/sergey-pashaev/gore-mode") (:keywords  " go" " repl"))])(goose-theme . [(20160401 1333) ((emacs (24 1)) ) "A gray color theme" single ((url: ."https://github.com/thwg/goose-theme") (:keywords ""))])(google-translate . [(20160514 625)  nil  "Emacs interface to Google Translate" tar ((url: ."https://github.com/atykhonov/google-translate") (:keywords  " convenience"))])(google-this . [(20160514 112) ((emacs (24 1)) ) "A set of functions and bindings to google under point." single ((url: ."https://github.com/Malabarba/emacs-google-this") (:keywords  " convenience hypermedia"))])(google-maps . [(20130412 1730)  nil  "Access Google Maps from Emacs" tar ((url: ."https://github.com/jd/google-maps.el") (:keywords  " comm"))])(google-contacts . [(20160111 1811) ((oauth2 (0 10)) ) "Support for Google Contacts in Emacs" tar ((url: ."https://github.com/jd/google-contacts.el") (:keywords  " comm"))])(google-c-style . [(20160518 551)  nil  "Google's C/C++ style for cmode" single ((url: ."https://github.com/google/styleguide") (:keywords  " c" " tools"))])(google . [(20140417 148)  nil  "Emacs interface to the Google API" single ((url: ."https://github.com/hober/google-el") (:keywords  " comm" " processes" " tools"))])(gom-mode . [(20131008 1053)  nil  "Major mode for Gomfile" single ((url: ."https://github.com/syohex/emacs-gom-mode") (:keywords ""))])(golden-ratio-scroll-screen . [(20151218 1019)  nil  "Scroll half screen down or up, and highlight current line" single ((url: ."https://github.com/jixiuf/golden-ratio-scroll-screen") (:keywords  " scroll screen highlight"))])(golden-ratio . [(20150819 1920)  nil  "Automatic resizing of Emacs windows to the golden ratio" single ((url: ."https://github.com/roman/golden-ratio.el") (:keywords  " Window Resizing"))])(gold-mode . [(20140607 1006) ((sws-mode (0)) ) "Major mode for editing .gold files" single ((url: ."https://github.com/yuutayamada/gold-mode-el") (:keywords  " golang template gold"))])(god-mode . [(20151006 25)  nil  "Godlike command entering minor mode" tar ((url: ."https://github.com/chrisdone/god-mode") (:keywords ""))])(go-stacktracer . [(20150501 542)  nil  "parse Go stack traces" single ((url: ."https://github.com/samertm/go-stacktracer.el") (:keywords  " tools"))])(go-snippets . [(20151122 1457) ((yasnippet (0 8 0)) ) "Yasnippets for go" tar ((url: ."https://github.com/toumorokoshi/go-snippets") (:keywords ""))])(go-scratch . [(20150810 1240) ((emacs (24)) (go-mode (1 3 1)) ) "*scratch* buffer for Go * lexicalbinding: t *" single ((url: ."https://github.com/shosti/go-scratch.el") (:keywords  " languages go"))])(go-projectile . [(20160419 717) ((go-rename (0)) (projectile (0 10 0)) (go-mode (0)) (go-guru (0)) (go-eldoc (0 16)) ) "Go addons for Projectile" single ((url: ."https://github.com/dougm/go-projectile") (:keywords  " project" " convenience"))])(go-playground-cli . [(20160503 1714) ((f (0 17 2)) (s (1 10 0)) (emacs (24)) (names (20151201 404)) (request (0 2 0)) (deferred (0 3 2)) (cl-lib (0 5)) (let-alist (1 0 4)) ) "Go Playground client tool  * lexicalbinding: t *" single ((url: ."https://github.com/kosh04/emacs-go-playground") (:keywords ""))])(go-playground . [(20160427 328) ((emacs (24)) (gotest (0 40 0)) (go-mode (1 0 0)) ) "Local Golang playground for short snippets." single ((url: ."https://github.com/grafov/go-playground") (:keywords  " tools" " golang"))])(go-mode . [(20160512 1610)  nil  "Copyright 2013 The  Authors. All rights reserved." tar ((url: ."https://github.com/dominikh/go-mode.el") (:keywords  " languages go"))])(go-impl . [(20160321 616)  nil  "impl integration for gomode" single ((url: ."https://github.com/dominikh/go-impl.el") (:keywords ""))])(go-gopath . [(20160313 2039) ((cl-lib (0 5)) ) "Will guess GOPATH using gb and projectile." single ((url: ."https://github.com/iced/go-gopath") (:keywords ""))])(go-errcheck . [(20150829 235)  nil  "errcheck integration for gomode" single ((url: ."https://github.com/dominikh/go-errcheck.el") (:keywords ""))])(go-eldoc . [(20160307 2216) ((cl-lib (0 5)) (go-mode (1 0 0)) ) "doc for gomode * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-go-eldoc") (:keywords ""))])(go-dlv . [(20160518 446) ((go-mode (1 3 1)) ) "Go ve  Debug Go programs interactiy with the GUD." single ((url: ."https://github.com/benma/go-dlv.el") (:keywords  " Go" " debug" " debugger" " delve" " interactive" " gud"))])(go-direx . [(20151127 1555) ((direx (1 0 0)) (cl-lib (0 5)) ) "Tree style source code viewer for Go language" single ((url: ."https://github.com/syohex/emacs-go-direx") (:keywords ""))])(go-complete . [(20151015 1728) ((cl-lib (0 5)) (go-mode (0)) ) "Native code completion for Go" single ((url: ."https://github.com/vibhavp/go-complete") (:keywords  " go" " golang" " completion"))])(go . [(20160501 839) ((emacs (24)) ) "Play GO, translate and transfer between GO back ends" tar ((url: ."https://github.com/eschulte/el-go") (:keywords  " game go sgf"))])(gnus-x-gm-raw . [(20140611 556) ((log4e (0 2 0)) (yaxception (0 1)) ) "Search mail of Gmail using XGMRAW as web interface" single ((url: ."https://github.com/aki2o/gnus-x-gm-raw") (:keywords  " gnus"))])(gnus-summary-ext . [(20160302 1134)  nil  "Filename:" single ((url: ."https://github.com/vapniks/gnus-summary-ext") (:keywords  " comm"))])(gnus-desktop-notify . [(20160210 1847) ((gnus (1 0)) ) "Gnus Desktop Notification global minor mode" single ((url: ."https://github.com/wavexx/gnus-desktop-notify.el") (:keywords ""))])(gnus-alias . [(20150316 842)  nil  "an alternative to gnuspostingstyles" single ((url: ."https://github.com/hexmode/gnus-alias") (:keywords  "        personality" " identity" " news" " mail" " gnus"))])(gnuplot-mode . [(20151123 1539)  nil  "Major mode for editing gnuplot scripts" single ((url: ."https://github.com/mkmcc/gnuplot-mode") (:keywords  " gnuplot" " plotting"))])(gnuplot . [(20150101 537)  nil  "drive  from within emacs" tar ((url: ."https://github.com/bruceravel/gnuplot-mode") (:keywords  "   gnuplot" " plotting"))])(gnu-apl-mode . [(20160506 1240)  nil  "Emacs mode for GNU APL * lexicalbinding: t *" tar ((url: ."https://github.com/lokedhs/gnu-apl-mode") (:keywords  " languages"))])(gntp . [(20141025 1050)  nil  "Growl Notification Protocol for Emacs * lexicalbinding: t *" single ((url: ."https://github.com/tekai/gntp.el") (:keywords ""))])(gnomenm . [(20150317 318)  nil  "Emacs interface to Gnome nmcli command" single ((url: ."https://github.com/nicferrier/emacs-nm") (:keywords  " processes" " hardware"))])(gnome-calendar . [(20140112 1959)  nil  "Integration with the GNOME Sl calendar" single ((url: ."https://github.com/NicolasPetton/gnome-calendar.el") (:keywords  " gnome calendar"))])(gmpl-mode . [(20151117 349) ((emacs (24)) ) "Major mode for editing GMPL(MathProg) files" single ((url: ."https://github.com/cute-jumper/gmpl-mode") (:keywords  " extensions"))])(gmail2bbdb . [(20150921 2136)  nil  "import email and name into bbdb from vcard." single ((url: ."https://github.com/redguardtoo/gmail2bbdb") (:keywords  " vcard bbdb email contact gmail"))])(gmail-message-mode . [(20140815 2316) ((ham-mode (1 0)) ) "A majormode for editing gmail messages using markdown syntax." single ((url: ."https://github.com/Malabarba/gmail-mode") (:keywords  " mail convenience emulation"))])(glsl-mode . [(20160210 33)  nil  "major mode for Open GLSL shader files" single ((url: ."https://github.com/jimhourihan/glsl-mode") (:keywords  " languages"))])(gitty . [(20151121 1548)  nil  "vcmode extension for fast git interaction" single ((url: ."https://github.com/jorgenschaefer/gitty") (:keywords  " vc"))])(gitolite-clone . [(20150819 2139) ((pcache (0 3 1)) (dash (2 10 0)) (s (1 9 0)) (emacs (24)) ) "Clone gitolite repositories from a completing list * lexicalbinding: t *" single ((url: ."https://github.com/IvanMalison/gitolite-clone") (:keywords  " gitolite clone git"))])(gitlab . [(20160203 0) ((dash (2 9 0)) (s (1 9 0)) (pkg-info (0 5 0)) (request (0 1 0)) ) "Emacs client for Gitlab" tar ((url: ."https://github.com/nlamirault/emacs-gitlab") (:keywords  " gitlab"))])(gitignore-mode . [(20160319 1802)  nil  "Major mode for editing .gitignore files * lexicalbinding: t *" single ((url: ."https://github.com/magit/git-modes") (:keywords  " convenience vc git"))])(github-notifier . [(20160505 1302) ((emacs (24)) ) "Displays your GitHub notifications unread count in modeline  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/github-notifier.el") (:keywords  " github" " mode-line"))])(github-issues . [(20120426 638)  nil  "Emacs utility functions and modes for managing GitHub projects' issues" single ((url: ."https://github.com/inkel/github-issues.el") (:keywords  " GitHub Issues"))])(github-clone . [(20160114 2253) ((magit (2 1 0)) (emacs (24 4)) (gh (0 7 2)) ) "Fork and clone github repos  * lexicalbinding: t *" single ((url: ."https://github.com/dgtized/github-clone.el") (:keywords  " vc" " tools"))])(github-browse-file . [(20160205 2228) ((cl-lib (0 5)) ) "View the file you're editing on GitHub" single ((url: ."https://github.com/osener/github-browse-file") (:keywords  " convenience vc git github"))])(gitconfig-mode . [(20160319 1802)  nil  "Major mode for editing .gitconfig files * lexicalbinding: t *" single ((url: ."https://github.com/magit/git-modes") (:keywords  " convenience vc git"))])(gitconfig . [(20151122 103)  nil  "Filename:" single ((url: ."https://github.com/tonini/gitconfig.el") (:keywords  " git" " gitconfig" " git-config"))])(gitattributes-mode . [(20160319 1802)  nil  "Major mode for editing .gitattributes files * lexicalbinding: t *" single ((url: ."https://github.com/magit/git-modes") (:keywords  " convenience vc git"))])(git-wip-timemachine . [(20150408 1808) ((s (1 9 0)) ) "Walk through gitwip revisions of a file" single ((url: ."https://github.com/itsjeyd/git-wip-timemachine") (:keywords  " git"))])(git-timemachine . [(20160324 340)  nil  "Walk through git revisions of a file" single ((url: ."https://github.com/pidu/git-timemachine") (:keywords  " git"))])(git-ps1-mode . [(20160102 1141)  nil  "Global minormode to print __git_ps1" single ((url: ."https://github.com/10sr/git-ps1-mode-el") (:keywords  " utility mode-line git"))])(git-messenger . [(20160122 1042) ((popup (0 5 0)) (cl-lib (0 5)) ) "Pop up last commit information of current line" single ((url: ."https://github.com/syohex/emacs-git-messenger") (:keywords ""))])(git-link . [(20160402 950)  nil  "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single ((url: ."https://github.com/sshaw/git-link") (:keywords  " git"))])(git-lens . [(20160204 1437) ((emacs (24 4)) ) "Show new, eted or modified files in branch" single ((url: ."https://github.com/pidu/git-lens") (:keywords  " vc" " convenience"))])(git-gutter-fringe+ . [(20141004 1429) ((git-gutter+ (0 1)) (fringe-helper (1 0 1)) ) "+  Fringe version of gitgutter+" single ((url: ."https://github.com/nonsequitur/git-gutter-fringe-plus") (:keywords ""))])(git-gutter-fringe . [(20151119 1405) ((emacs (24)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (git-gutter (0 82)) ) "Fringe version of gitgutter * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-git-gutter-fringe") (:keywords ""))])(git-gutter+ . [(20151205 123) ((dash (0)) (git-commit (0)) ) "+  Manage Git hunks straight from the buffer * lexicalbinding: t *" single ((url: ."https://github.com/nonsequitur/git-gutter-plus") (:keywords  " git vc"))])(git-gutter . [(20160409 2213) ((emacs (24)) (cl-lib (0 5)) ) "Port of Sublime Text plugin GitGutter * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-git-gutter") (:keywords ""))])(git-dwim . [(20160513 1640)  nil  "Contextaware git commands such as branch handling" single ((url: ."https://github.com/rubikitch/emacs-git-dwim") (:keywords  " git" " tools" " convenience"))])(git-command . [(20160111 2103) ((term-run (0 1 4)) (with-editor (2 3 1)) ) "Yet another Git interface" single ((url: ."https://github.com/10sr/git-command-el") (:keywords  " utility git"))])(git-blame . [(20141205 614)  nil  "Minor mode for incremental blame for Git  * coding: utf8 *" single ((url: ."https://github.com/tsgates/git-emacs") (:keywords  "   git" " version control" " release management"))])(git-auto-commit-mode . [(20150404 2251)  nil  "Emacs Minor mode to automatically commit and push" single ((url: ."https://github.com/ryuslash/git-auto-commit-mode") (:keywords  " vc"))])(git-annex . [(20160216 311)  nil  "Mode for easy editing of 'd files" single ((url: ."https://github.com/jwiegley/git-annex-el") (:keywords  " files data git annex"))])(git . [(20151023 1620) ((f (0 10 0)) (dash (2 2 0)) (s (1 7 0)) ) "An Elisp API for programmatically using Git" single ((url: ."https://github.com/rejeep/git.el") (:keywords  " git"))])(gist . [(20160119 856) ((emacs (24 1)) (gh (0 9 2)) ) "Emacs integration for .github.com" single ((url: ."https://github.com/defunkt/gist.el") (:keywords  " tools"))])(gildas-mode . [(20150923 1604) ((emacs (24 3)) (polymode (0)) ) "Major mode for Gildas" single ((url: ."https://github.com/smaret/gildas-mode") (:keywords  " languages" " gildas"))])(ghq . [(20151130 2257)  nil  "Ghq interface for emacs * lexicalbinding: t *" single ((url: ."https://github.com/rcoedo/emacs-ghq") (:keywords  " ghq"))])(gherkin-mode . [(20140108 4)  nil  "An emacs major mode for editing gherkin files." single ((url: ."https://github.com/candera/gherkin-mode") (:keywords  " languages"))])(ghci-completion . [(20151125 2057) ((emacs (24 1)) (cl-lib (0 5)) ) "Completion for GHCi commands in inferiorhasl buffers * lexicalbinding: t *" single ((url: ."https://github.com/manzyuk/ghci-completion") (:keywords  " convenience"))])(ghc-imported-from . [(20141125 332) ((emacs (24 1)) ) "Hasl documentation lookup with   * lexicalbinding: t *" single ((url: ."https://github.com/david-christiansen/ghc-imported-from-el") (:keywords  " languages"))])(gh-md . [(20151208 140) ((emacs (24)) ) "Render markdown using the Github api  * lexicalbinding: t *" single ((url: ."https://github.com/emacs-pe/gh-md.el") (:keywords  " convenience"))])(gh . [(20160223 1011)  nil  "Copyrit (C) 2011  Yann Hodique" tar ((url: ."https://github.com/sigma/gh.el") (:keywords ""))])(ggtags . [(20151215 544) ((emacs (24)) (cl-lib (0 5)) ) "emacs frontend to GNU Global source code tagging system  * lexicalbinding: t *" single ((url: ."https://github.com/leoliu/ggtags") (:keywords  " tools" " convenience"))])(ggo-mode . [(20150727 2056)  nil  "Gengetopt major mode" single ((url: ."https://github.com/mkjunker/ggo-mode") (:keywords  " extensions" " convenience" " local"))])(gerrit-download . [(20150714 2208) ((magit (2 1 0)) (emacs (24 0)) ) "Show gerrit reviews in a diff buffer." single ((url: ."https://github.com/chmouel/gerrit-download.el") (:keywords  " tools gerrit git"))])(german-holidays . [(20151102 2343)  nil  "German holidays for Emacs calendar" single ((url: ."https://github.com/rudolfochrist/german-holidays") (:keywords ""))])(genrnc . [(20140612 2037) ((log4e (0 2 0)) (yaxception (0 1)) (concurrent (0 3)) (deferred (0 3 1)) ) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((url: ."https://github.com/aki2o/emacs-genrnc") (:keywords  " xml"))])(general-close . [(20160501 1544)  nil  "Insert closing imiter" tar ((url: ."https://github.com/emacs-berlin/general-close") (:keywords  " languages" " lisp"))])(general . [(20160519 330) ((cl-lib (0 5)) ) "Convenience wrappers for keybindings." tar ((url: ."https://github.com/noctuid/general.el") (:keywords  " vim" " evil" " leader" " keybindings" " keys"))])(geeknote . [(20150227 110) ((emacs (24)) ) "Use Evernote in Emacs through" single ((url: ."https://github.com/avendael/emacs-geeknote") (:keywords  " evernote" " geeknote" " note" " emacs-evernote" " evernote-mode"))])(geben-helm-projectile . [(20160430 1348) ((geben (0 26)) (emacs (24)) (helm-projectile (0 13 0)) ) "Integrate mprojectile with geben" single ((url: ."https://github.com/ahungry/geben-helm-projectile") (:keywords  " ahungry emacs geben helm projectile debug"))])(geben . [(20160510 529) ((emacs (24)) (cl-lib (0 5)) ) "DBGp protocol frontend, a script debugger" tar ((url: ."https://github.com/ahungry/geben") (:keywords  " DBGp" " debugger" " PHP" " Xdebug" " Perl" " Python" " Ruby" " Tcl" " Komodo"))])(gather . [(20150218 2122)  nil  "Gather string in buffer." single ((url: ."https://github.com/mhayashi1120/Emacs-gather") (:keywords  " matching" " convenience" " tools"))])(gandalf-theme . [(20130809 1747)  nil  "Gandalf color theme" single ((url: ."https://github.com/ptrv/gandalf-theme-emacs") (:keywords  " color theme"))])(gams-mode . [(20160320 1728)  nil  "Major mode for editing GAMS (General Algebraic Moing System) files." single ((url: ."https://github.com/ShiroTakeda/gams-mode") (:keywords  " GAMS"))])(fzf . [(20160118 720) ((emacs (24 4)) ) "A frontend for ." single ((url: ."https://github.com/bling/fzf.el") (:keywords  " fzf fuzzy search"))])(fyure . [(20130216 2114)  nil  "An interface to fix Japanese hyokiyure" tar ((url: ."https://github.com/mooz/fyure") (:keywords  " languages"))])(fxrd-mode . [(20160504 445) ((s (1 2)) ) "Major mode for editing fixed fd width files" tar ((url: ."https://github.com/msherry/fxrd-mode") (:keywords  " convenience"))])(fwb-cmds . [(20131210 800)  nil  "misc frame, window and buffer commands" single ((url: ."https://github.com/tarsius/fwb-cmds") (:keywords  " convenience"))])(fvwm-mode . [(20160411 1938)  nil  "A major mode for editing Fvwm configuration files" single ((url: ."https://github.com/theBlackDragon/fvwm-mode") (:keywords  " files"))])(fuzzy . [(20150730 1137)  nil  "Fuzzy Matching" single ((url: ."https://github.com/auto-complete/fuzzy-el") (:keywords  " convenience"))])(furl . [(20150509 1116)  nil  "Friendly URL retrieval" single ((url: ."https://github.com/nex3/furl-el") (:keywords ""))])(function-args . [(20160206 2117) ((swiper (0 2 0)) ) "C++ completion for GNU Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/abo-abo/function-args") (:keywords ""))])(fullframe . [(20160504 2249) ((cl-lib (0 5)) ) "Generalized automatic execution in a single frame" single ((url: ."https://github.com/tomterl/fullframe") (:keywords  " fullscreen"))])(full-ack . [(20140923 2316)  nil  "a frontend for ack" tar ((url: ."https://github.com/nschum/full-ack") (:keywords  " tools" " matching"))])(fstar-mode . [(20160426 749) ((dash (2 11)) (emacs (24 3)) ) "Support for F* programming * lexicalbinding: t *" single ((url: ."https://github.com/FStarLang/fstar-mode.el") (:keywords  " convenience" " languages"))])(fsharp-mode . [(20160427 2348)  nil  "Support for the F# programming language" tar ((url: ."https://github.com/rneatherway/emacs-fsharp-mode-bin") (:keywords  " languages"))])(fringe-helper . [(20140621 530)  nil  "per functions for fringe bitmaps" tar ((url: ."https://github.com/nschum/fringe-helper.el") (:keywords  " lisp"))])(fringe-current-line . [(20140111 1211)  nil  "show current line on the fringe." single ((url: ."https://github.com/kyanagi/fringe-current-line") (:keywords ""))])(free-keys . [(20151202 1922) ((cl-lib (0 3)) ) "Show free keybindings for modkeys or prefixes" single ((url: ."https://github.com/Fuco1/free-keys") (:keywords  " convenience"))])(framesize . [(20131018 532) ((key-chord (0 5 20080915)) ) "change the size of frames in Emacs" single ((url: ."https://github.com/nicferrier/emacs-framesize") (:keywords  " frames"))])(frame-tag . [(20151121 1518) ((cl-lib (0 5)) ) "Minor mode that assigns a unique number to each frame for easy switching" single ((url: ."https://github.com/liangzan/frame-tag.el") (:keywords  " frame" " movement"))])(frame-restore . [(20140812 509) ((emacs (24 1)) ) "Restore Emacs frame * lexicalbinding: t *" single ((url: ."https://github.com/lunaryorn/frame-restore.el") (:keywords  "  frames convenience"))])(fountain-mode . [(20160221 2107) ((s (1 9 0)) (emacs (24 4 0)) ) "Major mode for screenwriting in Fountain markup" single ((url: ."https://github.com/rnkn/fountain-mode") (:keywords  " wp"))])(fortune-cookie . [(20151117 1241)  nil  "Print a fortune in your scratch buffer." single ((url: ."https://github.com/andschwa/fortune-cookie") (:keywords  " fortune cowsay scratch startup"))])(fortpy . [(20150716 432) ((python-environment (0 0 2)) (auto-complete (1 4)) (epc (0 1 0)) (pos-tip (0 4 5)) ) "a Fortran autocompletion for Emacs" tar ((url: ."https://github.com/rosenbrockc/fortpy-el") (:keywords ""))])(format-sql . [(20150422 2133)  nil  "Use  to make your SQL readable in directly Emacs." single ((url: ."https://github.com/paetzke/format-sql.el") (:keywords ""))])(form-feed . [(20160103 653)  nil  "Display ^L glyphs as horizontal lines" single ((url: ."https://github.com/wasamasa/form-feed") (:keywords  " faces"))])(foreman-mode . [(20150713 932) ((f (0 17 2)) (dash (2 10 0)) (dash-functional (1 2 0)) (s (1 9 0)) (emacs (24)) ) "View and manage Procfilebased applications" single ((url: ."https://github.com/zweifisch/foreman-mode") (:keywords  " foreman"))])(foreign-regexp . [(20160319 7)  nil  "search and replace by foreign regexp." tar ((url: ."https://github.com/k-talo/foreign-regexp.el") (:keywords  " convenience emulations matching tools unix wp"))])(forecast . [(20160514 259) ((emacs (24 4)) ) "Display a .io weather report in a buffer * lexicalbinding: t *" single ((url: ."https://github.com/cadadr/forecast.el") (:keywords  " weather" " forecast"))])(fontawesome . [(20151202 2230) ((helm-core (1 7 7)) (cl-lib (0 5)) ) "utility" tar ((url: ."https://github.com/syohex/emacs-fontawesome") (:keywords ""))])(font-utils . [(20150807 151) ((pcache (0 2 3)) (persistent-soft (0 8 8)) ) "Utility functions for working with fonts" single ((url: ."https://github.com/rolandwalker/font-utils") (:keywords  " extensions"))])(font-lock-studio . [(20141202 858) ((emacs (24 3)) ) "interactive debugger for Font Lock keywords." single ((url: ."https://github.com/Lindydancer/font-lock-studio") (:keywords  " faces" " tools"))])(folding . [(20140401 1503)  nil  "A editorlike minor mode." single ((url: ."https://github.com/jaalto/project-emacs--folding-mode") (:keywords  "    tools"))])(fold-this . [(20150601 1842)  nil  "Just fold this region please" single ((url: ."https://github.com/magnars/fold-this.el") (:keywords  " convenience"))])(fold-dwim-org . [(20131203 2151) ((fold-dwim (1 2)) ) "Filename:" single ((url: ."https://github.com/mattfidler/fold-dwim-org") (:keywords  " Folding Emacs Org-mode"))])(fold-dwim . [(20140209 37)  nil  "Unified user interface for Emacs folding modes" single ((url: ."https://github.com/emacsmirror/fold-dwim") (:keywords ""))])(foggy-night-theme . [(20160209 2308) ((emacs (24)) ) "Dark low contrast theme with soft and muted colors." single ((url: ."https://github.com/mswift42/foggy-night-theme") (:keywords ""))])(focus-autosave-mode . [(20151012 1742) ((emacs (24 4)) ) "Automatically save files in focusouthook.  * lexicalbinding: t *" single ((url: ."https://github.com/Vifon/focus-autosave-mode.el") (:keywords  " convenience" " files" " frames" " mouse"))])(focus . [(20160201 618) ((emacs (24)) (cl-lib (0 5)) ) "Dim the font color of text in surrounding sections  * lexicalbinding: t *" single ((url: ."https://github.com/larstvei/Focus") (:keywords ""))])(fm-bookmarks . [(20151203 2205) ((emacs (24 3)) (cl-lib (0 5)) ) "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired  * lexicalbinding: t *" single ((url: ."https://github.com/kuanyui/fm-bookmarks.el") (:keywords  " tools"))])(fm . [(20130127 818)  nil  "follow mode for compilation/output buffers" single ((url: ."https://github.com/emacsmirror/fm") (:keywords  " outlines"))])(flyspell-popup . [(20160118 1808) ((popup (0 5 0)) ) "Correcting words with Flysl in popup menus" single ((url: ."https://github.com/xuchunyang/flyspell-popup") (:keywords  " convenience"))])(flyspell-lazy . [(20141222 2252)  nil  "Improve flysl responsiveness using idle timers" single ((url: ."https://github.com/rolandwalker/flyspell-lazy") (:keywords  " spelling"))])(flyspell-correct . [(20160509 1847)  nil  "correcting words with flysl via custom interface * lexicalbinding: t *" single ((url: ."https://github.com/d12frosted/flyspell-correct") (:keywords ""))])(flyparens . [(20140724 246)  nil  "Check for unbalanced parens on the fly" tar ((url: ."https://github.com/jiyoo/flyparens") (:keywords  " faces" " convenience" " lisp" " matching" " parentheses" " parens"))])(flymake-yaml . [(20131211 2058) ((flymake-easy (0 1)) ) "A flymake handler for YAML" single ((url: ."https://github.com/yasuyk/flymake-yaml") (:keywords  " yaml"))])(flymake-vala . [(20150326 1331) ((flymake-easy (0 1)) ) "A flymake handler for valamode files" single ((url: ."https://github.com/daniellawrence/flymake-vala") (:keywords  " convenience" " vala"))])(flymake-solidity . [(20160424 2220) ((flymake-easy (0 10)) ) "A flymake handler for solidity using solc" single ((url: ."https://github.com/kootenpv/flymake-solidity") (:keywords ""))])(flymake-shell . [(20121105 300) ((flymake-easy (0 1)) ) "A flymake syntaxchecker for sl scripts" single ((url: ."https://github.com/purcell/flymake-shell") (:keywords ""))])(flymake-sass . [(20141023 2127) ((flymake-easy (0 1)) ) "Flymake handler for sass and scss files" single ((url: ."https://github.com/purcell/flymake-sass") (:keywords ""))])(flymake-rust . [(20141005 652) ((flymake-easy (0 1)) ) "A flymake handler for rustmode files" single ((url: ."https://github.com/jxs/flymake-rust") (:keywords ""))])(flymake-ruby . [(20141023 2127) ((flymake-easy (0 1)) ) "A flymake handler for rubymode files" single ((url: ."https://github.com/purcell/flymake-ruby") (:keywords ""))])(flymake-python-pyflakes . [(20141023 2127) ((flymake-easy (0 8)) ) "A flymake handler for pythonmode files using pyflakes (or flake8)" single ((url: ."https://github.com/purcell/flymake-python-pyflakes") (:keywords ""))])(flymake-puppet . [(20141007 955) ((flymake-easy (0 9)) ) "An Emacs flymake handler for syntaxchecking puppet using puppetlint" single ((url: ."https://github.com/benprew/flymake-puppet") (:keywords ""))])(flymake-phpcs . [(20140713 1431) ((flymake-easy (0 9)) ) "making flymake work with PHP CodeSniffer" single ((url: ."https://github.com/senda-akiha/flymake-phpcs") (:keywords  " flymake" " phpcs" " php"))])(flymake-php . [(20141023 2127) ((flymake-easy (0 1)) ) "A flymake handler for phpmode files" single ((url: ."https://github.com/purcell/flymake-php") (:keywords ""))])(flymake-perlcritic . [(20121029 740) ((flymake (0 3)) ) "Flymake handler for Perl to invoke Perl::Critic" tar ((url: ."https://github.com/illusori/emacs-flymake-perlcritic") (:keywords ""))])(flymake-lua . [(20140310 1730)  nil  "Flymake for Lua" single ((url: ."https://github.com/sroccaserra/emacs") (:keywords  " lua"))])(flymake-less . [(20151111 1538) ((flymake-easy (0 1)) (less-css-mode (0 15)) ) "Flymake handler for LESS stylesheets (lesscss.org)" single ((url: ."https://github.com/purcell/flymake-less") (:keywords  " languages"))])(flymake-json . [(20130424 1457) ((flymake-easy (0 1)) ) "A flymake handler for json using jsonlint" single ((url: ."https://github.com/purcell/flymake-json") (:keywords ""))])(flymake-jslint . [(20141023 2128) ((flymake-easy (0 1)) ) "A flymake handler for javascript using jslint" single ((url: ."https://github.com/purcell/flymake-jslint") (:keywords ""))])(flymake-jshint . [(20140320 600) ((flymake-easy (0 8)) ) "making flymake work with JSHint" single ((url: ."https://github.com/Wilfred/flymake-jshint.el") (:keywords  " flymake" " jshint" " javascript"))])(flymake-hlint . [(20141023 2129) ((flymake-easy (0 1)) ) "A flymake handler for haslmode files using hlint" single ((url: ."https://github.com/purcell/flymake-hlint") (:keywords ""))])(flymake-haskell-multi . [(20141023 2129) ((flymake-easy (0 1)) ) "Syntaxcheck haslmode using both ghc and hlint" tar ((url: ."https://github.com/purcell/flymake-haskell-multi") (:keywords ""))])(flymake-haml . [(20141023 2130) ((flymake-easy (0 1)) ) "A flymake handler for haml files" single ((url: ."https://github.com/purcell/flymake-haml") (:keywords ""))])(flymake-google-cpplint . [(20140415 2046) ((flymake-easy (0 9)) ) "p to comply with the Google C++ Style Guide" single ((url: ."https://github.com/senda-akiha/flymake-google-cpplint") (:keywords  " flymake" " C" " C++"))])(flymake-go . [(20150714 1533)  nil  "A flymake handler for gomode files" single ((url: ."https://github.com/robert-zaremba/flymake-go") (:keywords  " Go flymake"))])(flymake-gjshint . [(20131211 2059)  nil  "A flymake handler for javascript using both jshint and gjslint" single ((url: ."https://github.com/yasuyk/flymake-gjshint-el") (:keywords  " flymake" " javascript" " jshint" " gjslint"))])(flymake-elixir . [(20130810 2217)  nil  "A flymake handler forixirmode .ex files." single ((url: ."https://github.com/syl20bnr/flymake-elixir") (:keywords ""))])(flymake-easy . [(20141023 2130)  nil  "pers for easily building flymake checkers" single ((url: ."https://github.com/purcell/flymake-easy") (:keywords  " convenience" " internal"))])(flymake-css . [(20141023 2130) ((flymake-easy (0 1)) ) "Flymake support for css using csslint" single ((url: ."https://github.com/purcell/flymake-css") (:keywords ""))])(flymake-cppcheck . [(20140415 2057) ((flymake-easy (0 9)) ) "Flymake work with Cppcheck for C/C++" single ((url: ."https://github.com/senda-akiha/flymake-cppcheck") (:keywords  " flymake" " cppcheck" " C" " C++"))])(flymake-coffee . [(20140809 1824) ((flymake-easy (0 1)) ) "A flymake handler for coffee script" single ((url: ."https://github.com/purcell/flymake-coffee") (:keywords ""))])(flycheck-ycmd . [(20160507 1551) ((ycmd (0 9)) (dash (1 2 0)) (emacs (24)) (let-alist (1 0 4)) (flycheck (0 22)) ) "flycheck integration for ycmd" single ((url: ."https://github.com/abingham/emacs-ycmd") (:keywords ""))])(flycheck-typescript-tslint . [(20160507 1944) ((emacs (24)) (flycheck (0 22)) ) "Typescript tslint error checker" single ((url: ."https://github.com/Simplify/flycheck-typescript-tslint") (:keywords  " flycheck" " Typescript" " TSLint"))])(flycheck-tip . [(20160319 934) ((emacs (24 1)) (popup (0 5 0)) (flycheck (0 13)) ) "Show flycheck/flymake errors by tooltip * lexicalbinding: t *" tar ((url: ."https://github.com/yuutayamada/flycheck-tip") (:keywords  " flycheck"))])(flycheck-status-emoji . [(20160208 651) ((emacs (24)) (let-alist (1 0)) (flycheck (0 20)) ) "Show flycheck status using cute, compact emoji * lexicalbinding: t *" single ((url: ."https://github.com/liblit/flycheck-status-emoji") (:keywords  " convenience languages tools"))])(flycheck-stack . [(20160503 2026) ((haskell-mode (13)) (flycheck (26)) ) "Flychecker using stack ghci" single ((url: ."https://github.com/chrisdone/flycheck-stack") (:keywords ""))])(flycheck-rust . [(20160512 450) ((dash (2 4 0)) (emacs (24 1)) (seq (2 15)) (flycheck (0 20)) ) "Flycheck: Rust additions and Cargo support  * lexicalbinding: t *" single ((url: ."https://github.com/flycheck/flycheck-rust") (:keywords  " tools" " convenience"))])(flycheck-pyflakes . [(20151118 1617) ((flycheck (0 18)) ) "Support pyflakes in flycheck" single ((url: ."https://github.com/Wilfred/flycheck-pyflakes") (:keywords ""))])(flycheck-purescript . [(20160513 1045) ((dash (2 12 0)) (emacs (24 3)) (seq (1 11)) (let-alist (1 0 4)) (flycheck (0 22)) ) "Flycheck: PureScript support * lexicalbinding: t *" single ((url: ."https://github.com/emacs-pe/flycheck-purescript") (:keywords  " convenience" " tools" " languages"))])(flycheck-protobuf . [(20160211 2300) ((protobuf-mode (0)) ) "protobuf checker for flycheck" single ((url: ."https://github.com/edvorg/flycheck-protobuf") (:keywords  " flycheck"))])(flycheck-pos-tip . [(20160323 1629) ((dash (2 12)) (pos-tip (0 4 6)) (flycheck (0 22)) ) "Display Flycheck errors in GUI tooltips * lexicalbinding: t *" single ((url: ."https://github.com/flycheck/flycheck-pos-tip") (:keywords  " tools" " convenience"))])(flycheck-pony . [(20160502 525) ((flycheck (0 25 1)) ) "Pony support in Flycheck" single ((url: ."https://github.com/SeanTAllen/flycheck-pony") (:keywords  " tools" " convenience"))])(flycheck-pkg-config . [(20160501 611) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5)) ) "configure flycheck using pkgconfig  * lexicalbinding: t *" single ((url: ."https://github.com/Wilfred/flycheck-pkg-config") (:keywords  " flycheck"))])(flycheck-perl6 . [(20150430 247) ((emacs (24 3)) (flycheck (0 22)) ) "Perl 6 support in Flycheck * lexicalbinding: t *" single ((url: ."https://github.com/hinrik/flycheck-perl6") (:keywords  " tools" " convenience"))])(flycheck-package . [(20160502 1635)  nil  "A Flycheck checker forisp package authors" single ((url: ."https://github.com/purcell/flycheck-package") (:keywords  " lisp"))])(flycheck-ocaml . [(20151108 1914) ((emacs (24 1)) (merlin (2 3)) (let-alist (1 0 3)) (flycheck (0 22)) ) "Flycheck: OCaml support    * lexicalbinding: t *" single ((url: ."https://github.com/flycheck/flycheck-ocaml") (:keywords  " convenience" " tools" " languages"))])(flycheck-nim . [(20150912 747) ((dash (2 4 0)) (flycheck (0 20)) ) "Defines a flycheck syntax checker for nim" single ((url: ."https://github.com/ALSchwalm/flycheck-nim") (:keywords ""))])(flycheck-mypy . [(20160221 632) ((flycheck (0 18)) ) "Support mypy in flycheck" single ((url: ."https://github.com/lbolla/emacs-flycheck-mypy") (:keywords ""))])(flycheck-mercury . [(20151123 1534) ((dash (2 4 0)) (s (1 9 0)) (flycheck (0 22)) ) "Mercury support in Flycheck * lexicalbinding: t *" single ((url: ."https://github.com/flycheck/flycheck-mercury") (:keywords  " convenience languages tools"))])(flycheck-ledger . [(20141023 2131) ((flycheck (0 15)) ) "Flycheck integration for ledger files" single ((url: ."https://github.com/purcell/flycheck-ledger") (:keywords  " convenience languages tools"))])(flycheck-irony . [(20160318 636) ((emacs (24 1)) (irony (0 2 0)) (flycheck (0 22)) ) "Flycheck: C/C++ support via Irony  * lexicalbinding: t *" single ((url: ."https://github.com/Sarcasm/flycheck-irony") (:keywords  " convenience" " tools" " c"))])(flycheck-hdevtools . [(20160115 2244)  nil  "A flycheck checker for Hasl using hdevtools" single ((url: ."https://github.com/flycheck/flycheck-hdevtools") (:keywords  " convenience languages tools"))])(flycheck-haskell . [(20160413 1631) ((dash (2 4 0)) (emacs (24 3)) (seq (1 11)) (let-alist (1 0 1)) (haskell-mode (13 7)) (flycheck (0 25)) ) "Flycheck: Automatic Hasl configuration * lexicalbinding: t *" tar ((url: ."https://github.com/flycheck/flycheck-haskell") (:keywords  " tools" " convenience"))])(flycheck-google-cpplint . [(20160315 1716)  nil  "p to comply with the Google C++ Style Guide" single ((url: ."https://github.com/flycheck/flycheck-google-cpplint") (:keywords  " flycheck" " C" " C++"))])(flycheck-gometalinter . [(20160302 1105) ((emacs (24)) (flycheck (0 22)) ) "flycheck checker for gometalinter" single ((url: ."https://github.com/favadi/flycheck-gometalinter") (:keywords  " convenience" " tools" " go"))])(flycheck-ghcmod . [(20150114 1432)  nil  "A flycheck checker for Hasl using ghcmod  * lexicalbinding: t *" single ((url: ."https://github.com/scturtle/flycheck-ghcmod") (:keywords  " convenience languages tools"))])(flycheck-flow . [(20151218 2004) ((flycheck (0 18)) ) "Support Flow in flycheck" single ((url: ."https://github.com/lbolla/emacs-flycheck-flow") (:keywords ""))])(flycheck-elm . [(20151204 2324) ((emacs (24 4)) (flycheck (0 24)) ) "Flycheck support for them language" tar ((url: ."https://github.com/bsermons/flycheck-elm") (:keywords ""))])(flycheck-elixir . [(20160404 1531) ((flycheck (0 25)) ) "Support Elixir in flycheck" single ((url: ."https://github.com/lbolla/emacs-flycheck-elixir") (:keywords ""))])(flycheck-dmd-dub . [(20151021 1617) ((flycheck (0 24)) ) "Sets flycheckdmdincludepaths from dub package information" single ((url: ."https://github.com/atilaneves/flycheck-dmd-dub") (:keywords  " languages"))])(flycheck-dialyzer . [(20160326 2230) ((flycheck (0 18)) ) "Support dialyzer in flycheck" single ((url: ."https://github.com/lbolla/emacs-flycheck-dialyzer") (:keywords ""))])(flycheck-dedukti . [(20150106 2251) ((dedukti-mode (0 1)) (flycheck (0 19)) ) "Flycheck integration of Dedukti" single ((url: ."https://github.com/rafoo/flycheck-dedukti") (:keywords ""))])(flycheck-d-unittest . [(20160125 2018)  nil  "Add D unittest support to flycheck" single ((url: ."https://github.com/flycheck/flycheck-d-unittest") (:keywords  " flycheck" " d"))])(flycheck-cython . [(20160328 328) ((flycheck (0 25)) ) "Support Cython in flycheck" single ((url: ."https://github.com/lbolla/emacs-flycheck-cython") (:keywords ""))])(flycheck-cstyle . [(20160321 708) ((emacs (24 4)) (flycheck (0 24)) ) "Integrate cstyle with flycheck" single ((url: ."https://github.com/alexmurray/flycheck-cstyle") (:keywords ""))])(flycheck-css-colorguard . [(20151122 1747) ((emacs (24)) (flycheck (0 22)) ) "Detect similar colors in CSS" single ((url: ."https://github.com/Simplify/flycheck-css-colorguard") (:keywords  " flycheck" " CSS" " Colorguard"))])(flycheck-color-mode-line . [(20131126 1346) ((dash (1 2)) (emacs (24 1)) (flycheck (0 15)) ) "Change mode line color with Flycheck status * lexicalbinding: t *" single ((url: ."https://github.com/flycheck/flycheck-color-mode-line") (:keywords  " convenience language tools"))])(flycheck-clangcheck . [(20150712 1510) ((seq (1 7)) (cl-lib (0 5)) (flycheck (0 17)) ) "A Flycheck checker difinition for ClangCheck." single ((url: ."https://github.com/kumar8600/flycheck-clangcheck") (:keywords ""))])(flycheck-checkbashisms . [(20160225 106) ((emacs (24)) (flycheck (0 25)) ) "checkbashisms checker for flycheck * lexicalbinding: t *" single ((url: ."https://github.com/Gnouc/flycheck-checkbashisms") (:keywords  " convenience" " tools" " sh" " unix"))])(flycheck-cask . [(20150920 1953) ((dash (2 4 0)) (emacs (24 1)) (flycheck (0 14)) ) "Cask support in Flycheck * lexicalbinding: t *" single ((url: ."https://github.com/flycheck/flycheck-cask") (:keywords  " tools" " convenience"))])(flycheck-ats2 . [(20151130 2207) ((emacs (24 1)) (flycheck (0 22)) ) "Flycheck: ATS2 support      * lexicalbinding: t *" single ((url: ."https://github.com/drvink/flycheck-ats2") (:keywords  " convenience" " tools" " languages"))])(flycheck-apertium . [(20160406 2118) ((flycheck (0 25)) ) "Apertium checkers in flycheck" tar ((url: ."https://github.com/unhammer/flycheck-apertium") (:keywords  " convenience" " tools" " xml"))])(flycheck . [(20160518 1611) ((dash (2 12 1)) (emacs (24 3)) (pkg-info (0 4)) (seq (1 11)) (let-alist (1 0 4)) ) "Onthefly syntax checking * lexicalbinding: t *" tar ((url: ."https://github.com/flycheck/flycheck") (:keywords  " convenience" " languages" " tools"))])(flx-isearch . [(20160106 417) ((flx (20140821)) (emacs (24)) (cl-lib (0 5)) ) "Fuzzy incremental searching for emacs * lexicalbinding: t *" single ((url: ."https://github.com/PythonNut/flx-isearch") (:keywords  " convenience" " search" " flx"))])(flx-ido . [(20160318 331) ((flx (0 1)) (cl-lib (0 3)) ) "flx integration for ido" single ((url: ."https://github.com/lewang/flx") (:keywords ""))])(flx . [(20160318 331) ((cl-lib (0 3)) ) "fuzzy matching with good sorting" single ((url: ."https://github.com/lewang/flx") (:keywords ""))])(floobits . [(20160518 652) ((json (1 2)) (highlight (0)) ) "Filename:" tar ((url: ."https://github.com/Floobits/floobits-emacs") (:keywords  " comm" " tools"))])(flex-autopair . [(20131210 444)  nil  "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ((url: ."https://github.com/uk-ar/flex-autopair") (:keywords  " keyboard input"))])(flatui-theme . [(20150601 1407)  nil  "A color theme for Emacs based on flatuicolors.com" single ((url: ."https://github.com/john2x/flatui-theme.el") (:keywords ""))])(flatland-theme . [(20140805 1805)  nil  "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ((url: ."https://github.com/gchp/flatland-emacs") (:keywords ""))])(flatland-black-theme . [(20141116 2353) ((emacs (24 0)) ) "an Emacs 24 theme based on Flatland Black (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-flatland-black-theme") (:keywords ""))])(flash-region . [(20130924 217)  nil  "Flash a region" single ((url: ."https://github.com/Fuco1/flash-region") (:keywords  " utility"))])(flappymacs . [(20140716 5)  nil  "flappybird clone for emacs" single ((url: ."https://github.com/taksatou/flappymacs") (:keywords  " games"))])(fixmee . [(20150223 2155) ((nav-flash (1 0 0)) (tabulated-list (0)) (smartrep (0 0 3)) (button-lock (1 0 2)) (back-button (0 6 0)) (string-utils (0 3 2)) ) "Quickly navigate to FIXME notices in code" single ((url: ."https://github.com/rolandwalker/fixmee") (:keywords  " navigation" " convenience"))])(fix-word . [(20150716 2102) ((emacs (24 1)) (cl-lib (0 5)) ) "Convenient word transformation * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/fix-word") (:keywords  " word" " convenience"))])(fix-input . [(20160123 1556) ((emacs (24 4)) ) "Make input methods play niy with alternative keyboard layout on OS le * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/fix-input") (:keywords  " input method"))])(fish-mode . [(20160430 1157) ((emacs (24)) ) "Major mode for fish sl scripts  * lexicalbinding: t *" single ((url: ."https://github.com/wwwjfy/emacs-fish") (:keywords  " Fish" " shell"))])(firestarter . [(20160319 442)  nil  "Execute (sl) commands on save" single ((url: ."https://github.com/wasamasa/firestarter") (:keywords  " convenience"))])(fireplace . [(20160102 710)  nil  "A cozy  for emacs      * lexicalbinding: t *" single ((url: ."https://github.com/johanvts/emacs-fireplace") (:keywords  " games"))])(firefox-controller . [(20160321 247) ((popwin (1 0 0)) (cl-lib (0 5)) (moz (0)) ) "An improved Firefox controller" single ((url: ."https://github.com/cute-jumper/emacs-firefox-controller") (:keywords  " extensions"))])(firecode-theme . [(20141116 2354) ((emacs (24 0)) ) "an Emacs 24 theme based on FireCode (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-firecode-theme") (:keywords ""))])(firebelly-theme . [(20140410 1655) ((cl-lib (0 5)) ) "a subdued, dark theme with pasish colors." single ((url: ."https://github.com/startling/firebelly") (:keywords ""))])(fiplr . [(20140724 1445)  nil  "Fuzzy finder for files in a project." tar ((url: ."https://github.com/grizzl/fiplr") (:keywords  " convenience" " usability" " project"))])(fingers . [(20150810 822)  nil  "Modal editing with universal text manipulation pers." tar ((url: ."https://github.com/fgeller/fingers.el") (:keywords  " fingers modal editing workman"))])(find-things-fast . [(20150820 345)  nil  "Find things fast, leveraging the power of git" single ((url: ."https://github.com/eglaysher/find-things-fast") (:keywords  " project" " convenience"))])(find-temp-file . [(20160108 1813)  nil  "Open quickly a temporary file" single ((url: ."https://github.com/thisirs/find-temp-file") (:keywords  " convenience"))])(find-file-in-repository . [(20151113 2121)  nil  "Quickly find files in a git, mercurial or other repository" single ((url: ."https://github.com/hoffstaetter/find-file-in-repository") (:keywords  " files" " convenience" " repository" " project" " source control"))])(find-file-in-project . [(20160518 1701) ((emacs (24 3)) (swiper (0 7 0)) ) "Find files in a project quickly, on any OS" single ((url: ."https://github.com/technomancy/find-file-in-project") (:keywords  " project" " convenience"))])(find-by-pinyin-dired . [(20150202 1816)  nil  "Find file by first PinYin character of Chinese Hanzi" tar ((url: ."https://github.com/redguardtoo/find-by-pinyin-dired") (:keywords  " Hanzi Chinese dired find character"))])(finalize . [(20140128 623)  nil  "lisp object finalization * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/elisp-finalize") (:keywords ""))])(fillcode . [(20151105 1255)  nil  "Fill (wrap) function calls and expressions in source code" tar ((url: ."https://github.com/snarfed/fillcode") (:keywords ""))])(fill-column-indicator . [(20151031 333)  nil  "Graphically indicate the fill column" single ((url: ."https://github.com/alpaker/Fill-Column-Indicator") (:keywords  " convenience"))])(fifo-class . [(20160425 1358)  nil  "First in first out abstract class  * lexicalbinding: t *" single ((url: ."https://github.com/mola-T/fifo-class") (:keywords  " lisp"))])(fic-mode . [(20160210 211)  nil  "Show FIXME/TODO/BUG(...) in special face only in comments and strings" single ((url: ."https://github.com/lewang/fic-mode") (:keywords ""))])(fetch . [(20131201 1530)  nil  "Fetch and unpack resources" single ((url: ."https://github.com/crshd/fetch.el") (:keywords ""))])(feature-mode . [(20160124 1514)  nil  "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar ((url: ."https://github.com/michaelklishin/cucumber.el") (:keywords ""))])(fcopy . [(20150304 2203)  nil  "Funny Copy, set past point HERE then search copy text" single ((url: ."https://github.com/ataka/fcopy") (:keywords  " convenience"))])(fcitx . [(20160519 54)  nil  "Make  better in Emacs" single ((url: ."https://github.com/cute-jumper/fcitx.el") (:keywords  " extensions"))])(faust-mode . [(20160120 120)  nil  "Basic faust syntax colorizer for emacs." single ((url: ."https://github.com/magnetophon/emacs-faust-mode") (:keywords  " languages"))])(fastnav . [(20120211 2257)  nil  "Fast navigation and editing routines." single ((url: ."https://github.com/gleber/fastnav.el") (:keywords  " nav fast fastnav navigation"))])(fasd . [(20151208 1516) ((grizzl (0)) ) "Emacs integration for the commandline productivity booster `'" single ((url: ."https://github.com/steckerhalter/emacs-fasd") (:keywords  " cli bash zsh autojump"))])(fancy-narrow . [(20160124 2003)  nil  "narrowtoregion with more eye candy." single ((url: ."https://github.com/Malabarba/fancy-narrow") (:keywords  " faces convenience"))])(fancy-battery . [(20150101 2004) ((emacs (24 1)) ) "Fancy battery display       * lexicalbinding: t *" single ((url: ."https://github.com/lunaryorn/fancy-battery.el") (:keywords  " convenience tools hardware"))])(fakir . [(20140730 52) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19)) ) "fakeing bits of Emacs * lexicalbinding: t *" single ((url: ."https://github.com/nicferrier/emacs-fakir") (:keywords  " lisp" " tools"))])(fakespace . [(20120818 806)  nil  "fake namespaces with defpackage" single ((url: ."https://github.com/skeeto/elisp-fakespace") (:keywords ""))])(faff-theme . [(20160424 2352)  nil  "Light Emacs color theme on ivory3 background" single ((url: ."https://github.com/WJCFerguson/emacs-faff-theme") (:keywords  " color theme"))])(faceup . [(20150216 548)  nil  "Regression test system for fontlock" single ((url: ."https://github.com/Lindydancer/faceup") (:keywords  " faces languages"))])(fabric . [(20141024 1822)  nil  " " tar ((url: ."https://github.com/nlamirault/fabric.el") (:keywords  " python" " fabric"))])(f . [(20160426 2027) ((dash (2 2 0)) (s (1 7 0)) ) "Modern API or working with iles and directories * lexicalbinding: t *" single ((url: ."https://github.com/rejeep/f.el") (:keywords  " files" " directories"))])(ez-query-replace . [(20140810 2017) ((dash (1 2 0)) ) "a smarter contextsensitive queryreplace that can be reapplied" single ((url: ."https://github.com/Wilfred/ez-query-replace.el") (:keywords ""))])(eyuml . [(20141029 627) ((s (1 8 0)) (request (0 2 0)) ) "Write textual uml diagram from emacs using yuml.me" single ((url: ."https://github.com/antham/eyuml") (:keywords  " uml"))])(eyebrowse . [(20160103 649) ((dash (2 7 0)) (emacs (24 3 1)) ) "Easy window config switching" single ((url: ."https://github.com/wasamasa/eyebrowse") (:keywords  " convenience"))])(exwm-x . [(20160307 1655) ((dmenu (0 1)) (exwm (0 1)) (start-menu (0 1)) (switch-window (0 10)) (cl-lib (0 5)) ) "Addition tools for exwm (emacs x window manager)" tar ((url: ."https://github.com/tumashu/exwm-x") (:keywords  " window-manager" " exwm"))])(extend-dnd . [(20151123 250)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/extend-dnd") (:keywords  " EXTEND" " Drag and Drop"))])(extempore-mode . [(20160323 1434) ((emacs (24 4)) ) "Emacs major mode for Extempore source files" single ((url: ."https://github.com/extemporelang/extempore-emacs-mode") (:keywords  " lisp" " extempore"))])(express . [(20140805 322) ((string-utils (0 3 2)) ) "Alternatives to `message'" single ((url: ."https://github.com/rolandwalker/express") (:keywords  " extensions" " message" " interface"))])(expand-region . [(20150902 2058)  nil  "Increase ected region by semantic units." tar ((url: ."https://github.com/magnars/expand-region.el") (:keywords  " marking region"))])(expand-line . [(20151006 1007)  nil  "Expand ection by line" single ((url: ."https://github.com/cheunghy/expand-line") (:keywords ""))])(exec-path-from-shell . [(20160204 403)  nil  "Get environment variables such as $PATH from the sl" single ((url: ."https://github.com/purcell/exec-path-from-shell") (:keywords  " environment"))])(eww-lnum . [(20150102 2312)  nil  "Conkerorlike functionality for eww  * lexicalbinding: t *" single ((url: ."https://github.com/m00natic/eww-lnum") (:keywords  " eww" " browse" " conkeror"))])(ewmctrl . [(20150630 1638)  nil  "Use `wmctrl' to manage desktop windows." single ((url: ."https://github.com/flexibeast/ewmctrl") (:keywords  " desktop" " windows"))])(evm . [(20141007 1956) ((f (0 13 0)) (dash (2 3 0)) ) "Emacs Version Manager" single ((url: ."https://github.com/rejeep/evm.el") (:keywords ""))])(evil-visualstar . [(20160223 848) ((evil (0)) ) "Starts a * or # search from the visual ection" single ((url: ."https://github.com/bling/evil-visualstar") (:keywords  " evil vim visualstar"))])(evil-visual-mark-mode . [(20150203 200) ((dash (2 10)) (evil (1 0 9)) ) "Display evil marks on buffer" single ((url: ."https://github.com/roman/evil-visual-mark-mode") (:keywords  " evil"))])(evil-vimish-fold . [(20160506 1255) ((vimish-fold (0 2 0)) (emacs (24 4)) (evil (1 0 0)) ) "Integrate vimishfold with evil" single ((url: ."https://github.com/alexmurray/evil-vimish-fold") (:keywords ""))])(evil-tutor . [(20150120 1231) ((evil (1 0 9)) ) "Vimtutor adapted to Evil and wrapped in a majormode" single ((url: ."https://github.com/syl20bnr/evil-tutor") (:keywords  " convenience editing evil"))])(evil-textobj-column . [(20160102 1018) ((emacs (24)) (names (0 5)) (evil (0)) ) "Provides column text objects." single ((url: ."https://github.com/noctuid/evil-textobj-column") (:keywords  " evil" " column" " text-object"))])(evil-textobj-anyblock . [(20151018 517) ((cl-lib (0 5)) (evil (1 1 0)) ) "Textobject for the closest userdefined blocks." single ((url: ."https://github.com/noctuid/evil-textobj-anyblock") (:keywords  " evil"))])(evil-terminal-cursor-changer . [(20150828 1051) ((evil (1 0 8)) ) "Filename:" single ((url: ."https://github.com/7696122/evil-terminal-cursor-changer") (:keywords  " evil" " terminal" " cursor"))])(evil-tabs . [(20160217 2320) ((elscreen (0 0 0)) (evil (0 0 0)) ) "Integrating Vimstyle tabs for Evil mode users." single ((url: ."https://github.com/krisajenkins/evil-tabs") (:keywords  " evil tab tabs vim"))])(evil-surround . [(20160502 804) ((evil (1 2 12)) ) "emulate surround.vim from Vim" single ((url: ."https://github.com/timcharper/evil-surround") (:keywords  " emulation" " vi" " evil"))])(evil-space . [(20151208 2028) ((evil (1 0 0)) ) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((url: ."https://github.com/linktohack/evil-space") (:keywords  " space repeat motion"))])(evil-snipe . [(20160519 454) ((cl-lib (0 5)) (evil (1 0 8)) ) "emulate vimsneak & vimseek" single ((url: ."https://github.com/hlissner/evil-snipe") (:keywords  " emulation" " vim" " evil" " sneak" " seek"))])(evil-smartparens . [(20160502 1655) ((emacs (24 4)) (evil (1 0)) (smartparens (1 6 3)) ) "Evil support for smartparens" single ((url: ."https://github.com/expez/evil-smartparens") (:keywords  " evil smartparens"))])(evil-search-highlight-persist . [(20151215 1838) ((highlight (0)) ) "Persistent highlights after search" single ((url: ."https://github.com/juanjux/evil-search-highlight-persist") (:keywords ""))])(evil-rsi . [(20160222 504) ((evil (1 0 0)) ) "Use emacs motion keys in evil, inspired by vimrsi" single ((url: ."https://github.com/linktohack/evil-rsi") (:keywords  " evil rsi evil-rsi"))])(evil-rails . [(20150803 1946) ((projectile-rails (1 0)) (evil (1 0)) ) "Rails support for Evil Mode" single ((url: ."https://github.com/antono/evil-rails") (:keywords  " ruby" " rails" " vim" " project" " convenience" " web" " evil" " projectile"))])(evil-quickscope . [(20160203 324) ((evil (0)) ) "Highlight unique characters in words for f,F,t,T navigation" tar ((url: ."https://github.com/blorbx/evil-quickscope") (:keywords  " faces" " emulation" " vim" " evil"))])(evil-paredit . [(20150414 448) ((evil (1 0 9)) ) "Paredit support for evil keybindings" single ((url: ."https://github.com/roman/evil-paredit") (:keywords  " paredit" " evil"))])(evil-org . [(20151203 1547) ((evil-leader (0)) (org (0)) (evil (0)) ) "evil keybindings for orgmode" single ((url: ."https://github.com/edwtjo/evil-org-mode") (:keywords  " evil vim-emulation org-mode key-bindings presets"))])(evil-numbers . [(20141017 1902)  nil  "increment/decrement numbers like in vim" single ((url: ."https://github.com/cofi/evil-numbers") (:keywords  " numbers increment decrement octal hex binary"))])(evil-nerd-commenter . [(20160209 1649)  nil  "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar ((url: ."https://github.com/redguardtoo/evil-nerd-commenter") (:keywords  " commenter vim line evil"))])(evil-multiedit . [(20160412 1510) ((emacs (24 4)) (cl-lib (0 5)) (iedit (0 97)) (evil (1 0 8)) ) "multiple cursors for evilmode" single ((url: ."https://github.com/hlissner/evil-multiedit") (:keywords  " multiple cursors" " editing" " iedit"))])(evil-mu4e . [(20160214 1922) ((dash (2 12 0)) (emacs (24 4)) (evil (1 2 10)) ) "evilbased key bindings for mu4e" single ((url: ."https://github.com/JorisE/evil-mu4e") (:keywords ""))])(evil-mc . [(20160507 1307) ((emacs (24 3)) (cl-lib (0 5)) (evil (1 2 11)) ) "Multiple cursors for evilmode" tar ((url: ."https://github.com/gabesoft/evil-mc") (:keywords  " evil editing multiple-cursors vim evil-multiple-cursors evil-mc evil-mc"))])(evil-matchit . [(20160413 2125) ((evil (1 0 7)) ) "Vim matchit ported to Evil" tar ((url: ."https://github.com/redguardtoo/evil-matchit") (:keywords  " matchit vim evil"))])(evil-mark-replace . [(20150424 1518) ((evil (1 0 8)) ) "replace the thing in marked area" single ((url: ."https://github.com/redguardtoo/evil-mark-replace") (:keywords  " mark replace evil"))])(evil-magit . [(20160420 1915) ((magit (2 6 0)) (evil (1 2 3)) ) "evilbased key bindings for magit" tar ((url: ."https://github.com/justbur/evil-magit") (:keywords ""))])(evil-lispy . [(20160518 235) ((evil (1 2 12)) (lispy (0 26 0)) ) "precision Lisp editing with Evil and Lispy" tar ((url: ."https://github.com/sp3ctum/evil-lispy") (:keywords  " lisp"))])(evil-lisp-state . [(20160404 1048) ((bind-map (0)) (evil (1 0 9)) (smartparens (1 6 1)) ) "An evil state to edit Lisp code" single ((url: ."https://github.com/syl20bnr/evil-lisp-state") (:keywords  " convenience editing evil smartparens lisp mnemonic"))])(evil-leader . [(20140606 2043) ((evil (0)) ) "let there be <leader>" single ((url: ."https://github.com/cofi/evil-leader") (:keywords  " evil vim-emulation leader"))])(evil-indent-textobject . [(20130901 619) ((evil (0)) ) "evil textobjects based on indentation" single ((url: ."https://github.com/cofi/evil-indent-textobject") (:keywords  " convenience evil"))])(evil-indent-plus . [(20151110 1856) ((cl-lib (0 5)) (evil (0)) ) "Evil textobjects based on indentation" single ((url: ."https://github.com/TheBB/evil-indent-plus") (:keywords  " convenience evil"))])(evil-iedit-state . [(20160314 256) ((iedit (0 97)) (evil (1 0 9)) ) "Evil states to interface iedit mode." single ((url: ."https://github.com/syl20bnr/evil-iedit-state") (:keywords  " convenience editing evil iedit mnemonic"))])(evil-god-state . [(20141117 1055) ((god-mode (2 12 0)) (evil (1 0 8)) ) "use godmode keybindings in evilmode" single ((url: ."https://github.com/gridaphobe/evil-god-state") (:keywords  " evil leader god-mode"))])(evil-find-char-pinyin . [(20160515 441) ((pinyinlib (0 1 0)) (evil (1 2 12)) ) "Evil's f/F/t/T/evilsnipe commands with Pinyin support  * lexicalbinding: t *" single ((url: ."https://github.com/cute-jumper/evil-find-char-pinyin") (:keywords  " extensions"))])(evil-extra-operator . [(20160407 1429) ((evil (1 0 7)) ) "Evil operator for evaluating codes, taking notes, searching via google, etc." single ((url: ."https://github.com/Dewdrops/evil-extra-operator") (:keywords  " evil" " plugin"))])(evil-exchange . [(20160408 1218) ((cl-lib (0 3)) (evil (1 2 8)) ) "Exchange text more easily within Evil" single ((url: ."https://github.com/Dewdrops/evil-exchange") (:keywords  " evil" " plugin"))])(evil-escape . [(20160314 305) ((emacs (24)) (cl-lib (0 5)) (evil (1 0 9)) ) "Escape from anything with a customizable key sequence" single ((url: ."https://github.com/syl20bnr/evil-escape") (:keywords  " convenience editing evil"))])(evil-embrace . [(20160512 1141) ((emacs (24 4)) (evil-surround (0)) (embrace (0 1 0)) ) "Evil integration of embrace  * lexicalbinding: t *" single ((url: ."https://github.com/cute-jumper/evil-embrace.el") (:keywords  " extensions"))])(evil-ediff . [(20160203 441) ((evil (1 2 3)) ) "Make ediff a little evil" single ((url: ."https://github.com/justbur/evil-ediff") (:keywords ""))])(evil-easymotion . [(20160511 109) ((emacs (24)) (avy (0 3 0)) (cl-lib (0 5)) ) "A port of vim's easymotion to emacs" single ((url: ."https://github.com/PythonNut/evil-easymotion") (:keywords  " convenience" " evil"))])(evil-dvorak . [(20160419 2037) ((evil (1 0 8)) ) "allows you to use evil with appropriate dvorak bindings" tar ((url: ."https://github.com/jbranso/evil-dvorak") (:keywords  "  dvorak evil vim"))])(evil-commentary . [(20160222 430) ((evil (1 0 0)) ) "Comment stuff out. A port of vimcommentary." tar ((url: ."https://github.com/linktohack/evil-commentary") (:keywords  " evil comment commentary evil-commentary"))])(evil-cleverparens . [(20160513 1204) ((dash (2 12 0)) (emacs (24 4)) (paredit (1)) (evil (1 0)) (smartparens (1 6 1)) ) "Evil friendly minormode for editing lisp." tar ((url: ."https://github.com/luxbock/evil-cleverparens") (:keywords  " cleverparens" " parentheses" " evil" " paredit" " smartparens"))])(evil-avy . [(20150908 1548) ((emacs (24 1)) (avy (0 3 0)) (cl-lib (0 5)) (evil (1 2 3)) ) "setbased completion * lexicalbinding: t *" single ((url: ."https://github.com/louy2/evil-avy") (:keywords  " point" " location" " evil" " vim"))])(evil-args . [(20140502 511) ((evil (1 0 8)) ) "Motions and text objects for imited arguments in Evil." single ((url: ."https://github.com/wcsmith/evil-args") (:keywords  " evil" " vim-emulation"))])(evil-anzu . [(20150311 2256) ((anzu (0 46)) (evil (1 0 0)) ) "anzu for evilmode" single ((url: ."https://github.com/syohex/emacs-evil-anzu") (:keywords ""))])(evalator-clojure . [(20160209 548) ((cider (0 10 0)) (evalator (1 0 0)) ) "Clojure evaluation context for evalator via CIDER." single ((url: ."https://github.com/seanirby/evalator-clojure") (:keywords  " languages" " clojure" " cider" " helm"))])(evalator . [(20160213 928) ((helm-core (1 9 1)) ) "Package for interactive transformation of data with m" tar ((url: ."https://github.com/seanirby/evalator") (:keywords  " languages" " elisp" " helm"))])(eval-sexp-fu . [(20131231 551) ((highlight (0)) ) "Tiny functionality enhancements for evaluating sexps." single ((url: ."https://github.com/hchbaw/eval-sexp-fu.el") (:keywords  " lisp" " highlight" " convenience"))])(euslisp-mode . [(20160422 1555)  nil  "Major mode for Euslispformatted text * lexicalbinding: t *" single ((url: ."https://github.com/iory/euslisp-mode") (:keywords  " Euslisp" " euslisp" " GitHub"))])(etable . [(20150328 116)  nil  "Implementation of javax.swing.JTable for Emacs." tar ((url: ."https://github.com/Fuco1/ETable") (:keywords  " convenience"))])(esxml . [(20151014 228) ((kv (0 0 5)) ) "Library for working with xml via  and sxml" single ((url: ."https://github.com/tali713/esxml") (:keywords  " tools" " lisp" " comm"))])(esup . [(20151228 1404) ((emacs (24)) (cl-lib (0 5)) ) "the Emacs StartUp Profiler (ESUP) * lexicalbinding: t *" tar ((url: ."https://github.com/jschaf/esup") (:keywords  " convenience" " processes"))])(ess-view . [(20160310 515) ((f (0 16 0)) (s (1 8 0)) (ess (15)) ) "View R dataframes in a spreadsheet software" tar ((url: ."https://github.com/GioBo/ess-view") (:keywords  " extensions" " ess"))])(ess-smart-underscore . [(20131230 1051) ((ess (0)) ) "Filename:" tar ((url: ."https://github.com/mattfidler/ess-smart-underscore.el") (:keywords  " ESS" " underscore"))])(ess-smart-equals . [(20150202 1401) ((emacs (24)) (ess (5 0)) ) "better smartassignment with =key in R and S  * lexicalbinding: t *" single ((url: ."https://github.com/genovese/ess-smart-equals") (:keywords  " R" " S" " ESS" " convenience"))])(ess-R-object-popup . [(20130302 1936) ((popup (20130117 1954)) (ess (20130225 1754)) ) "popup description of R object" single ((url: ."https://github.com/myuhe/ess-R-object-popup.el") (:keywords  " convenience" " ess"))])(ess-R-data-view . [(20130509 1958) ((popup (20130324 1305)) (ess (20130225 1754)) (ctable (20130313 1743)) ) "Data viewer for GNU R" single ((url: ."https://github.com/myuhe/ess-R-data-view.el") (:keywords  " convenience"))])(esqlite-helm . [(20160120 1600) ((helm (20131207 845)) (esqlite (0 2 0)) ) "Define m source for sqlite database" single ((url: ."https://github.com/mhayashi1120/Emacs-esqlite") (:keywords  " data"))])(esqlite . [(20160120 1600) ((pcsv (1 3 3)) ) "Manipulate sqlite file from Emacs" single ((url: ."https://github.com/mhayashi1120/Emacs-esqlite") (:keywords  " data"))])(espuds . [(20151114 2359) ((f (0 12 1)) (dash (2 2 0)) (s (1 7 0)) ) "Ecukes step definitions" single ((url: ."https://github.com/ecukes/espuds") (:keywords  " test"))])(espresso-theme . [(20130301 1548)  nil  "Espresso Tutti Colori port for Emacs" single ((url: ."https://github.com/dgutov/espresso-theme") (:keywords ""))])(eshell-z . [(20151112 2153) ((cl-lib (0 5)) ) "cd to frequent directory in esl" tar ((url: ."https://github.com/xuchunyang/eshell-z") (:keywords  " convenience"))])(eshell-prompt-extras . [(20160418 2330)  nil  "Display extra information for your esl prompt." single ((url: ."https://github.com/hiddenlotus/eshell-prompt-extras") (:keywords  " eshell" " prompt"))])(eshell-git-prompt . [(20160509 1638) ((dash (2 11 0)) (s (1 9 0)) (emacs (24 1)) (cl-lib (0 5)) ) "Some Esl prompt for Git users  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/eshell-git-prompt") (:keywords  " eshell git"))])(eshell-did-you-mean . [(20150916 352) ((emacs (24 1)) (cl-lib (0 5)) ) "command not found ("did you mean…" feature) in Esl  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/eshell-did-you-mean") (:keywords  " eshell"))])(eshell-autojump . [(20150927 1524)  nil  "autojump command for Esl" single ((url: ."https://github.com/coldnew/eshell-autojump") (:keywords ""))])(esh-help . [(20140416 1613) ((dash (1 4 0)) ) "Add some p functions and support for Esl" single ((url: ."https://github.com/tom-tan/esh-help") (:keywords  " eshell" " extensions"))])(esh-buf-stack . [(20140416 1619)  nil  "Add a buffer stack feature to Esl" single ((url: ."https://github.com/tom-tan/esh-buf-stack") (:keywords  " eshell" " extensions"))])(escreen . [(20091204 213)  nil  "emacs window session manager" single ((url: ."https://github.com/emacsmirror/escreen") (:keywords  " extensions"))])(esa . [(20160501 1440) ((cl-lib (0 5)) ) "Interface to .io" single ((url: ."https://github.com/nabinno/esa.el") (:keywords  " tools esa"))])(es-windows . [(20140211 1706) ((emacs (24)) (cl-lib (0 3)) ) "Windowmanagement utilities * lexicalbinding: t *" tar ((url: ."https://github.com/sabof/es-windows") (:keywords ""))])(es-mode . [(20160517 350) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0)) ) "A major mode for editing Elasticsearch queries" tar ((url: ."https://github.com/dakrone/es-mode") (:keywords  " elasticsearch"))])(es-lib . [(20141112 230) ((cl-lib (0 3)) ) "A collection of emacs utilities" tar ((url: ."https://github.com/sabof/es-lib") (:keywords ""))])(ert-runner . [(20160330 1406) ((f (0 10 0)) (commander (0 2 0)) (dash (1 8 0)) (shut-up (0 1 0)) (s (1 6 1)) (ansi (0 1 0)) ) "Opinionated Ert testing workflow" tar ((url: ."https://github.com/rejeep/ert-runner.el") (:keywords  " test"))])(ert-modeline . [(20151212 1427) ((dash (1 2 0)) (s (1 3 1)) (emacs (24 1)) (projectile (0 9 1)) ) "displays ert test results in the moine." single ((url: ."https://github.com/chrisbarrett/ert-modeline") (:keywords  " tools tests convenience"))])(ert-async . [(20151011 2159)  nil  "Async support for ERT * lexicalbinding: t *" single ((url: ."https://github.com/rejeep/ert-async.el") (:keywords  " test"))])(ergoemacs-status . [(20160318 1338) ((powerline (2 3)) (mode-icons (0 1 0)) ) "Filename:" single ((url: ."https://github.com/ergoemacs/ergoemacs-status") (:keywords ""))])(ergoemacs-mode . [(20160509 2116) ((emacs (24 1)) (cl-lib (0 5)) (undo-tree (0 6 5)) ) "Emacs mode based on common modern interface and ergonomics. * lexicalbinding: t *" tar ((url: ."https://github.com/ergoemacs/ergoemacs-mode") (:keywords  " convenience"))])(erefactor . [(20160121 1759) ((cl-lib (0 3)) ) "EmacsLisp refactoring utilities" single ((url: ."https://github.com/mhayashi1120/Emacs-erefactor") (:keywords  " extensions" " tools" " maint"))])(eredis . [(20120809 1107)  nil  ", a Redis client in emacs lisp" single ((url: ."https://github.com/justinhj/eredis") (:keywords ""))])(ercn . [(20151117 340)  nil  "Flexible ERC notifications" single ((url: ."https://github.com/leathekd/ercn") (:keywords ""))])(erc-yt . [(20150426 2049) ((dash (2 10 0)) ) "An erc module to display youtube links niy" single ((url: ."https://github.com/yhvh/erc-yt") (:keywords  " multimedia"))])(erc-youtube . [(20150604 536)  nil  "Show info about a YouTube URL in an ERC buffer." single ((url: ."https://github.com/kidd/erc-youtube.el") (:keywords  " multimedia"))])(erc-view-log . [(20140228 439)  nil  "Major mode for viewing ERC logs" single ((url: ."https://github.com/Niluge-KiWi/erc-view-log") (:keywords  " ERC viewer logs colors"))])(erc-twitch . [(20160422 1230) ((json (1 3)) (erc (5 0)) ) "Support for Twitch emotes for ERC." single ((url: ."https://github.com/vibhavp/erc-twitch") (:keywords  " twitch erc emotes"))])(erc-tweet . [(20150920 2058)  nil  "shows text of a tweet when an url is posted in erc buffers" single ((url: ."https://github.com/kidd/erc-tweet.el") (:keywords  " extensions"))])(erc-track-score . [(20130328 2015)  nil  "Add score support to tracked chan buffers" single ((url: ."https://github.com/jd/erc-track-score.el") (:keywords ""))])(erc-terminal-notifier . [(20140115 1824)  nil  "OSX notifications via the terminalnotifier gem for Emacs ERC." single ((url: ."https://github.com/julienXX/erc-terminal-notifier.el") (:keywords  " erc terminal-notifier nick"))])(erc-social-graph . [(20150508 2004)  nil  "A social network graph module for ERC." single ((url: ."https://github.com/vibhavp/erc-social-graph") (:keywords  " erc graph"))])(erc-image . [(20150914 1814)  nil  "Show received image urls in the ERC buffer" single ((url: ."https://github.com/kidd/erc-image.el") (:keywords  " multimedia"))])(erc-hl-nicks . [(20160203 350)  nil  "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((url: ."https://github.com/leathekd/erc-hl-nicks") (:keywords ""))])(erc-crypt . [(20160324 939)  nil  "Symmetric Encryption for ERC" single ((url: ."https://github.com/atomontage/erc-crypt") (:keywords  " application"))])(erc-colorize . [(20160108 1820)  nil  "Per user colorization of whole message" single ((url: ."https://github.com/thisirs/erc-colorize") (:keywords  " erc convenience"))])(eproject . [(20151206 1330) ((helm (1 6 4)) ) "assign files to projects, programatically" tar ((url: ."https://github.com/jrockway/eproject") (:keywords  " programming" " projects"))])(eprime-mode . [(20140627 2018)  nil  "An Eprime checking mode for Emacs" single ((url: ."https://github.com/AndrewHynes/eprime-mode") (:keywords  " E-prime" " English" " grammar"))])(epresent . [(20160417 123) ((cl-lib (0 5)) (org (8)) ) "Simple presentation mode for Emacs Orgmode" single ((url: ."https://github.com/dakrone/epresent") (:keywords  " gui"))])(epl . [(20150517 1933) ((cl-lib (0 3)) ) "Emacs Package Library * lexicalbinding: t *" single ((url: ."https://github.com/cask/epl") (:keywords  " convenience"))])(epic . [(20150503 1538) ((htmlize (1 47)) ) "Evernote Picker for Cocoa Emacs" single ((url: ."https://github.com/yoshinari-nomura/epic") (:keywords  " evernote" " applescript"))])(epc . [(20160110 1101) ((concurrent (0 3 1)) (ctable (0 1 2)) ) "A RPC stack for the Emacs Lisp" tar ((url: ."https://github.com/kiwanami/emacs-epc") (:keywords  " lisp" " rpc"))])(eopengrok . [(20160214 1551) ((magit (2 1 0)) (dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5)) ) "opengrok interface for emacs" single ((url: ."https://github.com/youngker/eopengrok.el") (:keywords  " tools"))])(envdir . [(20160222 323) ((f (0 17 2)) (dash (2 10 0)) (emacs (24)) ) "Modify environment according to files in a specified directory" single ((url: ."https://github.com/proofit404/envdir-mode") (:keywords ""))])(ensime . [(20160519 221) ((sbt-mode (0 2)) (scala-mode (0 22)) (dash (2 11 0)) (s (1 10 0)) (popup (0 5 3)) (yasnippet (0 9 1)) (company (0 8 12)) ) "ENhanced Scala Interaction Mode for Emacs" tar ((url: ."https://github.com/ensime/ensime-emacs") (:keywords  " languages"))])(enotify . [(20130407 2148)  nil  "A networked notification system for Emacs" tar ((url: ."https://github.com/laynor/enotify") (:keywords  " tools"))])(eno . [(20160205 29)  nil  "Author: <e.son@gmail.com>" single ((url: ."https://github.com/enoson/eno.el") (:keywords ""))])(enlive . [(20150829 1545)  nil  "query html document with css ectors" tar ((url: ."https://github.com/zweifisch/enlive") (:keywords  " css selector query"))])(enh-ruby-mode . [(20151123 1741)  nil  "Major mode for editing Ruby files" tar ((url: ."https://github.com/zenspider/enhanced-ruby-mode") (:keywords  " languages elisp" " ruby"))])(engine-mode . [(20160227 329)  nil  "Define and query search engines from within Emacs." single ((url: ."https://github.com/hrs/engine-mode") (:keywords ""))])(encourage-mode . [(20151207 2259) ((emacs (24 4)) ) "Encourages you in your work. :D * lexicalbinding:t *" single ((url: ."https://github.com/halbtuerke/encourage-mode.el") (:keywords  " fun"))])(enclose . [(20151023 1619)  nil  "Enclose cursor within punctuation pairs" tar ((url: ."https://github.com/rejeep/enclose.el") (:keywords  " speed" " convenience"))])(emr . [(20160219 947) ((list-utils (0 3 0)) (dash (1 2 0)) (clang-format (0)) (s (1 3 1)) (emacs (24 1)) (popup (0 5 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (cl-lib (0 2)) (iedit (0 97)) ) "Emacs refactoring system.  * lexicalbinding: t *" tar ((url: ."https://github.com/chrisbarrett/emacs-refactor") (:keywords  " tools convenience refactoring"))])(empos . [(20151012 316)  nil  "Locate bibtex citations from within emacs" single ((url: ."https://github.com/dimalik/empos") (:keywords  " citations" " reference" " bibtex" " reftex"))])(emojify . [(20160317 117) ((emacs (24 3)) (ht (2 0)) (seq (1 11)) ) "Display emojis in Emacs           * lexicalbinding: t *" tar ((url: ."https://github.com/iqbalansari/emacs-emojify") (:keywords  " multimedia" " convenience"))])(emoji-fontset . [(20151108 1247)  nil  "Set font face for Emoji." single ((url: ."https://github.com/zonuexe/emoji-fontset.el") (:keywords  " emoji font config"))])(emoji-display . [(20140117 1813)  nil  "emoji displaying module * coding: utf8unix *" single ((url: ."https://github.com/ikazuhiro/emoji-display") (:keywords  " emoji"))])(emoji-cheat-sheet-plus . [(20150617 2131) ((emacs (24)) (helm (1 6 4)) ) "emojicheatsheet for emacs" single ((url: ."https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords  " emacs emoji"))])(emms-status . [(20160504 1605) ((emms (0)) ) " " single ((url: ."https://github.com/alezost/emms-status.el") (:keywords  " emms"))])(emms-state . [(20160504 1605) ((emms (0)) ) "Display track description and playing time in the mode line" single ((url: ."https://github.com/alezost/emms-state.el") (:keywords  " emms"))])(emms-soundcloud . [(20131221 1945) ((json (1 2)) (emms (20131016)) ) "EMMS source for Soundcloud audio sharing platform" single ((url: ."https://github.com/osener/emms-soundcloud") (:keywords  " emms" " soundcloud"))])(emms-player-simple-mpv . [(20151020 2116) ((emacs (24)) (emms (4 0)) (cl-lib (0 5)) ) "An extension of emmsplayersimple for mpv JSON IPC  * lexicalbinding: t *" tar ((url: ."https://github.com/momomo5717/emms-player-simple-mpv") (:keywords  " emms" " mpv"))])(emms-player-mpv-jp-radios . [(20160501 2133) ((emms-player-simple-mpv (0 1 7)) (emacs (24)) (emms (4 0)) (cl-lib (0 5)) ) "EMMS players and stream lists of Japan radio stations * lexicalbinding: t *" tar ((url: ."https://github.com/momomo5717/emms-player-mpv-jp-radios") (:keywords  " emms" " mpv" " radio"))])(emms-player-mpv . [(20160319 1508) ((emms (0)) ) "mpv support for EMMS" single ((url: ."https://github.com/dochang/emms-player-mpv") (:keywords  " emms" " mpv"))])(emms-mode-line-cycle . [(20160221 1920) ((emacs (24)) (emms (4 0)) ) "Display the emms mode line as a ticker * lexicalbinding: t *" single ((url: ."https://github.com/momomo5717/emms-mode-line-cycle") (:keywords  " emms" " mode-line"))])(emms-mark-ext . [(20130529 1127) ((emms (3 0)) ) "Filename:" single ((url: ."https://github.com/vapniks/emms-mark-ext") (:keywords  " convenience multimedia"))])(emms-info-mediainfo . [(20131223 2100) ((emms (0)) ) "Infomethod for EMMS using medianfo" single ((url: ."https://github.com/fgallina/emms-info-mediainfo") (:keywords  " multimedia" " processes"))])(emmet-mode . [(20160502 259)  nil  "Unofficial Emmet's support for emacs" single ((url: ."https://github.com/smihica/emmet-mode") (:keywords  " convenience"))])(embrace . [(20160514 1311) ((expand-region (0 10 0)) (cl-lib (0 5)) ) "Add/Change/ete pairs based on `expandregion'  * lexicalbinding: t *" single ((url: ."https://github.com/cute-jumper/embrace.el") (:keywords  " extensions"))])(ember-yasnippets . [(20160202 720) ((yasnippet (0 8 0)) ) "Snippets for Ember.js deopment" single ((url: ."https://github.com/ronco/ember-yasnippets.el") (:keywords  " tools" " abbrev" " languages"))])(ember-mode . [(20151103 1821) ((cl-lib (0 5)) ) "Ember navigation mode for emacs" single ((url: ."https://github.com/madnificent/ember-mode") (:keywords  " ember ember.js emberjs"))])(emamux-ruby-test . [(20130813 322) ((emamux (0 1)) (projectile (0 9 1)) ) "Ruby test with emamux" single ((url: ."https://github.com/syohex/emamux-ruby-test") (:keywords ""))])(emamux . [(20160518 2248) ((emacs (24)) (cl-lib (0 5)) ) "Interact with tmux * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-emamux") (:keywords ""))])(emagician-fix-spell-memory . [(20150107 156)  nil  "Simple hack into isl to fix (muscle) memory problems" single ((url: ."https://github.com/jonnay/emagicians-starter-kit") (:keywords  " erc bitlbee bot"))])(emacsshot . [(20160504 1640)  nil  "Snapshot a frame or window from within Emacs" single ((url: ."https://github.com/marcowahl/emacsshot") (:keywords  " convenience"))])(emacsql-sqlite . [(20160424 2247) ((emacsql (2 0 0)) (emacs (24 3)) (cl-lib (0 3)) ) "EmacSQL backend for SQLite * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/emacsql") (:keywords ""))])(emacsql-psql . [(20160424 2247) ((emacsql (2 0 0)) (pg (0 12)) (emacs (24 3)) (cl-lib (0 3)) ) "EmacSQL backend for PostgreSQL via psql and pg * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/emacsql") (:keywords ""))])(emacsql-mysql . [(20160424 2247) ((emacsql (2 0 0)) (emacs (24 3)) (cl-lib (0 3)) ) "EmacSQL backend for MySQL * lexicalbinding: t *" single ((url: ."https://github.com/skeeto/emacsql") (:keywords ""))])(emacsql . [(20160424 2247) ((emacs (24 3)) (finalize (1 0 0)) (cl-lib (0 3)) ) "highle SQL database frontend * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/emacsql") (:keywords ""))])(emacsist-view . [(20160426 2023)  nil  "Mode for viewing emacsist.com" single ((url: ."https://github.com/lujun9972/emacsist-view") (:keywords  " convenience" " usability"))])(emacsagist . [(20140401 411) ((cl-lib (0 5)) ) "Search Packagist.org packages without leaving Emacs" single ((url: ."https://github.com/echosa/emacsagist") (:keywords  " tools"))])(emacs-setup . [(20120727 2226)  nil  "Package for maintaining your emacs configuration. Clean up your .emacs!" tar ((url: ."https://github.com/echosa/emacs-setup") (:keywords ""))])(emacs-eclim . [(20160412 17)  nil  " " tar ((url: ."https://github.com/emacs-eclim/emacs-eclim") (:keywords ""))])(elx . [(20160221 114) ((emacs (24 4)) ) "extract information from Emacs Lisp libraries" single ((url: ."https://github.com/tarsius/elx") (:keywords  " docs" " libraries" " packages"))])(elwm . [(20150817 1807) ((dash (1 1 0)) ) "Minimalistic window manager for emacs" single ((url: ."https://github.com/Fuco1/elwm") (:keywords  " docs"))])(elscreen-separate-buffer-list . [(20150522 1445) ((elscreen (1 4 6)) (emacs (24 4)) ) "Separate buffer list manager forscreen" single ((url: ."https://github.com/wamei/elscreen-separate-buffer-list") (:keywords  " elscreen"))])(elscreen-persist . [(20160506 929) ((elscreen (1 4 6)) (revive (2 19)) ) "persist thescreen across sessions" single ((url: ."https://github.com/robario/elscreen-persist") (:keywords  " elscreen frames"))])(elscreen-multi-term . [(20151022 1033) ((elscreen (1 4 6)) (emacs (24 4)) (multi-term (1 3)) ) "Multi term forscreen" single ((url: ."https://github.com/wamei/elscreen-multi-term") (:keywords  " elscreen" " multi term"))])(elscreen-mew . [(20160505 235) ((elscreen (20120413 807)) ) "ElScreen AddOn for Mew" single ((url: ."https://github.com/masutaka/elscreen-mew") (:keywords ""))])(elscreen-buffer-group . [(20160106 3) ((elscreen (0)) (emacs (24 4)) (cl-lib (0 5)) ) "screen buffer group" single ((url: ."https://github.com/jeffgran/elscreen-buffer-group") (:keywords  " buffer"))])(elscreen . [(20151026 900)  nil  "Emacs window session manager" tar ((url: ."https://github.com/knu/elscreen") (:keywords ""))])(elpy . [(20160430 129) ((yasnippet (0 8 0)) (highlight-indentation (0 5 0)) (company (0 8 2)) (find-file-in-project (3 3)) (pyvenv (1 3)) ) "Emacs Python Deopment Environment * lexicalbinding: t *" tar ((url: ."https://github.com/jorgenschaefer/elpy") (:keywords  " Python" " IDE" " Languages" " Tools"))])(elpa-mirror . [(20160512 1304)  nil  "Create local package repository" tar ((url: ."https://github.com/redguardtoo/elpa-mirror") (:keywords  " cloud mirror elpa"))])(elpa-audit . [(20141023 2131)  nil  "Handy functions for inspecting and comparing package archives" single ((url: ."https://github.com/purcell/elpa-audit") (:keywords  " maint"))])(elogcat . [(20151122 1207) ((dash (2 10 0)) (s (1 9 0)) ) "logcat interface" single ((url: ."https://github.com/youngker/elogcat.el") (:keywords  " tools"))])(elog . [(20160426 2022) ((eieio (1 3)) ) "logging library extended from logito" single ((url: ."https://github.com/lujun9972/elog") (:keywords  " lisp" " tool" " log"))])(elnode . [(20150705 2150)  nil  "a simple emacs async HTTP server * lexicalbinding: t *" tar ((url: ."https://github.com/nicferrier/elnode") (:keywords  " lisp" " http" " hypermedia"))])(elmine . [(20151209 2019) ((s (1 10 0)) ) "Redmine API access viaisp." single ((url: ."https://github.com/leoc/elmine") (:keywords  " tools"))])(elmacro . [(20160225 131) ((dash (1 5 0)) (s (1 9 0)) ) "Convert keyboard macros toisp" single ((url: ."https://github.com/Silex/elmacro") (:keywords  " macro" " elisp" " convenience"))])(elm-yasnippets . [(20160401 1324) ((yasnippet (0 8 0)) ) "Yasnippets for Elm" single ((url: ."https://github.com/abingham/elm-yasnippets") (:keywords  " snippets"))])(elm-mode . [(20160513 1821) ((f (0 17)) (s (1 7 0)) (emacs (24)) (let-alist (1 0 4)) ) "Major mode for Elm" tar ((url: ."https://github.com/jcollard/elm-mode") (:keywords ""))])(elixir-yasnippets . [(20150417 2039) ((yasnippet (0 8 0)) ) "Yasnippets for Elixir" tar ((url: ."https://github.com/hisea/elixir-yasnippets") (:keywords  " snippets"))])(elixir-mode . [(20160512 1427) ((pkg-info (0 4)) (emacs (24)) ) "Major mode for editing Elixir files" tar ((url: ."https://github.com/elixir-lang/emacs-elixir") (:keywords  " languages elixir"))])(elisp-slime-nav . [(20160129 309) ((cl-lib (0 2)) ) "Make M. and M, work inisp like they do in slime" single ((url: ."https://github.com/purcell/elisp-slime-nav") (:keywords  " navigation slime elisp emacs-lisp"))])(elisp-sandbox . [(20160110 7)  nil  "Evaluate EmacsLisp expressions in a sandbox" single ((url: ."https://github.com/joelmccracken/elisp-sandbox") (:keywords  " lisp"))])(elisp-lint . [(20150501 658)  nil  "basic linting for Emacs Lisp" tar ((url: ."https://github.com/nschum/elisp-lint") (:keywords  " lisp"))])(elisp-format . [(20160508 2052)  nil  "Formatisp code" single ((url: ."https://github.com/Yuki-Inoue/elisp-format") (:keywords ""))])(elisp-depend . [(20120429 404)  nil  "Filename:" single ((url: ."https://github.com/tehom/elisp-depend") (:keywords  " elisp-depend"))])(elhome . [(20131203 308) ((initsplit (20120630)) ) "A framework for a "home" Emacs configuration" tar ((url: ."https://github.com/demyanrogozhin/elhome") (:keywords  " lisp"))])(elfeed-org . [(20151003 1831)  nil  "Configurefeed with one or more orgmode files" single ((url: ."https://github.com/remyhonig/elfeed-org") (:keywords ""))])(elfeed-goodies . [(20160317 1924) ((noflet (0 0 10)) (ace-jump-mode (2 0)) (popwin (1 0 0)) (powerline (2 2)) (elfeed (20151201 1742)) (cl-lib (0 5)) ) "Elfeed goodies" tar ((url: ."https://github.com/algernon/elfeed-goodies") (:keywords ""))])(elfeed . [(20160514 822)  nil  "an Emacs Atom/RSS feed reader * lexicalbinding: t *" tar ((url: ."https://github.com/skeeto/elfeed") (:keywords ""))])(elein . [(20120120 1916)  nil  "running leiningen commands from emacs" single ((url: ."https://github.com/remvee/elein") (:keywords  " tools processes"))])(electric-spacing . [(20151209 2336)  nil  "Insert operators with surrounding spaces smartly" single ((url: ."https://github.com/xwl/electric-spacing") (:keywords ""))])(electric-operator . [(20160511 1503) ((dash (2 10 0)) (emacs (24 4)) (names (20150618 0)) ) "Automatically add spaces around operators * lexicalbinding: t *" single ((url: ."https://github.com/davidshepherd7/electric-operator") (:keywords  " electric"))])(electric-case . [(20150514 2308)  nil  "insert caCase, snake_case words without "Shift"ing" single ((url: ."https://github.com/zk-phi/electric-case") (:keywords ""))])(eldoc-eval . [(20150820 1939)  nil  "Enabledoc support when minibuffer is in use. * lexicalbinding: t *" single ((url: ."https://github.com/thierryvolpiatto/eldoc-eval") (:keywords ""))])(elang . [(20160104 2256)  nil  "a Pythonlike language for the Emacs VM       * lexicalbinding: t *" tar ((url: ."https://github.com/vkazanov/elang") (:keywords  " languages"))])(el2markdown . [(20150517 438)  nil  "Convert commentary section ofisp files to markdown. * lexicalbinding:t *" single ((url: ."https://github.com/Lindydancer/el2markdown") (:keywords ""))])(el-spy . [(20131227 408)  nil  "Mocking framework for Emacs lisp. It also support spy, proxy." single ((url: ."https://github.com/uk-ar/el-spy") (:keywords  " test"))])(el-sprunge . [(20140107 939)  nil  "Command line paste server with Emacs highlighting" tar ((url: ."https://github.com/eschulte/el-sprunge") (:keywords  " http html server sprunge paste"))])(el-spice . [(20140806 238) ((thingatpt+ (0)) ) "Extra spice for emacs lisp programming" tar ((url: ."https://github.com/vedang/el-spice") (:keywords  " languages" " extensions"))])(el-spec . [(20121018 1504)  nil  "ruby's rspec like syntax test frame work" single ((url: ."https://github.com/uk-ar/el-spec") (:keywords  " test"))])(el-pocket . [(20150206 627) ((emacs (24)) (web (0 5 2)) ) "Read and write to Pocket (getpocket.com)  * lexicalbinding: t *" single ((url: ."https://github.com/pterygota/el-pocket") (:keywords  " emacs" " pocket" " bookmarks"))])(el-mock . [(20151023 1619)  nil  "Tiny Mock and Stub framework in Emacs Lisp" single ((url: ."https://github.com/rejeep/el-mock.el") (:keywords  " lisp" " testing" " unittest"))])(el-init-viewer . [(20160218 1419) ((el-init (0 1 4)) (dash (2 10 0)) (emacs (24)) (anaphora (1 0 0)) (cl-lib (0 5)) (ctable (0 1 2)) ) "Record viewer forinit  * lexicalbinding: t *" single ((url: ."https://github.com/HKey/el-init-viewer") (:keywords ""))])(el-init . [(20160209 1851) ((emacs (24)) (anaphora (1 0 0)) (cl-lib (0 5)) ) "A loader inspired by initloader * lexicalbinding: t *" single ((url: ."https://github.com/HKey/el-init") (:keywords ""))])(el-get . [(20160517 1456)  nil  "Manage the externalisp bits and pieces you depend upon" tar ((url: ."https://github.com/dimitri/el-get") (:keywords  " emacs package elisp install elpa git git-svn bzr cvs svn darcs hg"))])(el-autoyas . [(20120918 2117)  nil  "Filename:" single ((url: ."https://github.com/mattfidler/el-autoyas.el") (:keywords  " Emacs Lisp Mode Yasnippet"))])(ejc-sql . [(20160514 2227) ((auto-complete (1 5 1)) (dash (2 12 1)) (emacs (24 4)) (clomacs (0 0 2)) ) "Emacs SQL client uses Clojure JDBC." tar ((url: ."https://github.com/kostafey/ejc-sql") (:keywords  " sql" " jdbc"))])(eink-theme . [(20160517 1757)  nil  "E Ink color theme" single ((url: ."https://github.com/maio/eink-emacs") (:keywords ""))])(ein-mumamo . [(20150302 1117) ((ein (0 4)) ) "Multiple major mode support for Emacs IPython Notebook" single ((url: ."https://github.com/millejoh/ein-mumamo") (:keywords ""))])(eimp . [(20120827 439)  nil  "Emacs Image Manipulation Package" single ((url: ."https://github.com/nicferrier/eimp") (:keywords  " files" "frames"))])(ego . [(20160510 10)  nil  "static site generator based on Emacs, Git and Orgmode" tar ((url: ."https://github.com/emacs-china/EGO") (:keywords  " org-mode" " convenience" " beautify"))])(egg . [(20160331 1147)  nil  "Emacs Got Git  Emacs interface to Git" tar ((url: ."https://github.com/byplayer/egg") (:keywords  " git" " version control" " release management"))])(efire . [(20151031 1721) ((circe (1 2)) ) "Use campfire from Emacs * lexicalbinding: t *" single ((url: ."https://github.com/capitaomorte/efire") (:keywords  " convenience" " tools"))])(edn . [(20160215 2019) ((emacs (24 1)) (peg (0 6)) (cl-lib (0 3)) ) "Support for reading and writing the  data format fromisp" single ((url: ."https://github.com/expez/edn.el") (:keywords  " edn clojure"))])(editorconfig . [(20160516 2254) ((cl-lib (0 5)) ) "EditorConfig Emacs Plugin" tar ((url: ."https://github.com/editorconfig/editorconfig-emacs") (:keywords ""))])(edit-server-htmlize . [(20130330 648) ((edit-server (1 9)) ) "(de)HTMLization hooks for editserver" single ((url: ."https://github.com/frobtech/edit-server-htmlize") (:keywords ""))])(edit-list . [(20100930 2243)  nil  "edit a single list" single ((url: ."https://github.com/emacsmirror/edit-list") (:keywords ""))])(edit-indirect . [(20141214 205) ((emacs (24 3)) ) "Edit regions in separate buffers * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/edit-indirect") (:keywords ""))])(edit-color-stamp . [(20130530 133) ((es-lib (0 2)) (cl-lib (1 0)) ) "Edit a hex color stamp, using a QT or the internal color picker  * lexicalbinding: t *" tar ((url: ."https://github.com/sabof/edit-color-stamp") (:keywords ""))])(edit-at-point . [(20150716 2124)  nil  "edit(copy,cut..) current things(word,symbol..) under cursor" single ((url: ."https://github.com/enoson/edit-at-point.el") (:keywords ""))])(edebug-x . [(20130616 1425)  nil  "Extensions for Edebug" single ((url: ."https://github.com/ScottyB/edebug-x") (:keywords  " extensions"))])(ede-compdb . [(20151101 10) ((semantic (2 2)) (ede (1 2)) (cl-lib (0 4)) ) "Support for compilation database projects in EDE" single ((url: ."https://github.com/randomphrase/ede-compdb") (:keywords  " development ninja build cedet ede"))])(edbi-sqlite . [(20160222 323) ((edbi (0 1 3)) (emacs (24)) ) "Open sqlite files with edbi" single ((url: ."https://github.com/proofit404/edbi-sqlite") (:keywords ""))])(edbi-minor-mode . [(20160222 323) ((edbi (0 1 3)) ) "Use edbi with regular SQL files." single ((url: ."https://github.com/proofit404/edbi-minor-mode") (:keywords ""))])(edbi-django . [(20160308 2000) ((f (0 17 1)) (edbi (0 1 3)) (emacs (24)) ) "Run edbi with django settings" tar ((url: ."https://github.com/proofit404/edbi-django") (:keywords ""))])(edbi-database-url . [(20160222 323) ((edbi (0 1 3)) (emacs (24)) ) "Run edbi with database url" single ((url: ."https://github.com/proofit404/edbi-database-url") (:keywords ""))])(edbi . [(20160225 941)  nil  "Database independent interface for Emacs" tar ((url: ."https://github.com/kiwanami/emacs-edbi") (:keywords  " database" " epc"))])(ecukes . [(20151011 2335)  nil  "Cucumber for Emacs" tar ((url: ."https://github.com/ecukes/ecukes") (:keywords ""))])(eclipse-theme . [(20160430 1822)  nil  "Theme based on Eclipse circa 2010" single ((url: ."https://github.com/abo-abo/eclipse-theme") (:keywords  " themes"))])(ecb . [(20140215 1714)  nil  "a code browser for Emacs" tar ((url: ."https://github.com/alexott/ecb") (:keywords  " browser" " code" " programming" " tools"))])(ebib-handy . [(20160510 658) ((ebib (1 0)) (emacs (24 4)) (chinese-pyim (0 1)) ) "ebib window as a cite chooser when write org file" single ((url: ."https://github.com/tumashu/ebib-handy") (:keywords ""))])(ebib . [(20160411 844) ((parsebib (1 0)) (dash (2 5 0)) (emacs (24 3)) ) "a BibTeX database manager  * lexicalbinding: t *" tar ((url: ."https://github.com/joostkremers/ebib") (:keywords  " text bibtex"))])(ebf . [(20160327 29) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5)) ) "brainfuck language transpiler to Emacs Lisp * lexicalbinding: t *" tar ((url: ."https://github.com/rexim/ebf") (:keywords ""))])(ebal . [(20160122 2007) ((f (0 18 0)) (emacs (24 4)) (ido-completing-read+ (3 6)) ) "Emacs interface to Cabal and Stack * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/ebal") (:keywords  " convenience" " cabal" " haskell"))])(easy-repeat . [(20150516 1648) ((emacs (24 4)) ) "Repeat easily                 * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/easy-repeat.el") (:keywords  " repeat" " convenience"))])(easy-lentic . [(20151227 1757) ((lentic (0 10)) (cl-lib (0 5)) ) "Write org style comment with lentic" single ((url: ."https://github.com/tumashu/easy-lentic") (:keywords  " convenience"))])(easy-kill-extras . [(20160419 1019) ((easy-kill (0 9 4)) ) "Extra functions for easykill." tar ((url: ."https://github.com/knu/easy-kill-extras.el") (:keywords  " killing" " convenience"))])(easy-kill . [(20151214 1513) ((emacs (24)) (cl-lib (0 5)) ) "kill & mark things easily       * lexicalbinding: t *" tar ((url: ."https://github.com/leoliu/easy-kill") (:keywords  " killing" " convenience"))])(easy-escape . [(20150719 1033)  nil  "Improve readability of escape characters in regular expressions" single ((url: ."https://github.com/cpitclaudel/easy-escape") (:keywords  " convenience" " lisp" " tools"))])(easy-after-load . [(20121225 1049)  nil  "evalafterload for all files in a directory" single ((url: ."https://github.com/pd/easy-after-load") (:keywords ""))])(e2wm-term . [(20141009 2108) ((log4e (0 2 0)) (yaxception (0 3 2)) (e2wm (1 2)) ) "Perspective of e2wm for work in terminal" single ((url: ."https://github.com/aki2o/e2wm-term") (:keywords  " tools" " window manager"))])(e2wm-sww . [(20140526 609) ((e2wm (1 2)) ) "Plugin of e2wm to switch plugin quickly" single ((url: ."https://github.com/aki2o/e2wm-sww") (:keywords  " tools" " window manager"))])(e2wm-svg-clock . [(20150106 2106) ((svg-clock (0 4)) (e2wm (20130225 1602)) ) "e2wm plugin for svgclock" single ((url: ."https://github.com/myuhe/e2wm-svg-clock.el") (:keywords  " convenience" " e2wm"))])(e2wm-pkgex4pl . [(20140526 611) ((plsense-direx (0 2 0)) (e2wm (1 2)) ) "Plugin of e2wm for package explorer of Perl" single ((url: ."https://github.com/aki2o/e2wm-pkgex4pl") (:keywords  " tools" " window manager" " perl"))])(e2wm-direx . [(20140816 713) ((e2wm (1 2)) ) "Plugin of e2wm for direx" single ((url: ."https://github.com/aki2o/e2wm-direx") (:keywords  " tools" " window manager" " convenience"))])(e2wm-bookmark . [(20151123 1321) ((e2wm (1 2)) ) "Bookmark plugin for e2wm" single ((url: ."https://github.com/myuhe/e2wm-bookmark.el") (:keywords  " convenience"))])(e2wm-R . [(20151230 1726) ((ess (15 3)) (e2wm (1 3)) (inlineR (1 0)) ) "some e2wm plugin and perspective for GNU R" single ((url: ."https://github.com/myuhe/e2wm-R.el") (:keywords  " convenience" " e2wm"))])(e2wm . [(20150609 823) ((window-layout (1 2)) ) "simple window manager for emacs" tar ((url: ."https://github.com/kiwanami/emacs-window-manager") (:keywords  " tools" " window manager"))])(e2ansi . [(20150221 713)  nil  "Syntax highlighting support for `less', powered by Emacs." tar ((url: ."https://github.com/Lindydancer/e2ansi") (:keywords  " faces" " languages"))])(dynamic-ruler . [(20150828 2000)  nil  "Displays a dynamic ruler at point." single ((url: ."https://github.com/rocher/dynamic-ruler") (:keywords  " ruler tools convenience"))])(dynamic-fonts . [(20140805 322) ((pcache (0 2 3)) (persistent-soft (0 8 8)) (font-utils (0 7 0)) ) "Set faces based on available fonts" single ((url: ."https://github.com/rolandwalker/dynamic-fonts") (:keywords  " faces" " frames"))])(dylan-mode . [(20160406 614)  nil  "Major mode for editing Dylan programs." tar ((url: ."https://github.com/dylan-lang/dylan-mode") (:keywords ""))])(duplicate-thing . [(20120516 48)  nil  "Duplicate current line & ection" single ((url: ."https://github.com/ongaeshi/duplicate-thing") (:keywords  " command duplicate line selection"))])(dummyparens . [(20141009 1824)  nil  "parenthesis autopairing and wrapping" single ((url: ."https://github.com/snosov1/dummyparens") (:keywords  " dummyparens auto-pair wrapping"))])(dummy-h-mode . [(20160209 1929)  nil  "switch major mode to c/c++/objcmode on .h file" single ((url: ."https://github.com/yascentur/dummy-h-mode-el") (:keywords  " c-mode c++-mode objc-mode"))])(dumb-jump . [(20160428 1521) ((f (0 17 3)) (dash (2 9 0)) (s (1 11 0)) (popup (0 5 3)) ) "jump to definition for multiple languages without configuration." single ((url: ."https://github.com/jacktasia/dumb-jump") (:keywords  " programming"))])(ducpel . [(20140419 1316) ((cl-lib (0 5)) ) "Logic game with sokobanements" tar ((url: ."https://github.com/alezost/ducpel") (:keywords  " games"))])(dts-mode . [(20150404 704)  nil  "Major mode for Devicetree source code" single ((url: ."https://github.com/bgamari/dts-mode") (:keywords  " languages"))])(dtrt-indent . [(20160504 2045)  nil  "Adapt to foreign indentation offsets" tar ((url: ."https://github.com/jscheid/dtrt-indent") (:keywords  " convenience files languages c"))])(dtrace-script-mode . [(20150216 1014)  nil  "DTrace code editing commands for Emacs" single ((url: ."https://github.com/dotemacs/dtrace-script-mode") (:keywords ""))])(drupal-spell . [(20130521 55)  nil  "Asl extra dictionary for Drupal" tar ((url: ."https://github.com/arnested/drupal-spell") (:keywords  " wp"))])(drupal-mode . [(20160421 358) ((php-mode (1 5 0)) ) "Advanced minor mode for Drupal deopment" tar ((url: ."https://github.com/arnested/drupal-mode") (:keywords  " programming" " php" " drupal"))])(dropbox . [(20130526 1423) ((oauth (1 0 3)) (json (1 2)) ) "Emacs backend for" single ((url: ."https://github.com/pavpanchekha/dropbox.el") (:keywords  " dropbox"))])(drill-instructor-AZIK-force . [(20151123 1314)  nil  "Filename:" tar ((url: ."https://github.com/myuhe/drill-instructor-AZIK-force.el") (:keywords  " convenience"))])(drawille . [(20160419 238) ((cl-lib (0 5)) ) "Drawille implementation inisp" tar ((url: ."https://github.com/sshbio/drawille") (:keywords  " graphics"))])(drag-stuff . [(20160427 1431)  nil  "Drag stuff (lines, words, region, etc...) around" tar ((url: ."https://github.com/rejeep/drag-stuff.el") (:keywords  " speed" " convenience"))])(draft-mode . [(20160106 1659)  nil  "Rough drafting for Emacs." single ((url: ."https://github.com/gaudecker/draft-mode") (:keywords  " draft" " drafting"))])(dpaste_de . [(20131015 2032) ((web (0 3 7)) ) "Emacs mode to paste to dpaste.de" single ((url: ."https://github.com/theju/dpaste_de.el") (:keywords  " pastebin"))])(dpaste . [(20160304 513)  nil  "Emacs integration for .com" single ((url: ."https://github.com/gregnewman/dpaste.el") (:keywords  " paste pastie pastebin dpaste python"))])(downplay-mode . [(20151126 409)  nil  "focus attention on a region of the buffer" single ((url: ."https://github.com/tobias/downplay-mode") (:keywords ""))])(download-region . [(20160501 216) ((cl-lib (0 3)) ) "Simple inbuffer download manager" single ((url: ."https://github.com/zk-phi/download-region") (:keywords ""))])(doom . [(20160121 2322) ((cl-lib (0 5)) ) "DOM implementation and manipulation library" tar ((url: ."https://github.com/emacsorphanage/doom") (:keywords  " xml" " doom"))])(dollaro . [(20151123 2102) ((s (1 6 0)) ) "simple text templates" single ((url: ."https://github.com/laynor/dollaro") (:keywords  " tools" " convenience"))])(dokuwiki-mode . [(20160129 1607)  nil  "Major mode for DokuWiki document" single ((url: ."https://github.com/kai2nenobu/emacs-dokuwiki-mode") (:keywords  " DokuWiki"))])(dockerfile-mode . [(20160129 151)  nil  "Major mode for editing Docker's Dockerfiles" single ((url: ."https://github.com/spotify/dockerfile-mode") (:keywords ""))])(docker-tramp . [(20160114 1153) ((emacs (24)) (cl-lib (0 5)) ) "TRAMP integration for docker containers  * lexicalbinding: t *" single ((url: ."https://github.com/emacs-pe/docker-tramp.el") (:keywords  " docker" " convenience"))])(docker-api . [(20160421 1453) ((dash (2 12 1)) (s (1 11 0)) ) "Emacs interface to the Docker API" tar ((url: ."https://github.com/Silex/docker-api.el") (:keywords ""))])(docker . [(20160517 1419) ((magit-popup (2 6 0)) (dash (2 12 1)) (tablist (0 70)) (s (1 11 0)) (emacs (24 4)) ) "Emacs interface to Docker" tar ((url: ."https://github.com/Silex/docker.el") (:keywords  " filename" " convenience"))])(docean . [(20150928 218) ((emacs (24)) (request (0 2 0)) (cl-lib (0 5)) ) "Interact with DigitalOcean from Emacs. * lexicalbinding: t *" single ((url: ."https://github.com/emacs-pe/docean.el") (:keywords  " convenience"))])(docbook-snippets . [(20150715 25) ((yasnippet (0 8 0)) ) "Yasnippets for DocBook" tar ((url: ."https://github.com/jhradilek/emacs-docbook-snippets") (:keywords  " snippets DocBook"))])(dna-mode . [(20130822 205)  nil  "~harley/share/emacs/pkg/dna/" tar ((url: ."https://github.com/jhgorrell/dna-mode-el") (:keywords  "  dna" " emacs" " editing"))])(dmenu . [(20160228 2227) ((cl-lib (0 5)) ) "simulate the  command line program" single ((url: ."https://github.com/lujun9972/el-dmenu") (:keywords  " convenience" " usability"))])(dkmisc . [(20131110 1915) ((emacs (24 1)) ) "Mislaneous functions required by dk* packages." tar ((url: ."https://github.com/davidkeegan/dkmisc") (:keywords  " utility time date file"))])(dklrt . [(20131111 509) ((ledger-mode (20130908 1357)) (emacs (24 1)) (dkmisc (0 50)) ) "Ledger Recurring Transactions." tar ((url: ."https://github.com/davidkeegan/dklrt") (:keywords  " ledger ledger-cli recurring periodic automatic"))])(dkdo . [(20131110 1919) ((emacs (24 1)) (dkmisc (0 50)) ) "Do List major mode based on orgmode." tar ((url: ."https://github.com/davidkeegan/dkdo") (:keywords  " dolist task productivity"))])(django-theme . [(20131022 1702)  nil  "Custom face theme for Emacs" single ((url: ."https://github.com/andrzejsliwa/django-theme.el") (:keywords ""))])(django-snippets . [(20150207 2117) ((yasnippet (0 8 0)) ) "Yasnippets for django" tar ((url: ."https://github.com/myfreeweb/django-mode") (:keywords ""))])(django-mode . [(20150207 2117)  nil  "Major mode for Django web framework." tar ((url: ."https://github.com/myfreeweb/django-mode") (:keywords  " languages"))])(django-manage . [(20151025 1430) ((hydra (0 13 2)) ) "Django minor mode for commanding manage.py" single ((url: ."https://github.com/gopar/django-manage") (:keywords  " languages"))])(dizzee . [(20120114 2000)  nil  "Utilities for managing subprocesses in Emacs" tar ((url: ."https://github.com/davidmiller/dizzee") (:keywords  " Emacs processes"))])(dix-evil . [(20160506 1523) ((dix (0 3 0)) (evil (1 0 7)) ) "optional evilintegration with dix" single ((url: ."https://github.com/unhammer/dix") (:keywords  " languages"))])(dix . [(20160506 1523) ((cl-lib (0 5)) ) "minor mode for editing Apertium XML dictionary files" tar ((url: ."https://github.com/unhammer/dix") (:keywords  " languages"))])(distinguished-theme . [(20151217 415)  nil  "A dark andegant theme for emacs." single ((url: ."https://github.com/Lokaltog/distinguished-theme") (:keywords ""))])(display-theme . [(20140115 2356) ((emacs (24)) ) "display current theme(s) at modeline * lexicalbinding: t *" single ((url: ."https://github.com/kawabata/emacs-display-theme") (:keywords  " tools"))])(dispass . [(20140202 2331) ((dash (1 0 0)) ) "Emacs wrapper for DisPass" single ((url: ."https://github.com/ryuslash/dispass.el") (:keywords  " processes"))])(discover-my-major . [(20160109 241) ((makey (0 2)) ) "Discover key bindings and their meaning for the current Emacs major mode" single ((url: ."https://github.com/steckerhalter/discover-my-major") (:keywords  " discover help major-mode keys"))])(discover-js2-refactor . [(20140129 2352) ((js2-refactor (20131221 501)) (discover (20140103 1339)) ) "Adds discover context menu for js2refactor" single ((url: ."https://github.com/NicolasPetton/discover-js2-refactor") (:keywords  " js2-refactor discover"))])(discover-clj-refactor . [(20150328 2259) ((discover (0 3)) (clj-refactor (0 14 0)) ) "Adds discover context menu for cljrefactor" single ((url: ."https://github.com/maio/discover-clj-refactor.el") (:keywords  " clj-refactor discover convenience"))])(discover . [(20140613 1649) ((makey (0 3)) ) "more of Emacs" single ((url: ."https://github.com/mickeynp/discover.el") (:keywords ""))])(disaster . [(20130510 155)  nil  "Disassemble C/C++ code under cursor in Emacs" single ((url: ."https://github.com/jart/disaster") (:keywords  " tools"))])(direx-grep . [(20140515 2306)  nil  "Grep node of direx using incremental search like anything/m" single ((url: ."https://github.com/aki2o/direx-grep") (:keywords  " convenience"))])(direx . [(20151024 706)  nil  "Simple Directory Explorer" tar ((url: ."https://github.com/m2ym/direx-el") (:keywords  " convenience"))])(diredful . [(20151120 1114)  nil  "colorful file names in dired buffers" single ((url: ."https://github.com/thamer/diredful") (:keywords  " dired" " colors" " extension" " widget"))])(dired-toggle-sudo . [(20151109 1806)  nil  "Browse directory with sudo privileges." single ((url: ."https://github.com/renard/dired-toggle-sudo") (:keywords  " emacs" " dired"))])(dired-toggle . [(20140908 449)  nil  "provide a simple way to toggle dired buffer for current directory" single ((url: ."https://github.com/fasheng/dired-toggle") (:keywords  " dired" " toggle"))])(dired-subtree . [(20160427 528)  nil  "Insert subdirectories in a treelike fashion" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-single . [(20151231 1414)  nil  "Reuse the current dired buffer to visit a directory" single ((url: ."https://github.com/crocket/dired-single") (:keywords  "   dired" " reuse" " buffer"))])(dired-ranger . [(20160427 528)  nil  "Implementation of useful ranger features for dired" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-rainbow . [(20160427 528)  nil  "Extended file highlighting according to its type" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-open . [(20160427 528)  nil  "Open files from dired using using custom actions" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-narrow . [(20160427 528)  nil  "Livenarrowing of search results for dired" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-k . [(20160331 1014) ((emacs (24)) (cl-lib (0 5)) ) "highlight dired buffer by file size, modified time, git status * lexicalbinding: t *" tar ((url: ."https://github.com/syohex/emacs-dired-k") (:keywords ""))])(dired-imenu . [(20140110 10)  nil  "imenu binding for dired mode" single ((url: ."https://github.com/DamienCassou/dired-imenu") (:keywords  " dired imenu"))])(dired-hacks-utils . [(20160427 528)  nil  "Utilities and pers for diredhacks collection" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-filter . [(20160427 528)  nil  "Ibufferlike filtering for dired" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-filetype-face . [(20160217 1651)  nil  "Set different faces for different filetypes in dired" single ((url: ."https://github.com/jixiuf/dired-filetype-face") (:keywords  " dired filetype face"))])(dired-fdclone . [(20150417 1632)  nil  "dired functions and settings to mimic FDclone" single ((url: ."https://github.com/knu/dired-fdclone.el") (:keywords  " unix" " directories" " dired"))])(dired-efap . [(20140123 56)  nil  "Edit Filename At Point in a dired buffer" single ((url: ."https://github.com/juan-leon/dired-efap") (:keywords  " dired" " environment" " files" " renaming"))])(dired-dups . [(20130528 525)  nil  "Filename:" single ((url: ."https://github.com/vapniks/dired-dups") (:keywords  " unix"))])(dired-avfs . [(20160427 528)  nil  "AVFS support for dired" single ((url: ."https://github.com/Fuco1/dired-hacks") (:keywords  " files"))])(dired-atool . [(20160208 2033) ((emacs (24)) ) "Pack/unpack files with atool on dired. * lexicalbinding: t *" single ((url: ."https://github.com/HKey/dired-atool") (:keywords  " files"))])(dircmp . [(20141205 156)  nil  "Compare and sync directories." tar ((url: ."https://github.com/matthewlmcclure/dircmp-mode") (:keywords  " unix" " tools"))])(dionysos . [(20151013 1603) ((dash (2 9 0)) (s (1 9 0)) (pkg-info (0 5 0)) (alert (1 2)) (libmpdee (2 1 0)) (cl-lib (0 5)) ) "Dionysos, a music player for Emacs" tar ((url: ."https://github.com/nlamirault/dionysos") (:keywords  " music"))])(diminish . [(20160112 1408)  nil  "Diminished modes are minor modes with no moine display" single ((url: ."https://github.com/myrjola/diminish.el") (:keywords  " extensions" " diminish" " minor" " codeprose"))])(dim-autoload . [(20150815 2332)  nil  "dim complete autoload cookie lines" single ((url: ."https://github.com/tarsius/dim-autoload") (:keywords  " convenience"))])(dim . [(20160106 253) ((emacs (24 4)) ) "Change modeline names of major/minor modes  * lexicalbinding: t *" single ((url: ."https://github.com/alezost/dim.el") (:keywords  " convenience"))])(digistar-mode . [(20160219 355)  nil  "major mode for Digistar scripts" single ((url: ."https://github.com/retroj/digistar-mode") (:keywords  " languages"))])(diffview . [(20150929 1311)  nil  "View diffs in sidebyside format" single ((url: ."https://github.com/mgalgs/diffview-mode") (:keywords  " convenience" " diff"))])(diff-hl . [(20160518 731) ((cl-lib (0 2)) ) "Highlight uncommitted changes using VC * lexicalbinding: t *" tar ((url: ."https://github.com/dgutov/diff-hl") (:keywords  " vc" " diff"))])(dictionary . [(20140718 1129) ((connection (1 10)) (link (1 10)) ) "Client for rfc2229  servers" single ((url: ."https://github.com/myrkr/dictionary-el") (:keywords  " interface" " dictionary"))])(dictcc . [(20151221 2003) ((dash (2 0)) (s (1 0)) (emacs (24)) (helm (1 0)) (cl-lib (0 5)) ) "Look up translations on dict.cc  * lexicalbinding: t *" tar ((url: ."https://github.com/cqql/dictcc.el") (:keywords  " convenience"))])(devdocs . [(20160413 308)  nil  "Launch DevDocs search  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/devdocs.el") (:keywords ""))])(desktop-registry . [(20140120 543)  nil  "Keep a central registry of desktop files * lexicalbinding: t *" single ((url: ."https://github.com/ryuslash/desktop-registry") (:keywords  " convenience"))])(desktop+ . [(20160330 2112) ((f (0 17 2)) (dash (2 11 0)) (emacs (24 4)) ) "+  Handle special buffers when saving & restoring sessions" single ((url: ."https://github.com/ffevotte/desktop-plus") (:keywords ""))])(describe-number . [(20151101 855) ((yabin (1 1)) ) "Describe arbitrarily large number at point." single ((url: ."https://github.com/netromdk/describe-number") (:keywords  " describe value help"))])(demo-it . [(20160414 331)  nil  "Utility functions for creating demonstrations" single ((url: ."https://github.com/howardabrams/demo-it") (:keywords  " demonstration presentation"))])(demangle-mode . [(20151110 453) ((emacs (24)) (cl-lib (0 1)) ) "Automatically demangle C++ symbols * lexicalbinding: t *" single ((url: ."https://github.com/liblit/demangle-mode") (:keywords  " c tools"))])(delim-kill . [(20100517 1420)  nil  "Kill text between imiters." single ((url: ."https://github.com/thomas11/delim-kill") (:keywords  " convenience" " languages"))])(defproject . [(20151202 619) ((emacs (24)) ) "Manager dirlocals and project specific variables" single ((url: ."https://github.com/kotfic/defproject") (:keywords  " convenience"))])(define-word . [(20150710 323) ((emacs (24 1)) ) "display the definition of word at point. * lexicalbinding: t *" single ((url: ."https://github.com/abo-abo/define-word") (:keywords  " dictionary" " convenience"))])(deferred . [(20160110 1246)  nil  "Simple asynchronous functions for emacs lisp" single ((url: ."https://github.com/kiwanami/emacs-deferred") (:keywords  " deferred" " async"))])(default-text-scale . [(20150228 207)  nil  "Easily adjust the font size in all frames" single ((url: ."https://github.com/purcell/default-text-scale") (:keywords  " frames" " faces"))])(dedukti-mode . [(20160330 102)  nil  "Major mode for Dedukti files" single ((url: ."https://github.com/rafoo/dedukti-mode") (:keywords ""))])(dedicated . [(20090429 331)  nil  "A very simple minor mode for  buffers" single ((url: ."https://github.com/emacsorphanage/dedicated") (:keywords  " dedicated" " buffer"))])(decl . [(20160101 1223) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3)) ) "Library for organizing code aratiy * lexicalbinding: t *" single ((url: ."https://github.com/preetpalS/decl.el") (:keywords ""))])(decide . [(20160315 348)  nil  "rolling dice and other random things" single ((url: ."https://github.com/lifelike/decide-mode") (:keywords ""))])(debug-print . [(20140126 819) ((emacs (24)) ) "A nice printf debugging environment by the way Gauche do * lexicalbinding: t *" tar ((url: ."https://github.com/kenoss/debug-print") (:keywords  " extensions" " lisp" " tools" " maint"))])(debpaste . [(20160114 747) ((xml-rpc (1 6 7)) ) "Interface for getting/posting/eting pastes from paste.debian.net" single ((url: ."https://github.com/alezost/debpaste.el") (:keywords  " paste"))])(ddskk . [(20160417 2212)  nil  " " tar ((url: ."https://github.com/skk-dev/ddskk") (:keywords  " japanese" " mule" " input method"))])(db-pg . [(20130201 302) ((db (0 0 6)) (pg (0 12)) ) "A PostgreSQL adapter for emacsdb" tar ((url: ."https://github.com/nicferrier/emacs-db-pg") (:keywords  " data comm database postgresql"))])(db . [(20140422 511) ((kv (0 0 11)) ) "A database for EmacsLisp  * lexicalbinding: t *" single ((url: ."https://github.com/nicferrier/emacs-db") (:keywords  " data" " lisp"))])(dayone . [(20160105 2040) ((ht (1 5)) (uuid (0 0 3)) (mustache (0 22)) ) "Utility script for Day One" tar ((url: ."https://github.com/mori-dev/emacs-dayone") (:keywords  " Day One" " tools" " convenience"))])(datomic-snippets . [(20130708 415) ((dash (1 2 0)) (s (1 4 0)) (yasnippet (0 6 1)) ) "Yasnippets for Datomic" tar ((url: ."https://github.com/magnars/datomic-snippets") (:keywords  " snippets"))])(date-field . [(20141129 2339) ((log4e (0 2 0)) (dash (2 9 0)) (yaxception (0 3 2)) ) "Date widget" single ((url: ."https://github.com/aki2o/emacs-date-field") (:keywords  " widgets"))])(date-at-point . [(20150108 2018)  nil  "Add `date' to `thingatpoint' function" single ((url: ."https://github.com/alezost/date-at-point.el") (:keywords  " convenience"))])(dash-functional . [(20160518 1613) ((dash (2 0 0)) (emacs (24)) ) "Collection of useful combinators for Emacs Lisp  * lexicalbinding: t *" single ((url: ."https://github.com/magnars/dash.el") (:keywords  " lisp functions combinators"))])(dash-at-point . [(20140626 1535)  nil  "Search the word at point with Dash" single ((url: ."https://github.com/stanaka/dash-at-point") (:keywords ""))])(dash . [(20160518 1613)  nil  "A modern list library for Emacs  * lexicalbinding: t *" single ((url: ."https://github.com/magnars/dash.el") (:keywords  " lists"))])(dart-mode . [(20160213 321) ((dash (2 10 0)) (cl-lib (0 5)) (flycheck (0 23)) ) "Major mode for editing Dart files * lexicalbinding: t *" single ((url: ."https://github.com/nex3/dart-mode") (:keywords  " language"))])(darktooth-theme . [(20160406 2324)  nil  "Color theme for Emacs, when soothe and gruvbox collide" single ((url: ."https://github.com/emacsfodder/emacs-theme-darktooth") (:keywords ""))])(darkokai-theme . [(20160512 2316)  nil  "A darker variant on Monokai." single ((url: ."https://github.com/sjrmanning/darkokai") (:keywords ""))])(darkmine-theme . [(20160406 1424)  nil  "Yet another emacs dark color theme." single ((url: ."https://github.com/pierre-lecocq/darkmine-theme") (:keywords ""))])(darkburn-theme . [(20151003 1600)  nil  "A notsolow contrast color theme for Emacs." single ((url: ."https://github.com/gorauskas/darkburn-theme") (:keywords ""))])(dark-souls . [(20140315 626)  nil  "Prepare to die" single ((url: ."https://github.com/tomjakubowski/dark-souls.el") (:keywords  " games"))])(dark-mint-theme . [(20160417 28)  nil  "dark & minty fresh theme" single ((url: ."https://github.com/shaunvxc/dark-mint-theme") (:keywords ""))])(dark-krystal-theme . [(20141116 2354) ((emacs (24 0)) ) "an Emacs 24 theme based on Dark Krystal (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-dark-krystal-theme") (:keywords ""))])(darcula-theme . [(20160316 1811)  nil  "Inspired by InliJ's Darcula theme" single ((url: ."https://github.com/fommil/darcula-theme-emacs") (:keywords  " faces"))])(danneskjold-theme . [(20160410 117)  nil  "beautiful highcontrast theme" single ((url: ."https://github.com/rails-to-cosmos/danneskjold-theme") (:keywords ""))])(dakrone-theme . [(20140212 1245)  nil  "dakrone's custom dark theme" single ((url: ."https://github.com/dakrone/dakrone-theme") (:keywords  " color themes"))])(dactyl-mode . [(20140907 125)  nil  "Major mode for editing Pentadactyl config files" single ((url: ."https://github.com/luxbock/dactyl-mode") (:keywords  " languages" " vim"))])(d-mode . [(20160505 1457)  nil  "D Programming Language major mode for (X)Emacs" tar ((url: ."https://github.com/Emacs-D-Mode-Maintainers/Emacs-D-Mode") (:keywords  "  D programming language emacs cc-mode"))])(czech-holidays . [(20160114 153)  nil  "Adds a list of Czech public holidays to Emacs calendar" single ((url: ."https://github.com/hydandata/czech-holidays") (:keywords  " calendar"))])(cypher-mode . [(20151110 1942)  nil  "major mode for editing cypher scripts" single ((url: ."https://github.com/fxbois/cypher-mode") (:keywords  " cypher graph"))])(cyphejor . [(20160106 1444) ((emacs (24 4)) ) "Shorten major mode names using userdefined rules * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/cyphejor") (:keywords  " mode-line major-mode"))])(cycle-themes . [(20150404 459) ((cl-lib (0 5)) ) "A global minor mode to make switching themes easier" single ((url: ."https://github.com/toroidal-code/cycle-themes.el") (:keywords  " Themes" " Utility" " Global Minor Mode"))])(cycle-resize . [(20150603 323)  nil  "Cycle resize the current window horizontally or vertically" single ((url: ."https://github.com/pierre-lecocq/cycle-resize") (:keywords ""))])(cycbuf . [(20131204 437)  nil  "Cycle buffers, inspired by swbuff, swbuffx, and bs" single ((url: ."https://github.com/martinp26/cycbuf") (:keywords  " files" " convenience" " buffer switching"))])(cyberpunk-theme . [(20160122 912)  nil  "Cyberpunk Color Theme" single ((url: ."https://github.com/n3mo/cyberpunk-theme.el") (:keywords  " color theme cyberpunk"))])(cursor-test . [(20131208 132) ((emacs (24)) ) "testing library for cursor position in emacs. * lexicalbinding: t *" single ((url: ."https://github.com/ainame/cursor-test.el") (:keywords ""))])(cuda-mode . [(20151214 1121)  nil  "NVIDIA CUDA Major Mode" single ((url: ."https://github.com/chachi/cuda-mode") (:keywords  " c" " languages"))])(cucumber-goto-step . [(20131210 1319) ((pcre2el (1 5)) ) "Jump to cucumber step definition" single ((url: ."https://github.com/gstamp/cucumber-goto-step") (:keywords ""))])(ctxmenu . [(20140304 542) ((log4e (0 2 0)) (yaxception (0 1)) (popup (20140205 103)) ) "Provide a context menu like rightclick." tar ((url: ."https://github.com/aki2o/emacs-ctxmenu") (:keywords  " popup"))])(ctl-mode . [(20151202 1806)  nil  "Major mode for editing GrADS script files" single ((url: ."https://github.com/yyr/emacs-grads") (:keywords  " GrADS script major-mode"))])(ctags-update . [(20151120 2331)  nil  "(auto) update TAGS in parent directory using exuberantctags" single ((url: ."https://github.com/jixiuf/helm-etags-plus") (:keywords  " exuberant-ctags etags"))])(ctable . [(20140909 2034)  nil  "Table component for Emacs Lisp" single ((url: ."https://github.com/kiwanami/emacs-ctable") (:keywords  " table"))])(cssh . [(20150811 109)  nil  "clusterssh implementation for emacs" single ((url: ."https://github.com/dimitri/cssh") (:keywords  " ClusterSSH ssh cssh"))])(cssfmt . [(20150819 1228)  nil  "Cssfmt interface" single ((url: ."https://github.com/KeenS/cssfmt.el") (:keywords  " css code formatter"))])(css-eldoc . [(20150125 1123)  nil  "andocmode plugin for CSS source code" tar ((url: ."https://github.com/zenozeng/css-eldoc") (:keywords ""))])(css-comb . [(20160416 1359)  nil  "Sort CSS properties in a particular order using CSS Comb" single ((url: ."https://github.com/channikhabra/css-comb.el") (:keywords ""))])(csharp-mode . [(20160417 211)  nil  "C# mode derived mode" tar ((url: ."https://github.com/josteink/csharp-mode") (:keywords ""))])(cryptsy-public-api . [(20150527 1907) ((json (1 2)) ) "Library for working with the Cryptsy public API" single ((url: ."https://github.com/Sodaware/cryptsy-public-api.el") (:keywords  " cryptsy bitcoin litecoin dogecoin"))])(cryptol-mode . [(20140427 115)  nil  "Cryptol major mode for Emacs" single ((url: ."https://github.com/thoughtpolice/cryptol-mode") (:keywords  "  cryptol cryptography"))])(crux . [(20160504 1133) ((seq (1 11)) ) "A Collection of Ridiculously Useful eXtensions * lexicalbinding: t *" single ((url: ."https://github.com/bbatsov/crux") (:keywords  " convenience"))])(crontab-mode . [(20090511 455)  nil  "~/share/emacs/pkg/crontab/" single ((url: ."https://github.com/emacsorphanage/crontab-mode") (:keywords  " cron" " crontab" " emacs"))])(crm-custom . [(20160117 806) ((cl-lib (0 5)) ) "Alternate `completingreadmultiple' that uses `completingread'" single ((url: ."https://github.com/DarwinAwardWinner/crm-custom") (:keywords  " completion" " minibuffer" " multiple elements"))])(creole-mode . [(20130722 850)  nil  "a markup mode for creole" single ((url: ."https://github.com/nicferrier/creole-mode") (:keywords  " hypermedia" " wp"))])(creole . [(20140924 2300)  nil  "A parser for the Creole Wiki language" single ((url: ."https://github.com/nicferrier/elwikicreole") (:keywords  " lisp" " creole" " wiki"))])(creds . [(20140525 541) ((dash (2 5 0)) (s (1 9 0)) ) "A parser credentials file library (not limited to credentials entries)" tar ((url: ."https://github.com/ardumont/emacs-creds") (:keywords  " credentials"))])(crappy-jsp-mode . [(20140311 1731)  nil  "A pretty crappy majormode for jsp." single ((url: ."https://github.com/magnars/crappy-jsp-mode") (:keywords  " jsp major mode"))])(crab . [(20150127 1337) ((json (1 2)) (websocket (1 0)) ) "WebSocket server to remoy control a browser" single ((url: ."https://github.com/puffnfresh/crab-emacs") (:keywords ""))])(cql-mode . [(20160414 843) ((emacs (24)) ) "Major mode for editting CQLs" single ((url: ."https://github.com/Yuki-Inoue/cql-mode") (:keywords  " cql" " cassandra"))])(cpputils-cmake . [(20160515 1603)  nil  "Easy realtime C++ syntax check and InliSense with CMake." tar ((url: ."https://github.com/redguardtoo/cpputils-cmake") (:keywords  " CMake IntelliSense Flymake Flycheck"))])(cp5022x . [(20120324 735)  nil  "cp50220, cp50221, cp50222 coding system" single ((url: ."https://github.com/awasira/cp5022x.el") (:keywords  " languages" " cp50220" " cp50221" " cp50222" " cp51932" " cp932"))])(coverlay . [(20160509 1537) ((emacs (24 1)) (cl-lib (0 5)) ) "Test coverage overlays" single ((url: ."https://github.com/twada/coverlay.el") (:keywords  " coverage" " overlay"))])(coverage . [(20160222 1714) ((ov (1 0)) (cl-lib (0 5)) ) "Code  line highlighting" single ((url: ."https://github.com/trezona-lecomte/coverage") (:keywords  " coverage metrics simplecov ruby rspec"))])(counsel-projectile . [(20160513 1555) ((projectile (0 13 0)) (counsel (0 7 0)) ) "Ivy integration for Projectile" tar ((url: ."https://github.com/ericdanan/counsel-projectile") (:keywords  " project" " convenience"))])(counsel . [(20160518 449) ((emacs (24 1)) (swiper (0 8 0)) ) "Various completion functions using Ivy * lexicalbinding: t *" single ((url: ."https://github.com/abo-abo/swiper") (:keywords  " completion" " matching"))])(corral . [(20160502 1748)  nil  "Quickly surround text with imiters" single ((url: ."https://github.com/nivekuil/corral") (:keywords ""))])(control-mode . [(20150909 2211)  nil  "A "control" mode, similar to vim's "normal" mode" single ((url: ."https://github.com/stephendavidmarsh/control-mode") (:keywords  " convenience emulations"))])(contextual . [(20160208 2316) ((dash (2 12 1)) (emacs (24)) (cl-lib (0 5)) ) "Contextual profile management system	* lexicalbinding: t *" single ((url: ."https://github.com/lshift-de/contextual") (:keywords  " convenience" " tools"))])(connection . [(20140718 1129)  nil  "TCPbased client" single ((url: ."https://github.com/myrkr/dictionary-el") (:keywords  " network"))])(conkeror-minor-mode . [(20150115 4)  nil  "Mode for editing conkeror javascript files." single ((url: ."https://github.com/Malabarba/conkeror-minor-mode") (:keywords  " programming tools"))])(config-parser . [(20160426 2019) ((emacs (24 4)) ) "a library for parsing config file" single ((url: ."https://github.com/lujun9972/el-config-parser") (:keywords  " convenience" " config"))])(concurrent . [(20160110 1246) ((deferred (0 4 0)) ) "Concurrent utility functions for emacs lisp" single ((url: ."https://github.com/kiwanami/emacs-deferred") (:keywords  " deferred" " async" " concurrent"))])(composable . [(20160505 114) ((emacs (24 4)) ) "editing * lexicalbinding: t *" tar ((url: ."https://github.com/paldepind/composable.el") (:keywords  " lisp"))])(company-ycmd . [(20160507 1551) ((dash (1 2 0)) (ycmd (0 1)) (s (1 9 0)) (company (0 8 3)) (deferred (0 2 0)) (let-alist (1 0 4)) ) "companymode backend for ycmd * lexicalbinding: t *" single ((url: ."https://github.com/abingham/emacs-ycmd") (:keywords ""))])(company-ycm . [(20150823 236) ((ycm (0 1)) ) " " single ((url: ."https://github.com/neuromage/ycm.el") (:keywords  " abbrev"))])(company-web . [(20160502 2158) ((dash (2 8 0)) (company (0 8 0)) (web-completion-data (0 1 0)) (cl-lib (0 5 0)) ) "Company version of achtml, complete for web,html,emmet,jade,slim modes" tar ((url: ."https://github.com/osv/company-web") (:keywords  " html" " company"))])(company-try-hard . [(20160411 617) ((dash (2 0)) (emacs (24 3)) (company (0 8 0)) ) "get all completions from company backends" single ((url: ."https://github.com/Wilfred/company-try-hard") (:keywords  " matching"))])(company-tern . [(20160510 2151) ((dash (2 8 0)) (s (1 9 0)) (dash-functional (2 8 0)) (tern (0 0 1)) (company (0 8 0)) (cl-lib (0 5 0)) ) "Tern backend for companymode  * lexicalbinding: t *" single ((url: ."https://github.com/proofit404/company-tern") (:keywords ""))])(company-sourcekit . [(20160511 1117) ((sourcekit (0 1 7)) (dash (2 12 1)) (dash-functional (1 2 0)) (emacs (24 3)) (company (0 8 12)) ) "companymode completion backend for SourceKit  * lexicalbinding: t *" single ((url: ."https://github.com/nathankot/company-sourcekit") (:keywords  " abbrev"))])(company-shell . [(20160213 339) ((dash (2 12 0)) (company (0 8 12)) (cl-lib (0 5)) ) "Company mode backend for sl functions" single ((url: ."https://github.com/Alexander-Miller/company-shell") (:keywords  " company" " shell"))])(company-restclient . [(20151203 1936) ((restclient (0 0 0)) (know-your-http-well (0 2 0)) (emacs (24)) (company (0 8 0)) (cl-lib (0 5)) ) "companymode completion backend for restclientmode" single ((url: ."https://github.com/iquiw/company-restclient") (:keywords ""))])(company-racer . [(20150629 1033) ((emacs (24)) (company (0 8 0)) (deferred (0 3 1)) (cl-lib (0 5)) ) "Company integration for racer * lexicalbinding: t *" tar ((url: ."https://github.com/emacs-pe/company-racer") (:keywords  " convenience"))])(company-quickhelp . [(20160211 2318) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6)) ) "Popup documentation for completion candidates" single ((url: ."https://github.com/expez/company-quickhelp") (:keywords  " company popup documentation quickhelp"))])(company-qml . [(20160213 712) ((company (0 8 12)) (qml-mode (0 1)) ) "Company backend for QML files" tar ((url: ."https://github.com/cute-jumper/company-qml") (:keywords  " extensions"))])(company-nixos-options . [(20160401 1759) ((nixos-options (0 0 1)) (company (0 8 0)) (cl-lib (0 5 0)) ) "Company Backend for nixosoptions" single ((url: ."https://github.com/travisbhartwell/nix-emacs") (:keywords  " unix"))])(company-ngram . [(20160514 241) ((company (0 8 0)) (cl-lib (0 5)) ) "Ngram based completion" single ((url: ."https://github.com/kshramt/company-ngram") (:keywords ""))])(company-nand2tetris . [(20151028 551) ((names (0 3 0)) (company (0 5)) (nand2tetris (0 0 1)) (cl-lib (0 5 0)) ) "Company backend for nand2tetris major mode" single ((url: ."https://github.com/CestDiego/nand2tetris.el") (:keywords  " nand2tetris" " hdl" " company"))])(company-math . [(20160229 2332) ((math-symbol-lists (1 0)) (company (0 8 0)) ) "Completion backends for unicode math symbols and latex tags" tar ((url: ."https://github.com/vspinu/company-math") (:keywords  "  Unicode" " symbols" " completion"))])(company-lua . [(20160515 520) ((f (0 17 0)) (lua-mode (20151025)) (s (1 10 0)) (company (0 8 12)) ) "Company backend for Lua       * lexicalbinding: t *" single ((url: ."https://github.com/ptrv/company-lua") (:keywords ""))])(company-jedi . [(20160304 906) ((jedi-core (0 2 7)) (emacs (24)) (company (0 8 11)) (cl-lib (0 5)) ) "companymode completion backend for Python JEDI * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-company-jedi") (:keywords ""))])(company-irony-c-headers . [(20151018 1709) ((company (0 9 0)) (irony (0 2 0)) (cl-lib (0 5)) ) "Company mode backend for C/C++ header files with Irony" single ((url: ."https://github.com/hotpxl/company-irony-c-headers") (:keywords  " c company"))])(company-irony . [(20160322 503) ((emacs (24 1)) (company (0 8 0)) (irony (0 2 0)) (cl-lib (0 5)) ) "companymode completion backend for ironymode  * lexicalbinding: t *" single ((url: ."https://github.com/Sarcasm/company-irony") (:keywords  " convenience"))])(company-inf-ruby . [(20140905 823) ((emacs (24 1)) (inf-ruby (2 2 7)) (company (0 6 10)) ) "companymode completion backend for infruby" single ((url: ."https://github.com/company-mode/company-inf-ruby") (:keywords ""))])(company-ghci . [(20160311 1000) ((company (0 8 11)) (haskell-mode (13)) ) "company backend which uses the current ghci process.* lexicalbinding: t *" single ((url: ."https://github.com/juiko/company-ghci") (:keywords ""))])(company-ghc . [(20160315 2210) ((emacs (24)) (company (0 8 0)) (cl-lib (0 5)) (ghc (5 4 0 0)) ) "companymode ghcmod backend * lexicalbinding: t *" single ((url: ."https://github.com/iquiw/company-ghc") (:keywords  "  haskell" " completion"))])(company-flx . [(20160424 813) ((flx (0 5)) (emacs (24)) (company (0 8 12)) ) "flx based fuzzy matching for company * lexicalbinding: t *" single ((url: ."https://github.com/PythonNut/company-flx") (:keywords  " convenience" " company" " fuzzy" " flx"))])(company-emoji . [(20160401 741) ((company (0 8 0)) (cl-lib (0 5)) ) "companymode backend for emoji" single ((url: ."https://github.com/dunn/company-emoji") (:keywords  " emoji company honk"))])(company-edbi . [(20160222 323) ((edbi (0 1 3)) (s (1 9 0)) (company (0 8 5)) (cl-lib (0 5 0)) ) "Edbi backend for companymode" single ((url: ."https://github.com/proofit404/company-edbi") (:keywords ""))])(company-dict . [(20160302 29) ((company (0 8 12)) ) "A backend that emulates acsourcedictionary" single ((url: ."https://github.com/hlissner/emacs-company-dict") (:keywords  " company dictionary ac-source-dictionary"))])(company-dcd . [(20160407 1148) ((popwin (0 7)) (yasnippet (0 8)) (company (0 9)) (flycheck-dmd-dub (0 7)) (helm (1 5 6)) (cl-lib (0 5)) ) "Company backend for Dlang using DCD." tar ((url: ."https://github.com/tsukimizake/company-dcd") (:keywords  " languages"))])(company-coq . [(20160317 214) ((company-math (1 1)) (dash (2 12 1)) (yasnippet (0 9 0 1)) (company (0 8 12)) (cl-lib (0 5)) ) "A collection of extensions for Proof General's Coq mode * lexicalbinding: t *" tar ((url: ."https://github.com/cpitclaudel/company-coq") (:keywords  " convenience" " languages"))])(company-cabal . [(20151216 2320) ((emacs (24)) (company (0 8 0)) (cl-lib (0 5)) ) "companymode cabal backend * lexicalbinding: t *" tar ((url: ."https://github.com/iquiw/company-cabal") (:keywords ""))])(company-c-headers . [(20160404 446) ((emacs (24 1)) (company (0 8)) ) "Company mode backend for C/C++ header files  * lexicalbinding: t *" single ((url: ."https://github.com/randomphrase/company-c-headers") (:keywords  " development company"))])(company-auctex . [(20151102 2243) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87)) ) "Companymode autocompletion for AUCTeX" single ((url: ."https://github.com/alexeyr/company-auctex") (:keywords ""))])(company-arduino . [(20160307 139) ((arduino-mode (1 0)) (company-irony (0 1 0)) (company-c-headers (20140930)) (emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) ) "companymode for Arduino * lexicalbinding: t *" single ((url: ."https://github.com/yuutayamada/company-arduino") (:keywords  " convenience development company"))])(company-ansible . [(20151024 1810) ((emacs (24 4)) (company (0 8 12)) ) "A company backend for ansible" tar ((url: ."https://github.com/krzysztof-magosa/company-ansible") (:keywords  " ansible"))])(company-anaconda . [(20160509 1917) ((anaconda-mode (0 1 1)) (dash (2 6 0)) (s (1 9)) (company (0 8 0)) (cl-lib (0 5 0)) ) "Anaconda backend for companymode  * lexicalbinding: t *" single ((url: ."https://github.com/proofit404/company-anaconda") (:keywords ""))])(company . [(20160515 850) ((emacs (24 1)) (cl-lib (0 5)) ) "Modular text completion framework  * lexicalbinding: t *" tar ((url: ."https://github.com/company-mode/company-mode") (:keywords  " abbrev" " convenience" " matching"))])(common-lisp-snippets . [(20160405 1238) ((yasnippet (0 8 0)) ) "Yasnippets for Common Lisp * lexicalbinding: t *" tar ((url: ."https://github.com/mrkkrp/common-lisp-snippets") (:keywords  " snippets"))])(commify . [(20151110 1738) ((s (1 9 0)) ) "Toggle grouping commas in numbers" single ((url: ."https://github.com/ddoherty03/commify") (:keywords  " convenience" " editing" " numbers" " grouping" " commas"))])(commenter . [(20160220 27) ((emacs (24 4)) (let-alist (1 0 4)) ) "multilinecomment support package * lexicalbinding: t *" single ((url: ."https://github.com/yuutayamada/commenter") (:keywords  " comment"))])(comment-dwim-2 . [(20150826 649)  nil  "An allinone comment command to rule them all" tar ((url: ."https://github.com/remyferre/comment-dwim-2") (:keywords  " convenience"))])(commander . [(20151023 1618) ((f (0 6 1)) (dash (2 0 0)) (s (1 6 0)) (cl-lib (0 3)) ) "Emacs command line parser" single ((url: ."https://github.com/rejeep/commander.el") (:keywords  " cli" " argv"))])(command-queue . [(20160329 125) ((emacs (24 3)) ) "sl command queue" single ((url: ."https://github.com/Yuki-Inoue/command-queue") (:keywords ""))])(command-log-mode . [(20160413 1247)  nil  "homepage: https://github.com/lewang/" single ((url: ."https://github.com/lewang/command-log-mode") (:keywords  " help"))])(column-enforce-mode . [(20141008 417)  nil  "Filename:" single ((url: ."https://github.com/jordonbiondo/column-enforce-mode") (:keywords  " "))])(color-theme-solarized . [(20160220 124)  nil  " " tar ((url: ."https://github.com/sellout/emacs-color-theme-solarized") (:keywords ""))])(color-theme-sanityinc-tomorrow . [(20160519 719)  nil  "A version of Chris Kempson's "tomorrow" themes" tar ((url: ."https://github.com/purcell/color-theme-sanityinc-tomorrow") (:keywords  " themes"))])(color-theme-sanityinc-solarized . [(20160430 1003)  nil  "A version of Ethan Schoonover's Solarized themes" tar ((url: ."https://github.com/purcell/color-theme-sanityinc-solarized") (:keywords  " themes"))])(color-theme-buffer-local . [(20151013 728)  nil  "Name:" single ((url: ."https://github.com/vic/color-theme-buffer-local") (:keywords  " faces"))])(color-theme-approximate . [(20140228 1236)  nil  "Makes Emacs theme works on terminal transparently" single ((url: ."https://github.com/tungd/color-theme-approximate") (:keywords ""))])(color-moccur . [(20141223 835)  nil  "multibuffer occur (grep) mode" single ((url: ."https://github.com/myuhe/color-moccur.el") (:keywords  " convenience"))])(color-identifiers-mode . [(20150603 904) ((dash (2 5 0)) (emacs (24)) ) "Color identifiers based on their names" single ((url: ."https://github.com/ankurdave/color-identifiers-mode") (:keywords  " faces" " languages"))])(colonoscopy-theme . [(20141116 2348) ((emacs (24 0)) ) "an Emacs 24 theme based on Colonoscopy (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-colonoscopy-theme") (:keywords ""))])(colemak-evil . [(20140509 712) ((evil (1 0 8)) ) "Colemakfriendly keybindings for Evil." single ((url: ."https://github.com/patbl/colemak-evil") (:keywords ""))])(coffee-mode . [(20160420 1047) ((emacs (24 1)) (cl-lib (0 5)) ) "Major mode for CoffeeScript code * lexicalbinding: t *" single ((url: ."https://github.com/defunkt/coffee-mode") (:keywords  " CoffeeScript major mode"))])(coffee-fof . [(20131012 2030) ((coffee-mode (0 4 1)) ) "A coffeemode configuration for `fffindotherfile'." single ((url: ."https://github.com/yasuyk/coffee-fof") (:keywords  " coffee-mode"))])(codic . [(20150926 1927) ((emacs (24)) (cl-lib (0 5)) ) "Search Codic (.jp) naming dictionaries * lexicalbinding: t *" tar ((url: ."https://github.com/syohex/emacs-codic") (:keywords ""))])(codesearch . [(20160111 2255) ((dash (2 8 0)) ) "Easy access to the  tools" single ((url: ."https://github.com/abingham/codesearch.el") (:keywords  " tools" " development" " search"))])(codebug . [(20150521 45)  nil  "Interact with" single ((url: ."https://github.com/shano/emacs-codebug") (:keywords ""))])(code-library . [(20160426 2018) ((gist (1 3 1)) ) "use orgmode to collect code snippets" single ((url: ."https://github.com/lujun9972/code-library") (:keywords  " lisp" " code"))])(cobra-mode . [(20140117 516)  nil  "Major mode for .NETbased Cobra language" single ((url: ."https://github.com/Nekroze/cobra-mode") (:keywords  " languages"))])(cn-outline . [(20100322 14)  nil  "minor mode for columnnumberbase line folding" single ((url: ."https://github.com/mori-dev/cn-outline") (:keywords  " outliner"))])(cmm-mode . [(20150225 1546)  nil  "Major mode for C source code" single ((url: ."https://github.com/bgamari/cmm-mode") (:keywords ""))])(cmake-project . [(20150721 459)  nil  "Integrates CMake build process with Emacs" single ((url: ."https://github.com/alamaison/emacs-cmake-project") (:keywords  " c cmake languages tools"))])(cmake-ide . [(20160430 122) ((levenshtein (0)) (emacs (24 1)) (seq (1 11)) (cl-lib (0 5)) ) "Calls CMake to find out include paths and other compiler flags * lexicalbinding: t *" single ((url: ."https://github.com/atilaneves/cmake-ide") (:keywords  " languages"))])(cmake-font-lock . [(20150829 427) ((cmake-mode (0 0)) ) "Advanced, type aware, highlight support for CMake" single ((url: ."https://github.com/Lindydancer/cmake-font-lock") (:keywords  " faces" " languages"))])(cm-mode . [(20160311 29) ((cl-lib (0 5)) ) "Minor mode for CriticMarkup" single ((url: ."https://github.com/joostkremers/criticmarkup-emacs") (:keywords  " text" " markdown"))])(clues-theme . [(20140923 1156) ((emacs (24 0)) ) "an Emacs 24 theme which may l be fully awesome..." single ((url: ."https://github.com/jasonm23/emacs-clues-theme") (:keywords ""))])(cloud-to-butt-erc . [(20130628 708)  nil  "Replace 'the cloud' with 'my butt'" single ((url: ."https://github.com/leathekd/cloud-to-butt-erc") (:keywords ""))])(closure-lint-mode . [(20101119 524)  nil  "minor mode for the Closure Linter" single ((url: ."https://github.com/r0man/closure-lint-mode") (:keywords  " tools closure javascript lint flymake"))])(clojure-snippets . [(20160305 2202) ((yasnippet (0 8 0)) ) "Yasnippets for clojure" tar ((url: ."https://github.com/mpenet/clojure-snippets") (:keywords  " snippets"))])(clojure-quick-repls . [(20150819 1627) ((dash (2 9 0)) (cider (0 8 1)) ) "Quickly create Clojure and ClojureScript repls for a project." single ((url: ."https://github.com/symfrog/clojure-quick-repls") (:keywords  " languages" " clojure" " cider" " clojurescript"))])(clojure-mode-extra-font-locking . [(20160513 2347) ((clojure-mode (3 0)) ) "Extra fontlocking for Clojure mode" single ((url: ."https://github.com/clojure-emacs/clojure-mode") (:keywords  " languages" " lisp"))])(clojure-mode . [(20160513 2347) ((emacs (24 3)) ) "Major mode for Clojure code * lexicalbinding: t *" single ((url: ."https://github.com/clojure-emacs/clojure-mode") (:keywords  " languages clojure clojurescript lisp"))])(clojure-cheatsheet . [(20160320 1815) ((cider (0 9 0)) (helm (1 7 7)) ) "The Clojure Cheatsheet for Emacs" tar ((url: ."https://github.com/clojure-emacs/clojure-cheatsheet") (:keywords  " clojure nrepl cheatsheet helm"))])(clojars . [(20151216 603) ((request (0 1 0)) (cl-lib (0 5)) ) "Filename:" single ((url: ."https://github.com/joshuamiller/clojars.el") (:keywords  " docs" " help" " tools"))])(clocker . [(20160126 707) ((dash (2 10)) (projectile (0 11 0)) ) "Note taker and clockin enforcer" single ((url: ."https://github.com/roman/clocker.el") (:keywords  " org"))])(cloc . [(20151106 1102) ((cl-lib (0 5)) ) "count lines of code over emacs buffers" single ((url: ."https://github.com/cosmicexplorer/cloc-emacs") (:keywords  " cloc" " count" " source" " code" " lines"))])(clmemo . [(20160327 23)  nil  "Change Log MEMO" single ((url: ."https://github.com/ataka/clmemo") (:keywords  " convenience"))])(cljsbuild-mode . [(20160403 100)  nil  "A minor mode for the ClojureScript 'lein cljsbuild' command" single ((url: ."https://github.com/kototama/cljsbuild-mode") (:keywords  " clojure" " clojurescript" " leiningen" " compilation"))])(cljr-helm . [(20150426 407) ((helm (1 5 6)) (clj-refactor (0 13 0)) ) "Wraps clojure refactor commands with m * coding: utf8unix *" single ((url: ."https://github.com/philjackson/cljr-helm") (:keywords ""))])(clj-refactor . [(20160501 1934) ((inflections (2 3)) (edn (1 1 2)) (dash (2 4 0)) (cider (0 11 0)) (multiple-cursors (1 2 2)) (s (1 8 0)) (emacs (24 4)) (yasnippet (0 6 1)) (paredit (24)) (hydra (0 13 2)) ) "A collection of clojure refactoring functions * lexicalbinding: t *" single ((url: ."https://github.com/clojure-emacs/clj-refactor.el") (:keywords  " convenience" " clojure" " cider"))])(clips-mode . [(20131013 732)  nil  "Clips editing mode." tar ((url: ."https://github.com/grettke/clips-mode") (:keywords  " clips"))])(clippy . [(20140417 1914) ((pos-tip (1 0)) ) "Show tooltip with function documentation at point" single ((url: ."https://github.com/Fuco1/clippy.el") (:keywords  " docs"))])(clipmon . [(20160129 913)  nil  "Clipboard monitor  watch system clipboard, add changes to kill ring/autoinsert" tar ((url: ."https://github.com/bburns/clipmon") (:keywords  " convenience"))])(cliphist . [(20160503 1012) ((popup (0 5 0)) ) "Read clipboard history from Parlite on Linux and Flycut on OS X" tar ((url: ."https://github.com/redguardtoo/cliphist") (:keywords  " clipboard manager history"))])(click-mode . [(20160401 548) ((emacs (24)) ) "Major mode for the Click Modular Router Project" single ((url: ."https://github.com/bmalehorn/click-mode") (:keywords  " click router"))])(clevercss . [(20131229 955)  nil  "A major mode for editing CleverCSS files" single ((url: ."https://github.com/jschaf/CleverCSS-Mode") (:keywords  " languages css"))])(clear-text . [(20160407 443)  nil  "Make you use clear text  * lexicalbinding: t *" single ((url: ."https://github.com/xuchunyang/clear-text.el") (:keywords  " convenience"))])(clean-buffers . [(20160426 2018) ((cl-lib (0 5)) ) "clean uess buffers" single ((url: ."https://github.com/lujun9972/clean-buffers") (:keywords  " convenience" " usability" " buffers"))])(clean-aindent-mode . [(20150817 1129)  nil  "Simple indent and unindent, trims indent whitespace" single ((url: ."https://github.com/pmarinov/clean-aindent-mode") (:keywords  " indentation whitespace backspace"))])(cl-lib-highlight . [(20140128 512) ((cl-lib (0 3)) ) "full cllib fontlock highlighting" single ((url: ."https://github.com/skeeto/cl-lib-highlight") (:keywords ""))])(cl-format . [(20160413 845)  nil  "Common Lisp format function." tar ((url: ."https://github.com/alvinfrancis/cl-format") (:keywords  " extensions"))])(circe . [(20160517 1950)  nil  "Client for IRC in Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/jorgenschaefer/circe") (:keywords  " IRC" " chat"))])(cinspect . [(20150716 1033) ((python-environment (0 0 2)) (emacs (24)) (deferred (0 3 1)) (cl-lib (0 5)) ) "Use  to look at the CPython source of builtins and other C objects!" tar ((url: ."https://github.com/inlinestyle/cinspect-mode") (:keywords  " python"))])(cil-mode . [(20150223 1850)  nil  "Common Intermediate Language mode" single ((url: ."https://github.com/ForNeVeR/cil-mode") (:keywords  " languages"))])(cider-spy . [(20160313 2240) ((noflet (0 0 15)) (dash (2 5 0)) (cider (0 10 0)) (emacs (24 4)) (cl-lib (0 5)) ) "Spy on CIDER to get info" single ((url: ."https://github.com/jonpither/cider-spy") (:keywords  " languages" " clojure" " cider" " nrepl"))])(cider-profile . [(20141122 519) ((cider (0 8 0)) ) "CIDER profiling support * lexicalbinding: t *" single ((url: ."https://github.com/thunknyc/nrepl-profile") (:keywords  " cider" " clojure" " profiling"))])(cider-eval-sexp-fu . [(20160412 1428) ((eval-sexp-fu (0 4 0)) (emacs (24)) (highlight (0)) ) "Briefly highlights an evaluated sexps." single ((url: ."https://github.com/clojure-emacs/cider-eval-sexp-fu") (:keywords  " languages" " clojure" " cider"))])(cider-decompile . [(20151122 1337) ((cider (0 3 0)) (javap-mode (9)) ) "decompilation extension for cider" single ((url: ."https://github.com/clojure-emacs/cider-decompile") (:keywords  " languages" " clojure" " cider"))])(cider . [(20160519 311) ((spinner (1 7)) (queue (0 1 1)) (clojure-mode (5 3 0)) (pkg-info (0 4)) (emacs (24 3)) (seq (2 14)) ) "Clojure Interactive Deopment Environment that Rocks * lexicalbinding: t *" tar ((url: ."https://github.com/clojure-emacs/cider") (:keywords  " languages" " clojure" " cider"))])(chruby . [(20151204 2030)  nil  "Emacs integration for" single ((url: ."https://github.com/plexus/chruby.el") (:keywords  " ruby chruby"))])(chronos . [(20150602 2329)  nil  "multiple simultaneous countdown / countup timers" single ((url: ."https://github.com/dxknight/chronos") (:keywords  " calendar"))])(chinese-yasdcv . [(20150702 2116) ((chinese-pyim (0 0 1)) (cl-lib (0 5)) ) "Yet another frontend for the StarDict commandline program" single ((url: ."https://github.com/tumashu/chinese-yasdcv") (:keywords  " convenience" " Chinese" " dictionary"))])(chinese-word-at-point . [(20150619 938) ((cl-lib (0 5)) ) "Add `chineseword' thing to `thingatpoint'" single ((url: ."https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords  " convenience" " Chinese"))])(chinese-wbim . [(20150624 1150)  nil  "Enable Wubi(五笔) Input Method in Emacs." tar ((url: ."https://github.com/zilongshanren/chinese-wbim") (:keywords  " Wubi Input Method."))])(chinese-remote-input . [(20150111 1303)  nil  "Input Chinese with a remote input method (e.g. Android Voice Input Method)" single ((url: ."https://github.com/tumashu/chinese-remote-input") (:keywords  " convenience" " Chinese"))])(chinese-pyim . [(20160513 2208) ((popup (0 1)) (pos-tip (0 4)) (cl-lib (0 5)) ) "Chinese pinyin input method" tar ((url: ."https://github.com/tumashu/chinese-pyim") (:keywords  " convenience" " Chinese" " pinyin" " input-method"))])(chinese-fonts-setup . [(20160420 1259) ((cl-lib (0 5)) ) "A fonts config tool enforcing doublewidth Chinese character display" single ((url: ."https://github.com/tumashu/chinese-fonts-setup") (:keywords  " convenience" " Chinese" " font"))])(chinese-conv . [(20160223 323) ((cl-lib (0 5)) ) "Conversion between Chinese Characters with opencc or cconv" single ((url: ."https://github.com/gucong/emacs-chinese-conv") (:keywords ""))])(chicken-scheme . [(20141117 339)  nil  "Schememode extensions for Chicken Scheme" single ((url: ."https://github.com/dleslie/chicken-scheme.el") (:keywords ""))])(cherry-blossom-theme . [(20150622 1143) ((emacs (24 0)) ) "a soothing color theme for Emacs24." single ((url: ."https://github.com/inlinestyle/emacs-cherry-blossom-theme") (:keywords ""))])(chef-mode . [(20111121 2300)  nil  "minor mode for editing an opscode chef repository" single ((url: ."https://github.com/mpasternacki/chef-mode") (:keywords  " chef knife"))])(cheerilee . [(20160314 235) ((xelb (0 1)) ) "Toolkit library * lexicalbinding: t *" tar ((url: ."https://github.com/Vannil/cheerilee.el") (:keywords  " multimedia tools"))])(checkbox . [(20150406 415) ((emacs (24)) (cl-lib (0 5)) ) "Quick manipulation of textual es * lexicalbinding: t *" single ((url: ."https://github.com/camdez/checkbox.el") (:keywords  " convenience"))])(cheatsheet . [(20160125 1828) ((emacs (24)) (cl-lib (0 5)) ) "create your own" single ((url: ."https://github.com/darksmile/cheatsheet") (:keywords  " convenience" " usability"))])(chatwork . [(20150808 1048)  nil  "ChatWork client for Emacs" single ((url: ."https://github.com/ataka/chatwork") (:keywords  " web"))])(charmap . [(20160309 1746)  nil  "Unicode table for Emacs" single ((url: ."https://github.com/lateau/charmap") (:keywords  " unicode character ucs"))])(char-menu . [(20160204 1415) ((avy-menu (0 1)) (emacs (24 3)) ) "Create your own menu for fast insertion of arbitrary symbols * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/char-menu") (:keywords  " convenience" " editing"))])(chapel-mode . [(20160505 1500)  nil  "a CC Mode for Cha derived from derivedmodeex" single ((url: ."https://github.com/russel/Emacs-Chapel-Mode") (:keywords  "   Chapel languages oop"))])(change-inner . [(20150707 2344) ((expand-region (0 7)) ) "Change contents based on semantic units" single ((url: ."https://github.com/magnars/change-inner.el") (:keywords  " convenience" " extensions"))])(cff . [(20160119 418) ((emacs (24)) (cl-lib (0 5)) ) "Search of the C/C++ file header by the source and vice versa * lexicalbinding: t *" single ((url: ."https://github.com/fourier/cff") (:keywords  " find-file"))])(cerbere . [(20140418 2215) ((f (0 16 0)) (s (1 9 0)) (pkg-info (0 5)) ) "Unit testing in Emacs for several programming languages" tar ((url: ."https://github.com/nlamirault/cerbere") (:keywords  " python" " go" " php" " tests" " tdd"))])(centimacro . [(20140306 2227)  nil  "Assign multiple macros as global key bindings" single ((url: ."https://github.com/abo-abo/centimacro") (:keywords  " macros"))])(centered-window-mode . [(20160210 1847) ((s (1 10 0)) ) "Center the text when there's only one window" single ((url: ."https://github.com/anler/centered-window-mode") (:keywords  " faces" " windows"))])(celery . [(20150812 1647) ((s (1 9 0)) (dash-functional (2 11 0)) (emacs (24)) (deferred (0 3 2)) ) "a minor mode to draw stats from  and more?  * lexicalbinding: t *" single ((url: ."https://github.com/ardumont/emacs-celery") (:keywords  " celery" " convenience"))])(cedit . [(20150101 14)  nil  "pareditlike commands for clike languages" single ((url: ."https://github.com/zk-phi/cedit") (:keywords ""))])(cdnjs . [(20140218 512) ((f (0 16 0)) (dash (2 5 0)) (pkg-info (0 4)) (deferred (0 3 2)) (cl-lib (0 3)) ) "A front end for http://.com" single ((url: ."https://github.com/yasuyk/cdnjs.el") (:keywords  " tools"))])(cdlatex . [(20140708 1153)  nil  "Fast input methods for LaTeX environments and math" single ((url: ."https://github.com/cdominik/cdlatex") (:keywords  " tex"))])(cdb . [(20160417 2212)  nil  "constant database () reader for Emacs Lisp" single ((url: ."https://github.com/skk-dev/ddskk") (:keywords  " cdb"))])(cd-compile . [(20141109 357)  nil  "run compile in a specific directory" single ((url: ."https://github.com/jamienicol/emacs-cd-compile") (:keywords ""))])(ccc . [(20160417 2212)  nil  "buffer local cursor color control library" single ((url: ."https://github.com/skk-dev/ddskk") (:keywords  " cursor"))])(cbm . [(20160201 106) ((cl-lib (0 5)) ) "Switch to "similiar" buffers." single ((url: ."https://github.com/akermu/cbm.el") (:keywords  " buffers"))])(caskxy . [(20150106 5) ((log4e (0 2 0)) (yaxception (0 1)) ) "Control Cask in Emacs" single ((url: ."https://github.com/aki2o/caskxy") (:keywords  " convenience"))])(cask-package-toolset . [(20160111 1635) ((f (0 10 0)) (commander (0 2 0)) (dash (1 8 0)) (shut-up (0 1 0)) (s (1 6 1)) (emacs (24)) (ansi (0 1 0)) (cl-lib (0 3)) ) "Toolsettize your package   * lexicalbinding: t *" single ((url: ."https://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords  " convenience" " tools"))])(cask-mode . [(20160430 1909) ((emacs (24 3)) ) "major mode for editing Cask files  * lexicalbinding: t *" single ((url: ."https://github.com/Wilfred/cask-mode") (:keywords ""))])(cask . [(20160512 16) ((f (0 16 0)) (dash (2 2 0)) (shut-up (0 1 0)) (s (1 8 0)) (epl (0 5)) (package-build (0 1)) (cl-lib (0 3)) ) "Cask: Project management for Emacs package deopment  * lexicalbinding: t *" tar ((url: ."https://github.com/cask/cask") (:keywords  " speed" " convenience"))])(caseformat . [(20160302 1956) ((dash (2 12 1)) (s (1 10 0)) (emacs (24)) (cl-lib (0 5)) ) "Format based letter case converter  * lexicalbinding: t *" single ((url: ."https://github.com/HKey/caseformat") (:keywords  " convenience"))])(caroline-theme . [(20160318 1320) ((emacs (24)) ) "A trip down to New Orleans..." single ((url: ."https://github.com/xjackk/caroline-theme") (:keywords ""))])(cargo . [(20160517 1729) ((emacs (24 3)) (rust-mode (0 2 0)) ) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((url: ."https://github.com/kwrooijen/cargo.el") (:keywords  " tools"))])(camcorder . [(20160405 1234) ((emacs (24)) (names (20150000)) (cl-lib (0 5)) ) "Record screencasts in gif or other formats.  * lexicalbinding: t *" single ((url: ."https://github.com/Malabarba/camcorder.el") (:keywords  " multimedia screencast"))])(calmer-forest-theme . [(20151122 849)  nil  "Darkish theme with green/orange tint" single ((url: ."https://github.com/caldwell/calmer-forest-theme") (:keywords ""))])(calfw-gcal . [(20120111 1800)  nil  "Filename:" tar ((url: ."https://github.com/myuhe/calfw-gcal.el") (:keywords  " convenience" " calendar" " calfw.el"))])(calfw . [(20160303 1058) ((google-maps (20130412 230)) ) "Calendar view framework on Emacs" tar ((url: ."https://github.com/kiwanami/emacs-calfw") (:keywords  " calendar"))])(cal-china-x . [(20160103 333) ((cl-lib (0 5)) ) "Chinese localization, lunar/horoscope/zodiac info and more..." single ((url: ."https://github.com/xwl/cal-china-x") (:keywords ""))])(cake2 . [(20140626 2042) ((f (0 16 2)) (cake-inflector (1 1 0)) (anything (1 3 9)) (dash (2 6 0)) (s (1 9 0)) (json (1 2)) (ht (2 0)) (historyf (0 0 8)) ) "CakePHP2 Minor Mode" tar ((url: ."https://github.com/k1LoW/emacs-cake2") (:keywords ""))])(cake-inflector . [(20140415 1702) ((s (1 9 0)) ) "Lazy porting CakePHP infrector.php to" single ((url: ."https://github.com/k1LoW/emacs-cake-inflector") (:keywords ""))])(cake . [(20140604 1231) ((cake-inflector (1 1 0)) (anything (1 3 9)) (historyf (0 0 8)) ) "CakePHP Minor Mode" tar ((url: ."https://github.com/k1LoW/emacs-cake") (:keywords ""))])(cacoo . [(20120320 759)  nil  "Minor mode for Cacoo (http://.com)" tar ((url: ."https://github.com/kiwanami/emacs-cacoo") (:keywords  " convenience" " diagram"))])(cache . [(20111020 700)  nil  "implementation of a hash table whose keyvalue pairs expire" single ((url: ."https://github.com/nflath/cache") (:keywords ""))])(cabledolphin . [(20160204 1738) ((emacs (24 4)) (seq (1 0)) ) "capture Emacs network traffic  * lexicalbinding: t *" single ((url: ."https://github.com/legoscia/cabledolphin") (:keywords  " comm"))])(c0-mode . [(20151111 252)  nil  "Major mode for editing C0 files" tar ((url: ."https://github.com/catern/c0-mode") (:keywords  "   c0 languages"))])(c-eldoc . [(20150904 1632)  nil  "pful description of the arguments to C functions" single ((url: ."https://github.com/nflath/c-eldoc") (:keywords ""))])(c-c-combo . [(20151224 1055)  nil  "Make stuff happen when you reach a target wpm * lexicalbinding: nil *" single ((url: ."https://github.com/CestDiego/c-c-combo.el") (:keywords ""))])(button-lock . [(20150223 2154)  nil  "Clickable text defined by regular expression" single ((url: ."https://github.com/rolandwalker/button-lock") (:keywords  " mouse" " button" " hypermedia" " extensions"))])(buttercup . [(20160514 1534)  nil  "BehaviorDriven Emacs Lisp Testing *lexicalbinding:t*" tar ((url: ."https://github.com/jorgenschaefer/emacs-buttercup") (:keywords ""))])(butler . [(20150812 808) ((emacs (24)) (json (1 2)) (deferred (0 3 2)) ) "Client for Jenkins" tar ((url: ."https://github.com/AshtonKem/Butler") (:keywords  " Jenkins" " Hudson" " CI"))])(busybee-theme . [(20151116 1849)  nil  "URL: http://github.com/mswift42/" single ((url: ."https://github.com/mswift42/busybee-theme") (:keywords ""))])(buster-snippets . [(20151125 1810) ((yasnippet (0 8 0)) ) "Yasnippets for the Buster javascript testing framework" tar ((url: ."https://github.com/magnars/buster-snippets.el") (:keywords  " snippets"))])(buster-mode . [(20140928 2013)  nil  "Minor mode to speed up deopment when writing tests with Buster.js" single ((url: ."https://github.com/magnars/buster-mode") (:keywords  " buster testing javascript"))])(bury-successful-compilation . [(20160420 1507)  nil  "Bury the *compilation* buffer after successful compilation" single ((url: ."https://github.com/EricCrosson/bury-successful-compilation") (:keywords  " compilation"))])(bundler . [(20160121 1924) ((inf-ruby (2 1)) (cl-lib (0 5)) ) "Interact with Bundler from Emacs" single ((url: ."https://github.com/tobiassvn/bundler.el") (:keywords  " bundler ruby"))])(bug-reference-github . [(20131203 505)  nil  "Automatically set `bugreferenceurlformat' in Github repositories." single ((url: ."https://github.com/arnested/bug-reference-github") (:keywords  " programming" " tools"))])(buffer-utils . [(20140805 322)  nil  "Buffermanipulation utility functions" single ((url: ."https://github.com/rolandwalker/buffer-utils") (:keywords  " extensions"))])(buffer-move . [(20160108 2308)  nil  "easily swap buffers" single ((url: ."https://github.com/lukhas/buffer-move") (:keywords  " lisp" "convenience"))])(buffer-flip . [(20160110 1054) ((key-chord (20150808)) ) "Use keychord to cycle through buffers like AltTab in Windows" single ((url: ."https://github.com/killdash9/buffer-flip.el") (:keywords  " convenience"))])(buffer-buttons . [(20150106 2239)  nil  "Define, save, and load codesafe buttons in files for emacs" single ((url: ."https://github.com/rpav/buffer-buttons") (:keywords ""))])(bubbleberry-theme . [(20141017 1744) ((emacs (24 1)) ) "A theme based on LightTable for Emacs24" single ((url: ."https://github.com/jasonm23/emacs-bubbleberry-theme") (:keywords ""))])(bts-github . [(20150108 1627) ((gh (0 8 2)) (bts (0 0 1)) ) "A plugin of bts for GitHub * coding: utf8 *" single ((url: ."https://github.com/aki2o/emacs-bts-github") (:keywords  " convenience"))])(bts . [(20151109 2133) ((log4e (0 3 0)) (dash (2 9 0)) (s (1 9 0)) (yaxception (0 3 3)) (pos-tip (0 4 5)) (widget-mvc (0 0 2)) ) "A unified UI for various bug tracking systems * coding: utf8 *" tar ((url: ."https://github.com/aki2o/emacs-bts") (:keywords  " convenience"))])(btc-ticker . [(20151113 2259) ((json (1 2)) (request (0 2 0)) ) "Shows latest bitcoin price" single ((url: ."https://github.com/niedbalski/emacs-btc-ticker") (:keywords  " news"))])(browse-url-dwim . [(20140805 322) ((string-utils (0 3 2)) ) "Contextsensitive external browse URL or Internet search" single ((url: ."https://github.com/rolandwalker/browse-url-dwim") (:keywords  " hypermedia"))])(browse-kill-ring . [(20160125 1609)  nil  "interactiy insert items from killring * coding: utf8 *" single ((url: ."https://github.com/browse-kill-ring/browse-kill-ring") (:keywords  " convenience"))])(browse-at-remote . [(20160414 821) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5)) ) "Open github/gitlab/bitbucket page from Emacs * lexicalbinding:t *" single ((url: ."https://github.com/rmuslimov/browse-at-remote") (:keywords  "   github" " gitlab" " bitbucket" " convenience"))])(broadcast . [(20151205 1012) ((emacs (24 4)) ) "Links buffers together for simultaneous editing." single ((url: ."https://github.com/killdash9/broadcast.el") (:keywords  " convenience" " frames" " link" " cursors"))])(brainfuck-mode . [(20150113 1642) ((langdoc (20130601 1450)) ) "Brainfuck mode for Emacs" single ((url: ."https://github.com/tom-tan/brainfuck-mode") (:keywords  " brainfuck" " langdoc"))])(bracketed-paste . [(20160408 748) ((emacs (24 3)) ) "bracketed paste mode support within emacs nw * lexicalbinding: t *" single ((url: ."https://github.com/hchbaw/bracketed-paste.el") (:keywords  " terminals"))])(bpr . [(20160516 1602) ((emacs (24)) ) "Background Process Runner" tar ((url: ."https://github.com/ilya-babanov/emacs-bpr") (:keywords  " background" " async" " process" " management"))])(bpe . [(20141229 605) ((emacs (24 1)) ) "Blog from Org mode to Blogger * lexicalbinding: t *" single ((url: ."https://github.com/yuutayamada/bpe") (:keywords  " Blogger" " blog"))])(boxquote . [(20081012 426)  nil  "Quote text with a semibox." single ((url: ."https://github.com/davep/boxquote.el") (:keywords ""))])(boron-theme . [(20150118 152) ((emacs (24 0)) ) "an Emacs 24 theme based on Boron (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-boron-theme") (:keywords ""))])(borland-blue-theme . [(20160117 2121) ((emacs (24 1)) ) "Blue/low theme based on old DOS Borland/Turbo C IDE" single ((url: ."https://github.com/fourier/borland-blue-theme") (:keywords  " themes"))])(boon . [(20160229 635)  nil  "An Ergonomic Command Mode  * lexicalbinding: t *" tar ((url: ."https://github.com/jyp/boon") (:keywords ""))])(bonjourmadame . [(20160112 1756)  nil  "Say "lo ma'am!"" single ((url: ."https://github.com/pierre-lecocq/bonjourmadame") (:keywords ""))])(bongo . [(20160313 2217) ((emacs (24 1)) (cl-lib (0 5)) ) "play music with Emacs" tar ((url: ."https://github.com/dbrock/bongo") (:keywords ""))])(bog . [(20160518 959) ((cl-lib (0 5)) ) "Extensions for research notes in Org mode" tar ((url: ."https://github.com/kyleam/bog") (:keywords  " bib" " outlines"))])(bm . [(20151224 401)  nil  "Visible bookmarks in buffer." tar ((url: ."https://github.com/joodland/bm") (:keywords  " bookmark" " highlight" " faces" " persistent"))])(blog-admin . [(20160516 5) ((f (0 17 3)) (s (1 10 0)) (names (20151201 0)) (ctable (0 1 1)) ) "Blog admin for emacs with hexo/orgpage supported  * lexicalbinding: t *" tar ((url: ."https://github.com/CodeFalling/blog-admin") (:keywords  " tools" " blog" " org" " hexo" " org-page"))])(blockdiag-mode . [(20160427 1324) ((emacs (24 3)) ) "Major mode for editing blockdiag files" single ((url: ."https://github.com/xcezx/blockdiag-mode") (:keywords ""))])(bliss-theme . [(20141116 2349) ((emacs (24 0)) ) "an Emacs 24 theme based on Bliss (tmTheme)" single ((url: ."https://github.com/emacsfodder/emacs-bliss-theme") (:keywords ""))])(blgrep . [(20150401 2216) ((clmemo (20140321 715)) ) "Block grep" tar ((url: ."https://github.com/ataka/blgrep") (:keywords  " tools" " convenience"))])(bitly . [(20151126 48)  nil  "Shorten URLs using the .com shortener service" single ((url: ."https://github.com/jorgenschaefer/bitly-el") (:keywords ""))])(bitbake . [(20160106 1528) ((mmm-mode (0 5 4)) (dash (2 6 0)) (s (1 10 0)) (emacs (24 1)) ) "Running  from emacs" single ((url: ."https://github.com/canatella/bitbake-el") (:keywords  " convenience"))])(bison-mode . [(20141119 1643)  nil  "Major mode for editing bison, yacc and lex files." single ((url: ."https://github.com/Wilfred/bison-mode") (:keywords  " bison-mode" " yacc-mode"))])(birds-of-paradise-plus-theme . [(20130420 529)  nil  "A brown/orange lightondark theme for Emacs 24 (deftheme)." single ((url: ."https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords  " themes"))])(bing-dict . [(20160515 459)  nil  "Minimalists' EnglishChinese Bing dictionary" tar ((url: ."https://github.com/cute-jumper/bing-dict.el") (:keywords  " extensions"))])(bind-map . [(20160511 415) ((emacs (24 3)) ) "Bind personal keymaps in multiple locations * lexicalbinding: t *" tar ((url: ."https://github.com/justbur/emacs-bind-map") (:keywords ""))])(bind-key . [(20160404 229)  nil  "A simple way to manage personal keybindings" single ((url: ."https://github.com/jwiegley/use-package") (:keywords  " keys keybinding config dotemacs"))])(bind-chord . [(20160408 7) ((bind-key (1 0)) (key-chord (0 6)) ) "keychord binding per for usepackagechords" single ((url: ."https://github.com/waymondo/use-package-chords") (:keywords  " convenience" " tools" " extensions"))])(bibtex-utils . [(20150924 2157)  nil  "Provides utilities for extending BibTeX mode" single ((url: ."https://github.com/plantarum/bibtex-utils") (:keywords  " bibtex"))])(bibslurp . [(20151203 746) ((dash (1 5 0)) (s (1 6 0)) ) "retrieve BibTeX entries from NASA ADS" single ((url: ."https://github.com/mkmcc/bibslurp") (:keywords  " bibliography" " nasa ads"))])(bibretrieve . [(20131215 40) ((emacs (24 3)) (auctex (11 87)) ) "Retrieving BibTeX entries from the web" tar ((url: ."https://github.com/pzorin/bibretrieve") (:keywords  " bibtex" " latex" " mathscinet" " arxiv" " zbmath"))])(biblio-core . [(20160407 1727) ((dash (2 12 1)) (emacs (24 3)) (seq (1 11)) (let-alist (1 0 4)) ) "A framework for looking up and displaying bibliographic entries * lexicalbinding: t *" single ((url: ."https://github.com/cpitclaudel/biblio.el") (:keywords  " bib" " tex" " convenience" " hypermedia"))])(biblio . [(20160407 1727) ((emacs (24 3)) (biblio-core (0 2)) ) "Browse and import graphic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org * lexicalbinding: t *" tar ((url: ."https://github.com/cpitclaudel/biblio.el") (:keywords  " bib" " tex" " convenience" " hypermedia"))])(bfbuilder . [(20151007 1415) ((cl-lib (0 3)) ) "A brainfuck deopment environment with interactive debugger" single ((url: ."https://github.com/zk-phi/bfbuilder") (:keywords ""))])(bf-mode . [(20130403 2242)  nil  "Browse file persistently on dired" single ((url: ."https://github.com/emacs-jp/bf-mode") (:keywords  " convenience"))])(better-defaults . [(20160128 1518)  nil  "Fixing weird quirks and poor defaults" single ((url: ."https://github.com/technomancy/better-defaults") (:keywords  " convenience"))])(bert . [(20131117 1814)  nil  "BERT serialization library for Emacs" single ((url: ."https://github.com/manzyuk/bert-el") (:keywords  " comm data"))])(benchmark-init . [(20150905 1738)  nil  "Benchmarks Emacs require and load calls" tar ((url: ."https://github.com/dholm/benchmark-init-el") (:keywords  " benchmark"))])(beginend . [(20151117 836) ((emacs (24 4)) ) "Redefine M< and M> for some modes   * lexicalbinding: t *" tar ((url: ."https://github.com/DamienCassou/beginend") (:keywords  " dired message mu4e begin end beginning buffer"))])(beacon . [(20160430 2249) ((seq (2 14)) ) "Highlight the cursor whenever the window scrolls  * lexicalbinding: t *" single ((url: ."https://github.com/Malabarba/beacon") (:keywords  " convenience"))])(bdo . [(20140126 1701)  nil  "Do things to a browser page from Emacs. BETA!" tar ((url: ."https://github.com/chrisdone/bdo") (:keywords  " development"))])(bbyac . [(20150316 1801) ((browse-kill-ring (1 3)) (cl-lib (0 5)) ) "Type a little Bit, and Bang! You Are Completed." single ((url: ."https://github.com/baohaojun/bbyac") (:keywords  " abbrev"))])(bbdb2erc . [(20130607 1429) ((bbdb (3 0)) ) "make bbdb show if pal is online with ERC, click i to chat" single ((url: ."https://github.com/unhammer/bbdb2erc") (:keywords  " IRC" " contacts" " chat" " client" " Internet"))])(bbdb-vcard . [(20150714 450) ((bbdb (3 0)) ) "vCard import/export for BBDB" tar ((url: ."https://github.com/tohojo/bbdb-vcard") (:keywords  " data calendar mail news"))])(bbdb-handy . [(20150708 852) ((bbdb (3 1)) ) "BBDB window as emailaddress chooser when write an email" single ((url: ."https://github.com/tumashu/bbdb-handy") (:keywords ""))])(bbdb-ext . [(20151221 413) ((bbdb (2 36)) ) "Filename:" single ((url: ."https://github.com/vapniks/bbdb-ext") (:keywords  " extensions"))])(bbdb-china . [(20150616 956) ((chinese-pyim (0 0 1)) (bbdb-vcard (0 4 1)) ) "BBDB utils, which let Chinese BBDB users f easy" single ((url: ."https://github.com/tumashu/bbdb-china") (:keywords ""))])(bbdb-android . [(20150706 1324) ((bbdb-vcard (20150705 341)) ) "Android phone contacts import/export for BBDB" single ((url: ."https://github.com/tumashu/bbdb-android") (:keywords ""))])(bbdb- . [(20140222 754) ((log4e (0 2 0)) (yaxception (0 1)) (bbdb (20140123 1541)) ) "provide interface for more easily search/choice than BBDB." single ((url: ."https://github.com/aki2o/bbdb-") (:keywords  " bbdb" " news" " mail"))])(bbcode-mode . [(20141104 542)  nil  "Major mode for writing BBCode markup" single ((url: ."https://github.com/ejmr/bbcode-mode") (:keywords ""))])(bats-mode . [(20160514 1415)  nil  "Emacs mode for editing and running Bats tests" single ((url: ."https://github.com/dougm/bats-mode") (:keywords  " bats" " tests"))])(basic-theme . [(20151010 1607) ((emacs (24)) ) "Minimalistic light color theme" single ((url: ."https://github.com/fgeller/basic-theme.el") (:keywords  " theme basic minimal colors"))])(bash-completion . [(20150514 2228)  nil  "BASH completion for the sl buffer" tar ((url: ."https://github.com/szermatt/emacs-bash-completion") (:keywords ""))])(baidu-life . [(20160426 2019) ((cl-lib (0 5)) ) "Use baidu api to do some interesting things" single ((url: ."https://github.com/lujun9972/el-baidu-life") (:keywords  " lisp" " baidu"))])(badwolf-theme . [(20160517 134) ((emacs (24)) ) "Bad Wolf color theme" single ((url: ."https://github.com/bkruczyk/badwolf-emacs") (:keywords  " themes"))])(badger-theme . [(20140717 1032)  nil  "A dark theme for Emacs 24.  * lexicalbinding: t *" single ((url: ."https://github.com/ccann/badger-theme") (:keywords ""))])(backup-walker . [(20130720 2316)  nil  "quickly traverse all backups of a file" single ((url: ."https://github.com/lewang/backup-walker") (:keywords  " backup"))])(back-button . [(20150805 404) ((pcache (0 2 3)) (list-utils (0 4 2)) (nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) ) "Visual navigation through mark rings" single ((url: ."https://github.com/rolandwalker/back-button") (:keywords  " convenience" " navigation" " interface"))])(babel-repl . [(20160505 601) ((emacs (24)) ) "Run ba REPL" single ((url: ."https://github.com/hung-phan/babel-repl") (:keywords  " babel" " javascript" " es6"))])(babel . [(20131231 2325)  nil  "interface to web translation services such as Bafish" tar ((url: ."https://github.com/juergenhoetzel/babel") (:keywords  " translation" " web"))])(avy-zap . [(20160331 230) ((avy (0 2 0)) ) "Zap to char using `avy'" single ((url: ."https://github.com/cute-jumper/avy-zap") (:keywords  " extensions"))])(avy-migemo . [(20160504 1949) ((migemo (1 9)) (emacs (24 4)) (avy (0 4 0)) ) "avy with migemo * lexicalbinding: t *" tar ((url: ."https://github.com/momomo5717/avy-migemo") (:keywords  " avy" " migemo"))])(avy-menu . [(20160129 1504) ((emacs (24 3)) (avy (0 3 0)) ) "Library providing avypowered popup menu * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/avy-menu") (:keywords  " popup" " menu"))])(avy . [(20160518 1439) ((emacs (24 1)) (cl-lib (0 5)) ) "treebased completion * lexicalbinding: t *" tar ((url: ."https://github.com/abo-abo/avy") (:keywords  " point" " location"))])(autumn-light-theme . [(20150517 15)  nil  "A light color theme with muted, autumnal colors." single ((url: ."https://github.com/aalpern/emacs-color-theme-autumn-light") (:keywords  " color" " theme"))])(autotetris-mode . [(20151222 257) ((cl-lib (0 5)) ) "automatically play tetris" single ((url: ."https://github.com/skeeto/autotetris-mode") (:keywords ""))])(autotest . [(20160331 1600)  nil  "ZenTest's  integration with emacs." single ((url: ."https://github.com/zenspider/elisp") (:keywords  " testing" " ruby" " convenience"))])(autopair . [(20160304 2037) ((cl-lib (0 3)) ) "Automagically pair braces and quotes like TextMate" tar ((url: ."https://github.com/capitaomorte/autopair") (:keywords  " convenience" " emulations"))])(automargin . [(20141126 1031)  nil  "add margins to windows notsplitted, and center them" single ((url: ."https://github.com/zk-phi/automargin") (:keywords ""))])(autodisass-llvm-bitcode . [(20150411 1813)  nil  "Automatically disassemble LLVM bitcode" tar ((url: ."https://github.com/gbalats/autodisass-llvm-bitcode") (:keywords  " convenience" " data" " files"))])(autodisass-java-bytecode . [(20151006 12)  nil  "Automatically disassemble Java bytecode" tar ((url: ."https://github.com/gbalats/autodisass-java-bytecode") (:keywords  " convenience" " data" " files"))])(autobookmarks . [(20160501 321)  nil  "Save recently visited files and buffers" single ((url: ."https://github.com/Fuco1/autobookmarks") (:keywords  " files"))])(auto-yasnippet . [(20160223 1908) ((yasnippet (0 8 0)) ) "Quickly create disposable yasnippets" tar ((url: ."https://github.com/abo-abo/auto-yasnippet") (:keywords ""))])(auto-virtualenv . [(20160220 2253) ((s (1 10 0)) (pyvenv (1 9)) (cl-lib (0 5)) ) "Auto activate python virtualenvs" single ((url: ."https://github.com/marcwebbie/auto-virtualenv") (:keywords  " Python" " Virtualenv" " Tools"))])(auto-shell-command . [(20150417 157) ((popwin (20130329)) (deferred (20130312)) ) "Run the sl command asynchronously that you specified when you save the file." single ((url: ."https://github.com/ongaeshi/auto-shell-command") (:keywords  " shell" " save" " async" " deferred" " auto"))])(auto-save-buffers-enhanced . [(20130608 1049)  nil  "Automatically save buffers in a decent way" single ((url: ."https://github.com/kentaro/auto-save-buffers-enhanced") (:keywords ""))])(auto-pause . [(20160426 2016) ((emacs (24 4)) ) "Run processes which will be paused when Emacs is idle  * lexicalbinding: t *" single ((url: ."https://github.com/lujun9972/auto-pause") (:keywords  " convenience" " menu"))])(auto-package-update . [(20151026 1411) ((dash (2 1 0)) (emacs (24 4)) ) "Automatically update Emacs packages." single ((url: ."https://github.com/rranelli/auto-package-update.el") (:keywords  " package" " update"))])(auto-indent-mode . [(20160427 1122)  nil  "Filename:" tar ((url: ."https://github.com/mattfidler/auto-indent-mode.el") (:keywords  " Auto Indentation"))])(auto-highlight-symbol . [(20130313 1743)  nil  "Automatic highlighting current symbol minor mode" single ((url: ."https://github.com/gennad/auto-highlight-symbol") (:keywords  " highlight face match convenience"))])(auto-dim-other-buffers . [(20160129 146)  nil  "Makes noncurrent buffers less prominent * lexicalbinding: t *" single ((url: ."https://github.com/mina86/auto-dim-other-buffers.el") (:keywords ""))])(auto-dictionary . [(20150411 10)  nil  "automatic dictionary switcher for flysl" tar ((url: ."https://github.com/nschum/auto-dictionary-mode") (:keywords  " wp"))])(auto-complete-sage . [(20160514 1551) ((sage-shell-mode (0 1 0)) (auto-complete (1 5 1)) ) "An autocomplete source for sageslmode." single ((url: ."https://github.com/stakemori/auto-complete-sage") (:keywords  " Sage" " math" " auto-complete"))])(auto-complete-rst . [(20140225 1744) ((auto-complete (1 4)) ) "Filename:" tar ((url: ."https://github.com/tkf/auto-complete-rst") (:keywords ""))])(auto-complete-pcmp . [(20140303 1055) ((log4e (0 2 0)) (auto-complete (1 4 0)) (yaxception (0 1)) ) "Provide autocomplete sources using pcomplete results" single ((url: ."https://github.com/aki2o/auto-complete-pcmp") (:keywords  " completion"))])(auto-complete-nxml . [(20140221 1258) ((auto-complete (1 4)) ) "do completion by autocomplete on nXMLmode" single ((url: ."https://github.com/aki2o/auto-complete-nxml") (:keywords  " completion" " html" " xml"))])(auto-complete-exuberant-ctags . [(20140320 1524) ((auto-complete (1 4 0)) ) "Exuberant ctags autocomplete source" single ((url: ."https://github.com/k1LoW/auto-complete-exuberant-ctags") (:keywords  " anto-complete" " exuberant ctags"))])(auto-complete-clang-async . [(20140513 758)  nil  "Auto Completion source for clang for GNU Emacs" single ((url: ."https://github.com/Golevka/emacs-clang-complete-async") (:keywords  " completion" " convenience"))])(auto-complete-clang . [(20140409 1552) ((auto-complete (1 3 1)) ) "Auto Completion source for clang for GNU Emacs" single ((url: ."https://github.com/brianjcj/auto-complete-clang") (:keywords  " completion" " convenience"))])(auto-complete-chunk . [(20140225 1746) ((auto-complete (1 4)) ) "Filename:" single ((url: ."https://github.com/tkf/auto-complete-chunk") (:keywords ""))])(auto-complete-c-headers . [(20150912 1123) ((auto-complete (1 4)) ) "An autocomplete source for C/C++ header files" single ((url: ."https://github.com/mooz/auto-complete-c-headers") (:keywords  " c"))])(auto-complete-auctex . [(20140224 158) ((auto-complete (1 4)) (yasnippet (0 6 1)) ) "autocompletion for auctex" single ((url: ."https://github.com/monsanto/auto-complete-auctex") (:keywords ""))])(auto-complete . [(20160416 2104)  nil  "Auto Completion for GNU Emacs" tar ((url: ."https://github.com/auto-complete/auto-complete") (:keywords  " completion" " convenience"))])(auto-compile . [(20160424 1918) ((dash (2 12 1)) (packed (0 5 3)) (emacs (24 3)) ) "automatically compile Emacs Lisp libraries" single ((url: ."https://github.com/tarsius/auto-compile") (:keywords  " compile" " convenience" " lisp"))])(auto-auto-indent . [(20131107 303) ((es-lib (0 1)) (cl-lib (1 0)) ) "Indents code as you type" single ((url: ."https://github.com/sabof/auto-auto-indent") (:keywords ""))])(auto-async-byte-compile . [(20120323 541)  nil  "Automatically bytecompile when saved" single ((url: ."https://github.com/rubikitch/auto-async-byte-compile") (:keywords  " lisp" " convenience"))])(auth-password-store . [(20160228 2358) ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5)) ) "Integrate authsource with passwordstore * lexicalbinding: t *" tar ((url: ."https://github.com/DamienCassou/auth-password-store") (:keywords  " pass password-store auth-source username password login"))])(aurora-theme . [(20151016 202)  nil  "A theme inspired by SublimeText's Material theme" single ((url: ."https://github.com/xzerocode/aurora-theme") (:keywords ""))])(aurora-config-mode . [(20140520 1703)  nil  "Major mode for Apache Aurora configuration files" single ((url: ."https://github.com/bdd/aurora-config-mode.el") (:keywords  " languages" " configuration"))])(aurel . [(20160309 1636) ((emacs (24 3)) ) "Search, get info, vote and download AUR packages   * lexicalbinding: t *" single ((url: ."https://github.com/alezost/aurel") (:keywords  " tools"))])(audio-notes-mode . [(20140205 354)  nil  "Play audio notes synced from somewherese." single ((url: ."https://github.com/Malabarba/audio-notes-mode") (:keywords  " hypermedia convenience"))])(auctex-lua . [(20151122 10) ((lua-mode (20130419)) (auctex (11 86)) ) "Lua editing support for AUCTeX" single ((url: ."https://github.com/vermiculus/auctex-lua") (:keywords  " latex" " lua"))])(auctex-latexmk . [(20160307 1952) ((auctex (11 87)) ) "Add LatexMk support to AUCTeX" single ((url: ."https://github.com/tom-tan/auctex-latexmk") (:keywords  " tex"))])(atom-one-dark-theme . [(20160516 2044)  nil  "Atom One Dark color theme" single ((url: ."https://github.com/jonathanchu/atom-one-dark-theme") (:keywords ""))])(atom-dark-theme . [(20151120 1535)  nil  "An Emacs port of the Atom Dark theme from Atom.io." single ((url: ."https://github.com/whitlockjc/atom-dark-theme-emacs") (:keywords  " themes atom dark"))])(async . [(20160513 1628)  nil  "Asynchronous processing in Emacs * lexicalbinding: t *" tar ((url: ."https://github.com/jwiegley/emacs-async") (:keywords  " async"))])(assess . [(20160507 1710) ((dash (2 12 0)) (emacs (24 4)) (m-buffer (0 14)) ) "Test support functions * lexicalbinding: t *" tar ((url: ."https://github.com/phillord/assess") (:keywords ""))])(asn1-mode . [(20151124 1428) ((s (1 10 0)) (emacs (24 3)) ) "Filename:" single ((url: ."https://github.com/kawabata/asn1-mode") (:keywords  " languages" " processes" " tools"))])(asilea . [(20150105 2325) ((emacs (24)) (cl-lib (0 5)) ) "Find best compiler options using simulated annealing * lexicalbinding: t *" single ((url: ."https://github.com/Fanael/asilea") (:keywords ""))])(arview . [(20160420 509)  nil  "extract and view archives in the temporary directory" single ((url: ."https://github.com/afainer/arview") (:keywords  " files"))])(artbollocks-mode . [(20141213 532)  nil  "Improve your writing (especially about art)" single ((url: ."https://github.com/sachac/artbollocks-mode") (:keywords ""))])(arjen-grey-theme . [(20160404 315)  nil  "A soothing dark grey theme" single ((url: ."https://github.com/credmp/arjen-grey-theme") (:keywords  " faces"))])(ariadne . [(20131118 111) ((bert (0 1)) ) "Ariadne plugin for Emacs" single ((url: ."https://github.com/manzyuk/ariadne-el") (:keywords  " comm convenience processes"))])(arduino-mode . [(20160102 2322)  nil  " " single ((url: ."https://github.com/bookest/arduino-mode") (:keywords  " languages" " arduino"))])(archive-region . [(20140202 742)  nil  "Move region to archive file instead of killing" single ((url: ."https://github.com/rubikitch/archive-region") (:keywords  " languages"))])(apropospriate-theme . [(20160213 130)  nil  "(provide ')" tar ((url: ."https://github.com/waymondo/apropospriate-theme") (:keywords ""))])(aproject . [(20150605 1706)  nil  "Basic project framework for Emacs" tar ((url: ."https://github.com/vietor/aproject") (:keywords  " environment project"))])(apples-mode . [(20110121 1218)  nil  "Major mode for editing and executing AppleScript code" tar ((url: ."https://github.com/tequilasunset/apples-mode") (:keywords  " AppleScript" " languages"))])(aozora-view . [(20140310 2117)  nil  "Filename:" single ((url: ."https://github.com/kawabata/aozora-view") (:keywords  " aozora bunko"))])(anzu . [(20160406 712) ((emacs (24)) (cl-lib (0 5)) ) "Show number of matches in modeline while searching * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-anzu") (:keywords ""))])(anything-sage . [(20141107 1102) ((sage-shell-mode (0 0 1)) (anything (1 3 9)) (cl-lib (0 5)) ) "An anything extension for sageslmode." single ((url: ."https://github.com/stakemori/anything-sage") (:keywords  " Sage" " math" " anything"))])(anything-replace-string . [(20140317 1836) ((anything (1 3 9)) ) "`replacestring' and `queryreplace' `anything' interface" single ((url: ."https://github.com/k1LoW/anything-replace-string") (:keywords ""))])(anything-project . [(20141024 1727) ((anything (1 3 9)) (imakado (0 12)) ) "finding any resource of a project" single ((url: ."https://github.com/imakado/anything-project") (:keywords  " convenience"))])(anything-milkode . [(20140518 2243) ((milkode (0 3)) (anything (1 3 9)) ) "Command line search with Milkode" single ((url: ."https://github.com/ongaeshi/anything-milkode") (:keywords  " milkode" " anything" " search" " grep" " jump" " keyword"))])(anything-git-grep . [(20130609 1040) ((anything (1 3 9)) ) "anything for git grep" tar ((url: ."https://github.com/mechairoi/anything-git-grep") (:keywords  " anything" " git"))])(anything-git-files . [(20130609 1854) ((anything (1 3 9)) ) "anything for git files" single ((url: ."https://github.com/tarao/anything-git-files-el") (:keywords  " anything" " git"))])(anything-exuberant-ctags . [(20140317 737) ((anything (1 3 9)) ) "Exuberant ctags anything interface" single ((url: ."https://github.com/k1LoW/anything-exuberant-ctags") (:keywords  " anything" " exuberant ctags"))])(anyins . [(20150514 1736)  nil  "Insert content at multiple places from sl command or killring" single ((url: ."https://github.com/antham/anyins") (:keywords  " insert" " rectangular"))])(anybar . [(20160113 2)  nil  "Control AnyBar from Emacs" single ((url: ."https://github.com/tie-rack/anybar-el") (:keywords  " anybar"))])(anx-api . [(20140208 2314)  nil  "Interact with the AppNexus API from Emacs." single ((url: ."https://github.com/rmloveland/emacs-appnexus-api") (:keywords  " Convenience" " JSON" " REST" " API" " AppNexus"))])(anti-zenburn-theme . [(20160502 750)  nil  "Lowcontrast Zenburninverted theme" single ((url: ."https://github.com/m00natic/anti-zenburn-theme") (:keywords ""))])(ant . [(20160211 2343)  nil  "pers for compiling with" single ((url: ."https://github.com/apg/ant-el") (:keywords  " compilation" " ant" " java"))])(ansible-doc . [(20150525 105) ((emacs (24 1)) ) "Ansible documentation Minor Mode  * lexicalbinding: t *" tar ((url: ."https://github.com/lunaryorn/ansible-doc.el") (:keywords  " tools" " help"))])(ansible . [(20160326 2331) ((f (0 16 2)) (s (1 9 0)) ) "Ansible minor mode" tar ((url: ."https://github.com/k1LoW/emacs-ansible") (:keywords ""))])(ansi . [(20151023 1618) ((dash (1 5 0)) (s (1 6 1)) ) "Turn string into  strings" single ((url: ."https://github.com/rejeep/ansi.el") (:keywords  " color" " ansi"))])(annoying-arrows-mode . [(20151114 102)  nil  "Ring the l if using arrows too much" single ((url: ."https://github.com/magnars/annoying-arrows-mode.el") (:keywords ""))])(annotate . [(20151228 22)  nil  "files without changing them" single ((url: ."https://github.com/bastibe/annotate.el") (:keywords ""))])(angular-snippets . [(20140514 1323) ((dash (1 2 0)) (s (1 4 0)) ) "Yasnippets for AngularJS" tar ((url: ."https://github.com/magnars/angular-snippets.el") (:keywords  " snippets"))])(angular-mode . [(20151202 527)  nil  "Major mode for Angular.js" tar ((url: ."https://github.com/omouse/angularjs-mode") (:keywords  " languages javascript"))])(angry-police-captain . [(20120829 2052)  nil  "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ((url: ."https://github.com/rolpereira/angry-police-captain-el") (:keywords  " games" " web" " fun"))])(android-mode . [(20160503 2246)  nil  "Minor mode for Android application deopment" single ((url: ."https://github.com/remvee/android-mode") (:keywords  " tools processes"))])(anaphora . [(20140805 322)  nil  "anaphoric macros providing implicit temp variables" single ((url: ."https://github.com/rolandwalker/anaphora") (:keywords  " extensions"))])(anaconda-mode . [(20160411 2150) ((f (0 16 2)) (dash (2 6 0)) (s (1 9)) (emacs (24)) (pythonic (0 1 0)) ) "Code navigation, documentation lookup and completion for Python  * lexicalbinding: t *" single ((url: ."https://github.com/proofit404/anaconda-mode") (:keywords ""))])(ample-zen-theme . [(20150120 554)  nil  "Filename:" single ((url: ."https://github.com/mjwall/ample-zen") (:keywords  " theme" " dark" " emacs 24"))])(ample-theme . [(20150815 201)  nil  "Filename:" tar ((url: ."https://github.com/jordonbiondo/ample-theme") (:keywords  " theme" " dark"))])(ample-regexps . [(20160501 6)  nil  "ample regular expressions for Emacs" tar ((url: ."https://github.com/immerrr/ample-regexps.el") (:keywords  " regexps" " extensions" " tools"))])(amd-mode . [(20160320 1731) ((f (0 16 2)) (dash (2 5 0)) (s (1 9 0)) (js2-refactor (0 6 1)) (js2-mode (20140114)) (makey (0 3)) (ag (0 47)) (projectile (0 10 0)) ) "Minor mode for handling JavaScript AMD module requirements." single ((url: ."https://github.com/NicolasPetton/amd-mode.el") (:keywords  " javascript" " amd" " projectile"))])(all-ext . [(20130201 621) ((all (1 0)) ) "Filename:" single ((url: ."https://github.com/rubikitch/all-ext") (:keywords  " all" " search" " replace" " anything" " helm" " occur"))])(align-cljlet . [(20160113 505) ((clojure-mode (1 11 5)) ) "Space align various Clojure forms" tar ((url: ."https://github.com/gstamp/align-cljlet") (:keywords ""))])(alert . [(20160507 921) ((log4e (0 3 0)) (gntp (0 1)) ) "Growlstyle notification system for Emacs" single ((url: ."https://github.com/jwiegley/alert") (:keywords  " notification emacs message"))])(alect-themes . [(20160414 1614) ((emacs (24 0)) ) "Configurable light, dark and black themes for Emacs 24 or later   * lexicalbinding: t *" tar ((url: ."https://github.com/alezost/alect-themes") (:keywords  " color theme"))])(alda-mode . [(20160322 1500) ((emacs (24 0)) ) "A simple major mode for the musical programming language Alda" single ((url: ."https://github.com/jgkamat/alda-mode") (:keywords  " alda" " highlight"))])(alchemist . [(20160427 1557) ((dash (2 11 0)) (elixir-mode (2 2 5)) (pkg-info (0 4)) (emacs (24 4)) (company (0 8 0)) ) "Elixir tooling integration into Emacs" tar ((url: ."https://github.com/tonini/alchemist.el") (:keywords  " languages" " elixir" " elixirc" " mix" " hex" " alchemist"))])(airplay . [(20130213 548) ((request (20130110 2144)) (deferred (0 3 1)) (simple-httpd (1 4 1)) ) "Airplay bindings to Emacs" tar ((url: ."https://github.com/gongo/airplay-el") (:keywords  " appletv airplay"))])(airline-themes . [(20160204 710) ((powerline (2 3)) ) "vimairline themes for emacs powerline" tar ((url: ."https://github.com/AnthonyDiGirolamo/airline-themes") (:keywords  " evil" " mode-line" " powerline" " airline" " themes"))])(ahungry-theme . [(20160517 1158) ((emacs (24)) ) "Ahungry color theme for Emacs.  Make sure to (loadtheme 'ahungry)." single ((url: ."https://github.com/ahungry/color-theme-ahungry") (:keywords  " ahungry palette color theme emacs color-theme deftheme"))])(ahk-mode . [(20160321 621) ((emacs (24 3)) ) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L) * lexicalbinding: t *" single ((url: ."https://github.com/ralesi/ahk-mode") (:keywords  " ahk" " AutoHotkey" " hotkey" " keyboard shortcut" " automation"))])(aggressive-indent . [(20160519 714) ((emacs (24 1)) (cl-lib (0 5)) ) "Minor mode to aggressiy keep your code always indented" single ((url: ."https://github.com/Malabarba/aggressive-indent-mode") (:keywords  " indent lisp maint tools"))])(aggressive-fill-paragraph . [(20160302 614) ((dash (2 10 0)) ) "A mode to automatically keep paragraphs filled" single ((url: ."https://github.com/davidshepherd7/aggressive-fill-paragraph-mode") (:keywords  " fill-paragraph" " automatic" " comments"))])(ag . [(20160322 706) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5)) ) "A frontend for  ('the silver searcher'), the C ack replacement." single ((url: ."https://github.com/Wilfred/ag.el") (:keywords ""))])(afternoon-theme . [(20140105 259) ((emacs (24 1)) ) "Dark color theme with a deep blue background" single ((url: ."https://github.com/osener/emacs-afternoon-theme") (:keywords  " themes"))])(aes . [(20160122 437)  nil  "Implementation of AES" single ((url: ."https://github.com/Sauermann/emacs-aes") (:keywords  " data" " tools"))])(adoc-mode . [(20160315 530) ((markup-faces (1 0 0)) ) "a majormode for editing AsciiDoc files in Emacs" single ((url: ."https://github.com/sensorflo/adoc-mode") (:keywords  " wp AsciiDoc"))])(addressbook-bookmark . [(20160317 1403) ((emacs (24)) ) "An address book based on Standard Emacs bookmarks." single ((url: ."https://github.com/thierryvolpiatto/addressbook-bookmark") (:keywords ""))])(actionscript-mode . [(20150518 1141)  nil  "A simple mode for editing Actionscript 3 files" single ((url: ."https://github.com/austinhaas/actionscript-mode") (:keywords  " language modes"))])(ack-menu . [(20150505 422) ((mag-menu (0 1 0)) ) "A menubased frontend for ack   * lexicalbinding: t *" tar ((url: ."https://github.com/chumpage/ack-menu") (:keywords  " tools matching convenience"))])(ace-window . [(20160226 19) ((avy (0 2 0)) ) "Quickly switch windows. * lexicalbinding: t *" single ((url: ."https://github.com/abo-abo/ace-window") (:keywords  " window" " location"))])(ace-popup-menu . [(20160126 2031) ((avy-menu (0 1)) (emacs (24 3)) ) "Replace GUI popup menu in Emacs with something more efficient * lexicalbinding: t *" single ((url: ."https://github.com/mrkkrp/ace-popup-menu") (:keywords  " convenience" " popup" " menu"))])(ace-pinyin . [(20160516 1237) ((ace-jump-mode (2 0)) (pinyinlib (0 1 0)) (avy (0 2 0)) ) "Jump to Chinese characters using acejumpmode or avy" single ((url: ."https://github.com/cute-jumper/ace-pinyin") (:keywords  " extensions"))])(ace-mc . [(20160409 837) ((ace-jump-mode (1 0)) (dash (2 10 0)) (multiple-cursors (1 0)) ) "Add multiple cursors quickly using ace jump" single ((url: ."https://github.com/mm--/ace-mc") (:keywords  " motion" " location" " cursor"))])(ace-link . [(20160506 1436) ((avy (0 2 0)) ) "Quickly follow links" single ((url: ."https://github.com/abo-abo/ace-link") (:keywords  " convenience" " links"))])(ace-jump-zap . [(20150331 442) ((ace-jump-mode (1 0)) (dash (2 10 0)) ) "Character zapping, `acejumpmode` style" single ((url: ."https://github.com/waymondo/ace-jump-zap") (:keywords  " convenience" " tools" " extensions"))])(ace-jump-mode . [(20140616 1615)  nil  "a quick cursor location minor mode for emacs * coding: utf8unix *" single ((url: ."https://github.com/winterTTr/ace-jump-mode") (:keywords ""))])(ace-jump-helm-line . [(20160330 318) ((avy (0 4 0)) (helm (1 6 3)) ) "Acejump to a candidate in m window" single ((url: ."https://github.com/cute-jumper/ace-jump-helm-line") (:keywords  " extensions"))])(ace-jump-buffer . [(20160301 658) ((dash (2 4 0)) (avy (0 4 0)) ) "fast buffer switching extension to `avy' * lexicalbinding: t *" single ((url: ."https://github.com/waymondo/ace-jump-buffer") (:keywords ""))])(ace-isearch . [(20150808 2058) ((ace-jump-mode (2 0)) (emacs (24)) (avy (0 3)) (helm-swoop (1 4)) ) "A seamless bridge between isearch, acejumpmode, avy and mswoop * coding: utf8 lexicalbinding: t *" single ((url: ."https://github.com/tam17aki/ace-isearch") (:keywords ""))])(ace-flyspell . [(20151107 403) ((ace-jump-mode (2 0)) ) "Jump to and correct sling errors using `acejumpmode' and flysl" single ((url: ."https://github.com/cute-jumper/ace-flyspell") (:keywords  " extensions"))])(ac-sly . [(20150422 422)  nil  "An autocomplete source using sly completions" single ((url: ."https://github.com/qoocku/ac-sly") (:keywords ""))])(ac-slime . [(20150730 1135) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5)) ) "An autocomplete source using slime completions" single ((url: ."https://github.com/purcell/ac-slime") (:keywords ""))])(ac-skk . [(20141230 919) ((auto-complete (1 3 1)) (ddskk (16 0 50)) (cl-lib (0 5)) (tinysegmenter (0)) ) "Filename:" single ((url: ."https://github.com/myuhe/ac-skk.el") (:keywords  " convenience" " auto-complete"))])(ac-racer . [(20160518 1320) ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5)) ) "autocomplete source of racer" single ((url: ."https://github.com/syohex/emacs-ac-racer") (:keywords ""))])(ac-php . [(20160514 1038) ((f (0 17 0)) (xcscope (1)) (auto-complete (1 4 0)) (dash (1)) (s (1)) (emacs (24)) (popup (0 5 0)) (yasnippet (0 8 0)) (php-mode (1)) ) "autocompletion and company  source for php for GNU Emacs" tar ((url: ."https://github.com/xcwen/ac-php") (:keywords  " completion" " convenience" " intellisense"))])(ac-octave . [(20150927 1523) ((auto-complete (1 4 0)) ) "An autocomplete source for Octave" single ((url: ."https://github.com/coldnew/ac-octave") (:keywords  " Octave" " auto-complete" " completion"))])(ac-mozc . [(20150228 19) ((auto-complete (1 4)) (mozc (0)) (cl-lib (0 5)) ) "autocomplete sources for Japanese input using Mozc" single ((url: ."https://github.com/igjit/ac-mozc") (:keywords ""))])(ac-math . [(20141117 529) ((math-symbol-lists (1 0)) (auto-complete (1 4)) ) "Autocomplete sources for input of mathematical symbols and latex tags" single ((url: ."https://github.com/vspinu/ac-math") (:keywords  " latex" " auto-complete" " Unicode" " symbols"))])(ac-js2 . [(20140906 1942) ((skewer-mode (1 4)) (js2-mode (20090723)) ) "Autocomplete source for Js2mode, with navigation" tar ((url: ."https://github.com/ScottyB/ac-js2") (:keywords ""))])(ac-ispell . [(20151101 1027) ((auto-complete (1 4)) (cl-lib (0 5)) ) "isl completion source for autocomplete" single ((url: ."https://github.com/syohex/emacs-ac-ispell") (:keywords ""))])(ac-inf-ruby . [(20141023 2133) ((auto-complete (1 4)) (inf-ruby (2 3 2)) ) "Enable autocomplete in infruby sessions" single ((url: ."https://github.com/purcell/ac-inf-ruby") (:keywords  " languages" " tools"))])(ac-html-csswatcher . [(20151209 513) ((web-completion-data (0 1)) ) "css/less class/id completion with `achtml' or `companyweb'" single ((url: ."https://github.com/osv/ac-html-csswatcher") (:keywords  " html" " css" " less" " auto-complete"))])(ac-html-bootstrap . [(20160303 101) ((web-completion-data (0 1)) ) "auto complete bootstrap3/fontawesome classes for `achtml' and `companyweb'" tar ((url: ."https://github.com/osv/ac-html-bootstrap") (:keywords  " html" " auto-complete" " bootstrap" " cssx"))])(ac-html-angular . [(20151225 1519) ((web-completion-data (0 1)) ) "auto complete angular15 data for `achtml' and `companyweb'" single ((url: ."https://github.com/osv/ac-html-angular") (:keywords  " html" " auto-complete" " angular"))])(ac-html . [(20151005 1531) ((f (0 17)) (auto-complete (1 4)) (dash (2 10)) (s (1 9)) ) "auto complete source for html tags and attributes" tar ((url: ."https://github.com/cheunghy/ac-html") (:keywords  " html" " auto-complete" " slim" " haml" " jade"))])(ac-helm . [(20160319 1033) ((auto-complete (1 4 0)) (popup (0 5 0)) (helm (1 6 3)) (cl-lib (0 5)) ) "m interface for autocomplete" single ((url: ."https://github.com/yasuyk/ac-helm") (:keywords  " completion" " convenience" " helm"))])(ac-haskell-process . [(20150423 2202) ((auto-complete (1 4)) (haskell-mode (13)) ) "Hasl autocomplete source which uses the current hasl process" single ((url: ."https://github.com/purcell/ac-haskell-process") (:keywords  " languages"))])(ac-geiser . [(20130929 1447) ((auto-complete (1 4)) (geiser (0 5)) ) "Emacs autocomplete backend for geiser." tar ((url: ."https://github.com/xiaohanyu/ac-geiser") (:keywords ""))])(ac-etags . [(20151101 1021) ((auto-complete (1 4)) ) "etags/ctags completion source for autocomplete" single ((url: ."https://github.com/syohex/emacs-ac-etags") (:keywords ""))])(ac-emoji . [(20150920 1859) ((auto-complete (1 5 0)) (cl-lib (0 5)) ) "autocomplete source of Emoji" tar ((url: ."https://github.com/syohex/emacs-ac-emoji") (:keywords ""))])(ac-emmet . [(20131015 2358) ((auto-complete (1 4)) (emmet-mode (1 0 2)) ) "autocomplete sources for emmetmode's snippets" single ((url: ."https://github.com/yasuyk/ac-emmet") (:keywords  " completion" " convenience" " emmet"))])(ac-dcd . [(20160311 2217) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7)) ) "Auto Completion source for dcd for GNU Emacs" single ((url: ."https://github.com/atilaneves/ac-dcd") (:keywords  " languages"))])(ac-clang . [(20150907 108) ((auto-complete (1 4 0)) (emacs (24)) (yasnippet (0 8 0)) (pos-tip (0 4 6)) (cl-lib (0 5)) ) "Auto Completion source by libclang for GNU Emacs * lexicalbinding: t *" single ((url: ."https://github.com/yaruopooner/ac-clang") (:keywords  " completion" " convenience" " intellisense"))])(ac-cider . [(20160305 2324) ((auto-complete (1 4)) (cider (0 8 0)) (cl-lib (0 3)) ) "Clojure autocomplete sources using CIDER" single ((url: ."https://github.com/clojure-emacs/ac-cider") (:keywords  " languages" " clojure" " nrepl" " cider" " compliment"))])(ac-capf . [(20151101 1017) ((auto-complete (1 4)) (cl-lib (0 5)) ) "autocomplete source with completionatpoint" single ((url: ."https://github.com/syohex/emacs-ac-capf") (:keywords ""))])(ac-cake2 . [(20140320 1508) ((auto-complete (1 4 0)) (cake2 (1 1 2)) ) "CakePHP 2 Minor Mode autocomplete source" single ((url: ."https://github.com/k1LoW/emacs-ac-cake2") (:keywords ""))])(ac-cake . [(20140316 29) ((auto-complete (1 4 0)) (cake (1 4 2)) ) "CakePHP Minor Mode autocomplete source" single ((url: ."https://github.com/k1LoW/emacs-ac-cake") (:keywords ""))])(ac-c-headers . [(20151021 1634) ((auto-complete (1 3 1)) ) "autocomplete source for C headers" single ((url: ."https://github.com/zk-phi/ac-c-headers") (:keywords ""))])(ac-anaconda . [(20160222 323) ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0)) ) "Anaconda sources for autocompletemode  * lexicalbinding: t *" single ((url: ."https://github.com/proofit404/ac-anaconda") (:keywords ""))])(ac-alchemist . [(20150908 1456) ((auto-complete (1 5 0)) (cl-lib (0 5)) (alchemist (1 5 0)) ) "autocomplete source for alchemist * lexicalbinding: t *" single ((url: ."https://github.com/syohex/emacs-ac-alchemist") (:keywords ""))])(abyss-theme . [(20160420 2012) ((emacs (24)) ) "A dark theme with contrasting colours." single ((url: ."https://github.com/mgrbyte/emacs-abyss-theme") (:keywords  " theme" " dark" " contrasting colours"))])(abl-mode . [(20160129 1831)  nil  "Python TDD minor mode" tar ((url: ."https://github.com/afroisalreadyinu/abl-mode") (:keywords ""))])(abc-mode . [(20150725 130)  nil  "Major mode for editing abc music files" single ((url: ."https://github.com/mkjunker/abc-mode") (:keywords  " local" " docs"))])(aa-edit-mode . [(20160228 1417) ((emacs (24)) (navi2ch (2 0 0)) ) "Major mode for editing AA * lexicalbinding: t *" single ((url: ."https://github.com/zonuexe/aa-edit-mode") (:keywords  " text shiftjis"))])(@ . [(20140707 2020) ((queue (0 1)) (emacs (24)) ) "multipleinheritance prototypebased objects DSL" tar ((url: ."https://github.com/skeeto/at-el") (:keywords ""))])(4clojure . [(20150801 547) ((json (1 2)) (request (0 2 0)) ) "Open and evaluate .com questions" single ((url: ."https://github.com/losingkeys/4clojure.el") (:keywords  " languages" " data"))])(0blayout . [(20151021 1849)  nil  "Layout grouping with ease" single ((url: ."https://github.com/etu/0blayout-mode") (:keywords  " convenience" " window-management"))]))